// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type ThermostatsCoolRequest struct {
	DeviceId                  string   `json:"device_id" url:"device_id"`
	CoolingSetPointCelsius    *float64 `json:"cooling_set_point_celsius,omitempty" url:"cooling_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64 `json:"cooling_set_point_fahrenheit,omitempty" url:"cooling_set_point_fahrenheit,omitempty"`
	Sync                      *bool    `json:"sync,omitempty" url:"sync,omitempty"`
}

type ThermostatsGetRequest struct {
	DeviceId *string `json:"device_id,omitempty" url:"device_id,omitempty"`
	Name     *string `json:"name,omitempty" url:"name,omitempty"`
}

type ThermostatsHeatRequest struct {
	DeviceId                  string   `json:"device_id" url:"device_id"`
	HeatingSetPointCelsius    *float64 `json:"heating_set_point_celsius,omitempty" url:"heating_set_point_celsius,omitempty"`
	HeatingSetPointFahrenheit *float64 `json:"heating_set_point_fahrenheit,omitempty" url:"heating_set_point_fahrenheit,omitempty"`
	Sync                      *bool    `json:"sync,omitempty" url:"sync,omitempty"`
}

type ThermostatsHeatCoolRequest struct {
	DeviceId                  string   `json:"device_id" url:"device_id"`
	HeatingSetPointCelsius    *float64 `json:"heating_set_point_celsius,omitempty" url:"heating_set_point_celsius,omitempty"`
	HeatingSetPointFahrenheit *float64 `json:"heating_set_point_fahrenheit,omitempty" url:"heating_set_point_fahrenheit,omitempty"`
	CoolingSetPointCelsius    *float64 `json:"cooling_set_point_celsius,omitempty" url:"cooling_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64 `json:"cooling_set_point_fahrenheit,omitempty" url:"cooling_set_point_fahrenheit,omitempty"`
	Sync                      *bool    `json:"sync,omitempty" url:"sync,omitempty"`
}

type ThermostatsListRequest struct {
	// List all devices owned by this connected account
	ConnectedAccountId  *string                                                  `json:"connected_account_id,omitempty" url:"connected_account_id,omitempty"`
	ConnectedAccountIds []string                                                 `json:"connected_account_ids,omitempty" url:"connected_account_ids,omitempty"`
	ConnectWebviewId    *string                                                  `json:"connect_webview_id,omitempty" url:"connect_webview_id,omitempty"`
	DeviceType          *DeviceType                                              `json:"device_type,omitempty" url:"device_type,omitempty"`
	DeviceTypes         []DeviceType                                             `json:"device_types,omitempty" url:"device_types,omitempty"`
	Manufacturer        *Manufacturer                                            `json:"manufacturer,omitempty" url:"manufacturer,omitempty"`
	DeviceIds           []string                                                 `json:"device_ids,omitempty" url:"device_ids,omitempty"`
	Limit               *float64                                                 `json:"limit,omitempty" url:"limit,omitempty"`
	CreatedBefore       *time.Time                                               `json:"created_before,omitempty" url:"created_before,omitempty"`
	UserIdentifierKey   *string                                                  `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
	CustomMetadataHas   map[string]*ThermostatsListRequestCustomMetadataHasValue `json:"custom_metadata_has,omitempty" url:"custom_metadata_has,omitempty"`
	IncludeIf           []ThermostatsListRequestIncludeIfItem                    `json:"include_if,omitempty" url:"include_if,omitempty"`
	ExcludeIf           []ThermostatsListRequestExcludeIfItem                    `json:"exclude_if,omitempty" url:"exclude_if,omitempty"`
}

func (t *ThermostatsListRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsListRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*t = ThermostatsListRequest(body)
	return nil
}

func (t *ThermostatsListRequest) MarshalJSON() ([]byte, error) {
	type embed ThermostatsListRequest
	var marshaler = struct {
		embed
		CreatedBefore *core.DateTime `json:"created_before,omitempty"`
	}{
		embed:         embed(*t),
		CreatedBefore: core.NewOptionalDateTime(t.CreatedBefore),
	}
	return json.Marshal(marshaler)
}

type ThermostatsOffRequest struct {
	DeviceId string `json:"device_id" url:"device_id"`
	Sync     *bool  `json:"sync,omitempty" url:"sync,omitempty"`
}

type ThermostatsSetFanModeRequest struct {
	DeviceId       string                                      `json:"device_id" url:"device_id"`
	FanMode        *FanMode                                    `json:"fan_mode,omitempty" url:"fan_mode,omitempty"`
	FanModeSetting *ThermostatsSetFanModeRequestFanModeSetting `json:"fan_mode_setting,omitempty" url:"fan_mode_setting,omitempty"`
	Sync           *bool                                       `json:"sync,omitempty" url:"sync,omitempty"`
}

type ThermostatsCoolResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsCoolResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsCoolResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsCoolResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsCoolResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsGetResponse struct {
	Thermostat *Device `json:"thermostat,omitempty" url:"thermostat,omitempty"`
	Ok         bool    `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsGetResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsGetResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsHeatCoolResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsHeatCoolResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsHeatCoolResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsHeatCoolResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsHeatCoolResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsHeatResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsHeatResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsHeatResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsHeatResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsHeatResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsListRequestCustomMetadataHasValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewThermostatsListRequestCustomMetadataHasValueFromString(value string) *ThermostatsListRequestCustomMetadataHasValue {
	return &ThermostatsListRequestCustomMetadataHasValue{typeName: "string", String: value}
}

func NewThermostatsListRequestCustomMetadataHasValueFromBoolean(value bool) *ThermostatsListRequestCustomMetadataHasValue {
	return &ThermostatsListRequestCustomMetadataHasValue{typeName: "boolean", Boolean: value}
}

func (t *ThermostatsListRequestCustomMetadataHasValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		t.typeName = "boolean"
		t.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t ThermostatsListRequestCustomMetadataHasValue) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return json.Marshal(t.String)
	case "boolean":
		return json.Marshal(t.Boolean)
	}
}

type ThermostatsListRequestCustomMetadataHasValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (t *ThermostatsListRequestCustomMetadataHasValue) Accept(visitor ThermostatsListRequestCustomMetadataHasValueVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "string":
		return visitor.VisitString(t.String)
	case "boolean":
		return visitor.VisitBoolean(t.Boolean)
	}
}

type ThermostatsListRequestExcludeIfItem string

const (
	ThermostatsListRequestExcludeIfItemCanRemotelyUnlock            ThermostatsListRequestExcludeIfItem = "can_remotely_unlock"
	ThermostatsListRequestExcludeIfItemCanRemotelyLock              ThermostatsListRequestExcludeIfItem = "can_remotely_lock"
	ThermostatsListRequestExcludeIfItemCanProgramOfflineAccessCodes ThermostatsListRequestExcludeIfItem = "can_program_offline_access_codes"
	ThermostatsListRequestExcludeIfItemCanProgramOnlineAccessCodes  ThermostatsListRequestExcludeIfItem = "can_program_online_access_codes"
	ThermostatsListRequestExcludeIfItemCanSimulateRemoval           ThermostatsListRequestExcludeIfItem = "can_simulate_removal"
)

func NewThermostatsListRequestExcludeIfItemFromString(s string) (ThermostatsListRequestExcludeIfItem, error) {
	switch s {
	case "can_remotely_unlock":
		return ThermostatsListRequestExcludeIfItemCanRemotelyUnlock, nil
	case "can_remotely_lock":
		return ThermostatsListRequestExcludeIfItemCanRemotelyLock, nil
	case "can_program_offline_access_codes":
		return ThermostatsListRequestExcludeIfItemCanProgramOfflineAccessCodes, nil
	case "can_program_online_access_codes":
		return ThermostatsListRequestExcludeIfItemCanProgramOnlineAccessCodes, nil
	case "can_simulate_removal":
		return ThermostatsListRequestExcludeIfItemCanSimulateRemoval, nil
	}
	var t ThermostatsListRequestExcludeIfItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t ThermostatsListRequestExcludeIfItem) Ptr() *ThermostatsListRequestExcludeIfItem {
	return &t
}

type ThermostatsListRequestIncludeIfItem string

const (
	ThermostatsListRequestIncludeIfItemCanRemotelyUnlock            ThermostatsListRequestIncludeIfItem = "can_remotely_unlock"
	ThermostatsListRequestIncludeIfItemCanRemotelyLock              ThermostatsListRequestIncludeIfItem = "can_remotely_lock"
	ThermostatsListRequestIncludeIfItemCanProgramOfflineAccessCodes ThermostatsListRequestIncludeIfItem = "can_program_offline_access_codes"
	ThermostatsListRequestIncludeIfItemCanProgramOnlineAccessCodes  ThermostatsListRequestIncludeIfItem = "can_program_online_access_codes"
	ThermostatsListRequestIncludeIfItemCanSimulateRemoval           ThermostatsListRequestIncludeIfItem = "can_simulate_removal"
)

func NewThermostatsListRequestIncludeIfItemFromString(s string) (ThermostatsListRequestIncludeIfItem, error) {
	switch s {
	case "can_remotely_unlock":
		return ThermostatsListRequestIncludeIfItemCanRemotelyUnlock, nil
	case "can_remotely_lock":
		return ThermostatsListRequestIncludeIfItemCanRemotelyLock, nil
	case "can_program_offline_access_codes":
		return ThermostatsListRequestIncludeIfItemCanProgramOfflineAccessCodes, nil
	case "can_program_online_access_codes":
		return ThermostatsListRequestIncludeIfItemCanProgramOnlineAccessCodes, nil
	case "can_simulate_removal":
		return ThermostatsListRequestIncludeIfItemCanSimulateRemoval, nil
	}
	var t ThermostatsListRequestIncludeIfItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t ThermostatsListRequestIncludeIfItem) Ptr() *ThermostatsListRequestIncludeIfItem {
	return &t
}

type ThermostatsListResponse struct {
	Thermostats []*Device `json:"thermostats,omitempty" url:"thermostats,omitempty"`
	Ok          bool      `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsListResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsListResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsOffResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsOffResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsOffResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsOffResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsOffResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsSetFanModeRequestFanModeSetting string

const (
	ThermostatsSetFanModeRequestFanModeSettingAuto ThermostatsSetFanModeRequestFanModeSetting = "auto"
	ThermostatsSetFanModeRequestFanModeSettingOn   ThermostatsSetFanModeRequestFanModeSetting = "on"
)

func NewThermostatsSetFanModeRequestFanModeSettingFromString(s string) (ThermostatsSetFanModeRequestFanModeSetting, error) {
	switch s {
	case "auto":
		return ThermostatsSetFanModeRequestFanModeSettingAuto, nil
	case "on":
		return ThermostatsSetFanModeRequestFanModeSettingOn, nil
	}
	var t ThermostatsSetFanModeRequestFanModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t ThermostatsSetFanModeRequestFanModeSetting) Ptr() *ThermostatsSetFanModeRequestFanModeSetting {
	return &t
}

type ThermostatsSetFanModeResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsSetFanModeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsSetFanModeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsSetFanModeResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsSetFanModeResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsUpdateRequestDefaultClimateSetting struct {
	AutomaticHeatingEnabled   *bool                                                         `json:"automatic_heating_enabled,omitempty" url:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool                                                         `json:"automatic_cooling_enabled,omitempty" url:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting `json:"hvac_mode_setting,omitempty" url:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64                                                      `json:"cooling_set_point_celsius,omitempty" url:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64                                                      `json:"heating_set_point_celsius,omitempty" url:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64                                                      `json:"cooling_set_point_fahrenheit,omitempty" url:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64                                                      `json:"heating_set_point_fahrenheit,omitempty" url:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool                                                         `json:"manual_override_allowed,omitempty" url:"manual_override_allowed,omitempty"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsUpdateRequestDefaultClimateSetting) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsUpdateRequestDefaultClimateSetting
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsUpdateRequestDefaultClimateSetting(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsUpdateRequestDefaultClimateSetting) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsUpdateResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (t *ThermostatsUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ThermostatsUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = ThermostatsUpdateResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *ThermostatsUpdateResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type ThermostatsUpdateRequest struct {
	DeviceId              string                                         `json:"device_id" url:"device_id"`
	DefaultClimateSetting *ThermostatsUpdateRequestDefaultClimateSetting `json:"default_climate_setting,omitempty" url:"default_climate_setting,omitempty"`
}

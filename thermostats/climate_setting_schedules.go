// This file was auto-generated by Fern from our API Definition.

package thermostats

import (
	json "encoding/json"
	fmt "fmt"
	seamapigo "github.com/seamapi/go"
	core "github.com/seamapi/go/core"
)

type ClimateSettingSchedulesCreateRequest struct {
	ScheduleType              *string                                              `json:"schedule_type,omitempty" url:"schedule_type,omitempty"`
	DeviceId                  string                                               `json:"device_id" url:"device_id"`
	Name                      *string                                              `json:"name,omitempty" url:"name,omitempty"`
	ScheduleStartsAt          string                                               `json:"schedule_starts_at" url:"schedule_starts_at"`
	ScheduleEndsAt            string                                               `json:"schedule_ends_at" url:"schedule_ends_at"`
	AutomaticHeatingEnabled   *bool                                                `json:"automatic_heating_enabled,omitempty" url:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool                                                `json:"automatic_cooling_enabled,omitempty" url:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *ClimateSettingSchedulesCreateRequestHvacModeSetting `json:"hvac_mode_setting,omitempty" url:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64                                             `json:"cooling_set_point_celsius,omitempty" url:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64                                             `json:"heating_set_point_celsius,omitempty" url:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64                                             `json:"cooling_set_point_fahrenheit,omitempty" url:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64                                             `json:"heating_set_point_fahrenheit,omitempty" url:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool                                                `json:"manual_override_allowed,omitempty" url:"manual_override_allowed,omitempty"`
}

type ClimateSettingSchedulesDeleteRequest struct {
	ClimateSettingScheduleId string `json:"climate_setting_schedule_id" url:"climate_setting_schedule_id"`
}

type ClimateSettingSchedulesGetRequest struct {
	ClimateSettingScheduleId *string `json:"climate_setting_schedule_id,omitempty" url:"climate_setting_schedule_id,omitempty"`
	DeviceId                 *string `json:"device_id,omitempty" url:"device_id,omitempty"`
}

type ClimateSettingSchedulesListRequest struct {
	DeviceId          string  `json:"device_id" url:"device_id"`
	UserIdentifierKey *string `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
}

type ClimateSettingSchedulesCreateRequestHvacModeSetting string

const (
	ClimateSettingSchedulesCreateRequestHvacModeSettingOff      ClimateSettingSchedulesCreateRequestHvacModeSetting = "off"
	ClimateSettingSchedulesCreateRequestHvacModeSettingHeat     ClimateSettingSchedulesCreateRequestHvacModeSetting = "heat"
	ClimateSettingSchedulesCreateRequestHvacModeSettingCool     ClimateSettingSchedulesCreateRequestHvacModeSetting = "cool"
	ClimateSettingSchedulesCreateRequestHvacModeSettingHeatCool ClimateSettingSchedulesCreateRequestHvacModeSetting = "heat_cool"
)

func NewClimateSettingSchedulesCreateRequestHvacModeSettingFromString(s string) (ClimateSettingSchedulesCreateRequestHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingCool, nil
	case "heat_cool":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingHeatCool, nil
	}
	var t ClimateSettingSchedulesCreateRequestHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingSchedulesCreateRequestHvacModeSetting) Ptr() *ClimateSettingSchedulesCreateRequestHvacModeSetting {
	return &c
}

type ClimateSettingSchedulesCreateResponse struct {
	ClimateSettingSchedule *seamapigo.ClimateSettingSchedule `json:"climate_setting_schedule,omitempty" url:"climate_setting_schedule,omitempty"`
	Ok                     bool                              `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedulesCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedulesCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedulesCreateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedulesCreateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedulesDeleteResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedulesDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedulesDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedulesDeleteResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedulesDeleteResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedulesGetResponse struct {
	ClimateSettingSchedule *seamapigo.ClimateSettingSchedule `json:"climate_setting_schedule,omitempty" url:"climate_setting_schedule,omitempty"`
	Ok                     bool                              `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedulesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedulesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedulesGetResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedulesGetResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedulesListResponse struct {
	ClimateSettingSchedules []*seamapigo.ClimateSettingSchedule `json:"climate_setting_schedules,omitempty" url:"climate_setting_schedules,omitempty"`
	Ok                      bool                                `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedulesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedulesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedulesListResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedulesListResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedulesUpdateRequestHvacModeSetting string

const (
	ClimateSettingSchedulesUpdateRequestHvacModeSettingOff      ClimateSettingSchedulesUpdateRequestHvacModeSetting = "off"
	ClimateSettingSchedulesUpdateRequestHvacModeSettingHeat     ClimateSettingSchedulesUpdateRequestHvacModeSetting = "heat"
	ClimateSettingSchedulesUpdateRequestHvacModeSettingCool     ClimateSettingSchedulesUpdateRequestHvacModeSetting = "cool"
	ClimateSettingSchedulesUpdateRequestHvacModeSettingHeatCool ClimateSettingSchedulesUpdateRequestHvacModeSetting = "heat_cool"
)

func NewClimateSettingSchedulesUpdateRequestHvacModeSettingFromString(s string) (ClimateSettingSchedulesUpdateRequestHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingCool, nil
	case "heat_cool":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingHeatCool, nil
	}
	var t ClimateSettingSchedulesUpdateRequestHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingSchedulesUpdateRequestHvacModeSetting) Ptr() *ClimateSettingSchedulesUpdateRequestHvacModeSetting {
	return &c
}

type ClimateSettingSchedulesUpdateResponse struct {
	ClimateSettingSchedule *seamapigo.ClimateSettingSchedule `json:"climate_setting_schedule,omitempty" url:"climate_setting_schedule,omitempty"`
	Ok                     bool                              `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedulesUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedulesUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedulesUpdateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedulesUpdateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedulesUpdateRequest struct {
	ClimateSettingScheduleId  string                                               `json:"climate_setting_schedule_id" url:"climate_setting_schedule_id"`
	ScheduleType              *string                                              `json:"schedule_type,omitempty" url:"schedule_type,omitempty"`
	Name                      *string                                              `json:"name,omitempty" url:"name,omitempty"`
	ScheduleStartsAt          *string                                              `json:"schedule_starts_at,omitempty" url:"schedule_starts_at,omitempty"`
	ScheduleEndsAt            *string                                              `json:"schedule_ends_at,omitempty" url:"schedule_ends_at,omitempty"`
	AutomaticHeatingEnabled   *bool                                                `json:"automatic_heating_enabled,omitempty" url:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool                                                `json:"automatic_cooling_enabled,omitempty" url:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *ClimateSettingSchedulesUpdateRequestHvacModeSetting `json:"hvac_mode_setting,omitempty" url:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64                                             `json:"cooling_set_point_celsius,omitempty" url:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64                                             `json:"heating_set_point_celsius,omitempty" url:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64                                             `json:"cooling_set_point_fahrenheit,omitempty" url:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64                                             `json:"heating_set_point_fahrenheit,omitempty" url:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool                                                `json:"manual_override_allowed,omitempty" url:"manual_override_allowed,omitempty"`
}

// This file was auto-generated by Fern from our API Definition.

package acs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type CredentialPoolsListResponseAcsCredentialPoolsItem struct {
	AcsCredentialPoolId     string    `json:"acs_credential_pool_id" url:"acs_credential_pool_id"`
	AcsSystemId             string    `json:"acs_system_id" url:"acs_system_id"`
	DisplayName             string    `json:"display_name" url:"display_name"`
	ExternalTypeDisplayName string    `json:"external_type_display_name" url:"external_type_display_name"`
	CreatedAt               time.Time `json:"created_at" url:"created_at"`
	WorkspaceId             string    `json:"workspace_id" url:"workspace_id"`
	externalType            string

	_rawJSON json.RawMessage
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) ExternalType() string {
	return c.externalType
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) UnmarshalJSON(data []byte) error {
	type embed CredentialPoolsListResponseAcsCredentialPoolsItem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialPoolsListResponseAcsCredentialPoolsItem(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.externalType = "hid_part_number"
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) MarshalJSON() ([]byte, error) {
	type embed CredentialPoolsListResponseAcsCredentialPoolsItem
	var marshaler = struct {
		embed
		CreatedAt    *core.DateTime `json:"created_at"`
		ExternalType string         `json:"external_type"`
	}{
		embed:        embed(*c),
		CreatedAt:    core.NewDateTime(c.CreatedAt),
		ExternalType: "hid_part_number",
	}
	return json.Marshal(marshaler)
}

func (c *CredentialPoolsListResponseAcsCredentialPoolsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation struct {
	AcsCredentialProvisioningAutomationId string    `json:"acs_credential_provisioning_automation_id" url:"acs_credential_provisioning_automation_id"`
	CredentialManagerAcsSystemId          string    `json:"credential_manager_acs_system_id" url:"credential_manager_acs_system_id"`
	UserIdentityId                        string    `json:"user_identity_id" url:"user_identity_id"`
	CreatedAt                             time.Time `json:"created_at" url:"created_at"`
	WorkspaceId                           string    `json:"workspace_id" url:"workspace_id"`

	_rawJSON json.RawMessage
}

func (c *CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation) UnmarshalJSON(data []byte) error {
	type embed CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation) MarshalJSON() ([]byte, error) {
	type embed CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialProvisioningAutomationsLaunchResponseAcsCredentialProvisioningAutomation) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsAssignResponseAcsCredential struct {
	AcsCredentialId            string                                                    `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                   `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                   `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                    `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                   `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                    `json:"display_name" url:"display_name"`
	Code                       *string                                                   `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               CredentialsAssignResponseAcsCredentialAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *CredentialsAssignResponseAcsCredentialExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                   `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                 `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                    `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                   `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                   `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*CredentialsAssignResponseAcsCredentialErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*CredentialsAssignResponseAcsCredentialWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                     `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *CredentialsAssignResponseAcsCredentialVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsAssignResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type embed CredentialsAssignResponseAcsCredential
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialsAssignResponseAcsCredential(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsAssignResponseAcsCredential) MarshalJSON() ([]byte, error) {
	type embed CredentialsAssignResponseAcsCredential
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialsAssignResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsAssignResponseAcsCredentialAccessMethod string

const (
	CredentialsAssignResponseAcsCredentialAccessMethodCode      CredentialsAssignResponseAcsCredentialAccessMethod = "code"
	CredentialsAssignResponseAcsCredentialAccessMethodCard      CredentialsAssignResponseAcsCredentialAccessMethod = "card"
	CredentialsAssignResponseAcsCredentialAccessMethodMobileKey CredentialsAssignResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsAssignResponseAcsCredentialAccessMethodFromString(s string) (CredentialsAssignResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsAssignResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsAssignResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsAssignResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsAssignResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsAssignResponseAcsCredentialAccessMethod) Ptr() *CredentialsAssignResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsAssignResponseAcsCredentialErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsAssignResponseAcsCredentialErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsAssignResponseAcsCredentialErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsAssignResponseAcsCredentialErrorsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsAssignResponseAcsCredentialErrorsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsAssignResponseAcsCredentialExternalType string

const (
	CredentialsAssignResponseAcsCredentialExternalTypePtiCard         CredentialsAssignResponseAcsCredentialExternalType = "pti_card"
	CredentialsAssignResponseAcsCredentialExternalTypeBrivoCredential CredentialsAssignResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsAssignResponseAcsCredentialExternalTypeHidCredential   CredentialsAssignResponseAcsCredentialExternalType = "hid_credential"
	CredentialsAssignResponseAcsCredentialExternalTypeVisionlineCard  CredentialsAssignResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsAssignResponseAcsCredentialExternalTypeFromString(s string) (CredentialsAssignResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsAssignResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsAssignResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsAssignResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsAssignResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsAssignResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsAssignResponseAcsCredentialExternalType) Ptr() *CredentialsAssignResponseAcsCredentialExternalType {
	return &c
}

type CredentialsAssignResponseAcsCredentialVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsAssignResponseAcsCredentialVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsAssignResponseAcsCredentialVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsAssignResponseAcsCredentialVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsAssignResponseAcsCredentialVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsAssignResponseAcsCredentialWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsAssignResponseAcsCredentialWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsAssignResponseAcsCredentialWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsAssignResponseAcsCredentialWarningsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsAssignResponseAcsCredentialWarningsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateRequestVisionlineMetadataCardFormat string

const (
	CredentialsCreateRequestVisionlineMetadataCardFormatTlCode CredentialsCreateRequestVisionlineMetadataCardFormat = "TLCode"
	CredentialsCreateRequestVisionlineMetadataCardFormatRfid48 CredentialsCreateRequestVisionlineMetadataCardFormat = "rfid48"
)

func NewCredentialsCreateRequestVisionlineMetadataCardFormatFromString(s string) (CredentialsCreateRequestVisionlineMetadataCardFormat, error) {
	switch s {
	case "TLCode":
		return CredentialsCreateRequestVisionlineMetadataCardFormatTlCode, nil
	case "rfid48":
		return CredentialsCreateRequestVisionlineMetadataCardFormatRfid48, nil
	}
	var t CredentialsCreateRequestVisionlineMetadataCardFormat
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateRequestVisionlineMetadataCardFormat) Ptr() *CredentialsCreateRequestVisionlineMetadataCardFormat {
	return &c
}

type CredentialsCreateResponseAcsCredential struct {
	AcsCredentialId            string                                                    `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                   `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                   `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                    `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                   `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                    `json:"display_name" url:"display_name"`
	Code                       *string                                                   `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               CredentialsCreateResponseAcsCredentialAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *CredentialsCreateResponseAcsCredentialExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                   `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                 `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                    `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                   `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                   `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*CredentialsCreateResponseAcsCredentialErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*CredentialsCreateResponseAcsCredentialWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                     `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *CredentialsCreateResponseAcsCredentialVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type embed CredentialsCreateResponseAcsCredential
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialsCreateResponseAcsCredential(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateResponseAcsCredential) MarshalJSON() ([]byte, error) {
	type embed CredentialsCreateResponseAcsCredential
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialsCreateResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateResponseAcsCredentialAccessMethod string

const (
	CredentialsCreateResponseAcsCredentialAccessMethodCode      CredentialsCreateResponseAcsCredentialAccessMethod = "code"
	CredentialsCreateResponseAcsCredentialAccessMethodCard      CredentialsCreateResponseAcsCredentialAccessMethod = "card"
	CredentialsCreateResponseAcsCredentialAccessMethodMobileKey CredentialsCreateResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsCreateResponseAcsCredentialAccessMethodFromString(s string) (CredentialsCreateResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsCreateResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsCreateResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsCreateResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsCreateResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateResponseAcsCredentialAccessMethod) Ptr() *CredentialsCreateResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsCreateResponseAcsCredentialErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateResponseAcsCredentialErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateResponseAcsCredentialErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsCreateResponseAcsCredentialErrorsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateResponseAcsCredentialErrorsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateResponseAcsCredentialExternalType string

const (
	CredentialsCreateResponseAcsCredentialExternalTypePtiCard         CredentialsCreateResponseAcsCredentialExternalType = "pti_card"
	CredentialsCreateResponseAcsCredentialExternalTypeBrivoCredential CredentialsCreateResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsCreateResponseAcsCredentialExternalTypeHidCredential   CredentialsCreateResponseAcsCredentialExternalType = "hid_credential"
	CredentialsCreateResponseAcsCredentialExternalTypeVisionlineCard  CredentialsCreateResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsCreateResponseAcsCredentialExternalTypeFromString(s string) (CredentialsCreateResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsCreateResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsCreateResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsCreateResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsCreateResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsCreateResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateResponseAcsCredentialExternalType) Ptr() *CredentialsCreateResponseAcsCredentialExternalType {
	return &c
}

type CredentialsCreateResponseAcsCredentialVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateResponseAcsCredentialVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateResponseAcsCredentialVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsCreateResponseAcsCredentialVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateResponseAcsCredentialVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateResponseAcsCredentialWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateResponseAcsCredentialWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateResponseAcsCredentialWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsCreateResponseAcsCredentialWarningsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateResponseAcsCredentialWarningsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsGetResponseAcsCredential struct {
	AcsCredentialId            string                                                 `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                 `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                 `json:"display_name" url:"display_name"`
	Code                       *string                                                `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               CredentialsGetResponseAcsCredentialAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *CredentialsGetResponseAcsCredentialExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                              `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                 `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*CredentialsGetResponseAcsCredentialErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*CredentialsGetResponseAcsCredentialWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                  `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *CredentialsGetResponseAcsCredentialVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsGetResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type embed CredentialsGetResponseAcsCredential
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialsGetResponseAcsCredential(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsGetResponseAcsCredential) MarshalJSON() ([]byte, error) {
	type embed CredentialsGetResponseAcsCredential
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialsGetResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsGetResponseAcsCredentialAccessMethod string

const (
	CredentialsGetResponseAcsCredentialAccessMethodCode      CredentialsGetResponseAcsCredentialAccessMethod = "code"
	CredentialsGetResponseAcsCredentialAccessMethodCard      CredentialsGetResponseAcsCredentialAccessMethod = "card"
	CredentialsGetResponseAcsCredentialAccessMethodMobileKey CredentialsGetResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsGetResponseAcsCredentialAccessMethodFromString(s string) (CredentialsGetResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsGetResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsGetResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsGetResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsGetResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsGetResponseAcsCredentialAccessMethod) Ptr() *CredentialsGetResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsGetResponseAcsCredentialErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsGetResponseAcsCredentialErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsGetResponseAcsCredentialErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsGetResponseAcsCredentialErrorsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsGetResponseAcsCredentialErrorsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsGetResponseAcsCredentialExternalType string

const (
	CredentialsGetResponseAcsCredentialExternalTypePtiCard         CredentialsGetResponseAcsCredentialExternalType = "pti_card"
	CredentialsGetResponseAcsCredentialExternalTypeBrivoCredential CredentialsGetResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsGetResponseAcsCredentialExternalTypeHidCredential   CredentialsGetResponseAcsCredentialExternalType = "hid_credential"
	CredentialsGetResponseAcsCredentialExternalTypeVisionlineCard  CredentialsGetResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsGetResponseAcsCredentialExternalTypeFromString(s string) (CredentialsGetResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsGetResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsGetResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsGetResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsGetResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsGetResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsGetResponseAcsCredentialExternalType) Ptr() *CredentialsGetResponseAcsCredentialExternalType {
	return &c
}

type CredentialsGetResponseAcsCredentialVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsGetResponseAcsCredentialVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsGetResponseAcsCredentialVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsGetResponseAcsCredentialVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsGetResponseAcsCredentialVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsGetResponseAcsCredentialWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsGetResponseAcsCredentialWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsGetResponseAcsCredentialWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsGetResponseAcsCredentialWarningsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsGetResponseAcsCredentialWarningsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponseAcsCredentialsItem struct {
	AcsCredentialId            string                                                       `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                      `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                      `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                       `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                      `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                       `json:"display_name" url:"display_name"`
	Code                       *string                                                      `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               CredentialsListResponseAcsCredentialsItemAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *CredentialsListResponseAcsCredentialsItemExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                      `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                    `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                       `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                      `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                      `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*CredentialsListResponseAcsCredentialsItemErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*CredentialsListResponseAcsCredentialsItemWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                        `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *CredentialsListResponseAcsCredentialsItemVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListResponseAcsCredentialsItem) UnmarshalJSON(data []byte) error {
	type embed CredentialsListResponseAcsCredentialsItem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialsListResponseAcsCredentialsItem(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListResponseAcsCredentialsItem) MarshalJSON() ([]byte, error) {
	type embed CredentialsListResponseAcsCredentialsItem
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialsListResponseAcsCredentialsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponseAcsCredentialsItemAccessMethod string

const (
	CredentialsListResponseAcsCredentialsItemAccessMethodCode      CredentialsListResponseAcsCredentialsItemAccessMethod = "code"
	CredentialsListResponseAcsCredentialsItemAccessMethodCard      CredentialsListResponseAcsCredentialsItemAccessMethod = "card"
	CredentialsListResponseAcsCredentialsItemAccessMethodMobileKey CredentialsListResponseAcsCredentialsItemAccessMethod = "mobile_key"
)

func NewCredentialsListResponseAcsCredentialsItemAccessMethodFromString(s string) (CredentialsListResponseAcsCredentialsItemAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsListResponseAcsCredentialsItemAccessMethodCode, nil
	case "card":
		return CredentialsListResponseAcsCredentialsItemAccessMethodCard, nil
	case "mobile_key":
		return CredentialsListResponseAcsCredentialsItemAccessMethodMobileKey, nil
	}
	var t CredentialsListResponseAcsCredentialsItemAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsListResponseAcsCredentialsItemAccessMethod) Ptr() *CredentialsListResponseAcsCredentialsItemAccessMethod {
	return &c
}

type CredentialsListResponseAcsCredentialsItemErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListResponseAcsCredentialsItemErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListResponseAcsCredentialsItemErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListResponseAcsCredentialsItemErrorsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListResponseAcsCredentialsItemErrorsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponseAcsCredentialsItemExternalType string

const (
	CredentialsListResponseAcsCredentialsItemExternalTypePtiCard         CredentialsListResponseAcsCredentialsItemExternalType = "pti_card"
	CredentialsListResponseAcsCredentialsItemExternalTypeBrivoCredential CredentialsListResponseAcsCredentialsItemExternalType = "brivo_credential"
	CredentialsListResponseAcsCredentialsItemExternalTypeHidCredential   CredentialsListResponseAcsCredentialsItemExternalType = "hid_credential"
	CredentialsListResponseAcsCredentialsItemExternalTypeVisionlineCard  CredentialsListResponseAcsCredentialsItemExternalType = "visionline_card"
)

func NewCredentialsListResponseAcsCredentialsItemExternalTypeFromString(s string) (CredentialsListResponseAcsCredentialsItemExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsListResponseAcsCredentialsItemExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsListResponseAcsCredentialsItemExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsListResponseAcsCredentialsItemExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsListResponseAcsCredentialsItemExternalTypeVisionlineCard, nil
	}
	var t CredentialsListResponseAcsCredentialsItemExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsListResponseAcsCredentialsItemExternalType) Ptr() *CredentialsListResponseAcsCredentialsItemExternalType {
	return &c
}

type CredentialsListResponseAcsCredentialsItemVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListResponseAcsCredentialsItemVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListResponseAcsCredentialsItemVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListResponseAcsCredentialsItemVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListResponseAcsCredentialsItemVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponseAcsCredentialsItemWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListResponseAcsCredentialsItemWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListResponseAcsCredentialsItemWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListResponseAcsCredentialsItemWarningsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListResponseAcsCredentialsItemWarningsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignResponseAcsCredential struct {
	AcsCredentialId            string                                                      `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                     `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                     `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                      `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                     `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                      `json:"display_name" url:"display_name"`
	Code                       *string                                                     `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               CredentialsUnassignResponseAcsCredentialAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *CredentialsUnassignResponseAcsCredentialExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                     `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                   `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                      `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                     `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                     `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*CredentialsUnassignResponseAcsCredentialErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*CredentialsUnassignResponseAcsCredentialWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                       `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *CredentialsUnassignResponseAcsCredentialVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUnassignResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type embed CredentialsUnassignResponseAcsCredential
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialsUnassignResponseAcsCredential(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUnassignResponseAcsCredential) MarshalJSON() ([]byte, error) {
	type embed CredentialsUnassignResponseAcsCredential
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialsUnassignResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignResponseAcsCredentialAccessMethod string

const (
	CredentialsUnassignResponseAcsCredentialAccessMethodCode      CredentialsUnassignResponseAcsCredentialAccessMethod = "code"
	CredentialsUnassignResponseAcsCredentialAccessMethodCard      CredentialsUnassignResponseAcsCredentialAccessMethod = "card"
	CredentialsUnassignResponseAcsCredentialAccessMethodMobileKey CredentialsUnassignResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsUnassignResponseAcsCredentialAccessMethodFromString(s string) (CredentialsUnassignResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsUnassignResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsUnassignResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsUnassignResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsUnassignResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUnassignResponseAcsCredentialAccessMethod) Ptr() *CredentialsUnassignResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsUnassignResponseAcsCredentialErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUnassignResponseAcsCredentialErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUnassignResponseAcsCredentialErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUnassignResponseAcsCredentialErrorsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUnassignResponseAcsCredentialErrorsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignResponseAcsCredentialExternalType string

const (
	CredentialsUnassignResponseAcsCredentialExternalTypePtiCard         CredentialsUnassignResponseAcsCredentialExternalType = "pti_card"
	CredentialsUnassignResponseAcsCredentialExternalTypeBrivoCredential CredentialsUnassignResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsUnassignResponseAcsCredentialExternalTypeHidCredential   CredentialsUnassignResponseAcsCredentialExternalType = "hid_credential"
	CredentialsUnassignResponseAcsCredentialExternalTypeVisionlineCard  CredentialsUnassignResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsUnassignResponseAcsCredentialExternalTypeFromString(s string) (CredentialsUnassignResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsUnassignResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsUnassignResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsUnassignResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsUnassignResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsUnassignResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUnassignResponseAcsCredentialExternalType) Ptr() *CredentialsUnassignResponseAcsCredentialExternalType {
	return &c
}

type CredentialsUnassignResponseAcsCredentialVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUnassignResponseAcsCredentialVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUnassignResponseAcsCredentialVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUnassignResponseAcsCredentialVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUnassignResponseAcsCredentialVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignResponseAcsCredentialWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUnassignResponseAcsCredentialWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUnassignResponseAcsCredentialWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUnassignResponseAcsCredentialWarningsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUnassignResponseAcsCredentialWarningsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUpdateResponseAcsCredential struct {
	AcsCredentialId            string                                                    `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                   `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                   `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                    `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                   `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                    `json:"display_name" url:"display_name"`
	Code                       *string                                                   `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               CredentialsUpdateResponseAcsCredentialAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *CredentialsUpdateResponseAcsCredentialExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                   `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                 `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                    `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                   `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                   `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*CredentialsUpdateResponseAcsCredentialErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*CredentialsUpdateResponseAcsCredentialWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                     `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *CredentialsUpdateResponseAcsCredentialVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUpdateResponseAcsCredential) UnmarshalJSON(data []byte) error {
	type embed CredentialsUpdateResponseAcsCredential
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CredentialsUpdateResponseAcsCredential(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUpdateResponseAcsCredential) MarshalJSON() ([]byte, error) {
	type embed CredentialsUpdateResponseAcsCredential
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CredentialsUpdateResponseAcsCredential) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUpdateResponseAcsCredentialAccessMethod string

const (
	CredentialsUpdateResponseAcsCredentialAccessMethodCode      CredentialsUpdateResponseAcsCredentialAccessMethod = "code"
	CredentialsUpdateResponseAcsCredentialAccessMethodCard      CredentialsUpdateResponseAcsCredentialAccessMethod = "card"
	CredentialsUpdateResponseAcsCredentialAccessMethodMobileKey CredentialsUpdateResponseAcsCredentialAccessMethod = "mobile_key"
)

func NewCredentialsUpdateResponseAcsCredentialAccessMethodFromString(s string) (CredentialsUpdateResponseAcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsUpdateResponseAcsCredentialAccessMethodCode, nil
	case "card":
		return CredentialsUpdateResponseAcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return CredentialsUpdateResponseAcsCredentialAccessMethodMobileKey, nil
	}
	var t CredentialsUpdateResponseAcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUpdateResponseAcsCredentialAccessMethod) Ptr() *CredentialsUpdateResponseAcsCredentialAccessMethod {
	return &c
}

type CredentialsUpdateResponseAcsCredentialErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUpdateResponseAcsCredentialErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUpdateResponseAcsCredentialErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUpdateResponseAcsCredentialErrorsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUpdateResponseAcsCredentialErrorsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUpdateResponseAcsCredentialExternalType string

const (
	CredentialsUpdateResponseAcsCredentialExternalTypePtiCard         CredentialsUpdateResponseAcsCredentialExternalType = "pti_card"
	CredentialsUpdateResponseAcsCredentialExternalTypeBrivoCredential CredentialsUpdateResponseAcsCredentialExternalType = "brivo_credential"
	CredentialsUpdateResponseAcsCredentialExternalTypeHidCredential   CredentialsUpdateResponseAcsCredentialExternalType = "hid_credential"
	CredentialsUpdateResponseAcsCredentialExternalTypeVisionlineCard  CredentialsUpdateResponseAcsCredentialExternalType = "visionline_card"
)

func NewCredentialsUpdateResponseAcsCredentialExternalTypeFromString(s string) (CredentialsUpdateResponseAcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return CredentialsUpdateResponseAcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return CredentialsUpdateResponseAcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return CredentialsUpdateResponseAcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return CredentialsUpdateResponseAcsCredentialExternalTypeVisionlineCard, nil
	}
	var t CredentialsUpdateResponseAcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsUpdateResponseAcsCredentialExternalType) Ptr() *CredentialsUpdateResponseAcsCredentialExternalType {
	return &c
}

type CredentialsUpdateResponseAcsCredentialVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUpdateResponseAcsCredentialVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUpdateResponseAcsCredentialVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUpdateResponseAcsCredentialVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUpdateResponseAcsCredentialVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUpdateResponseAcsCredentialWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUpdateResponseAcsCredentialWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUpdateResponseAcsCredentialWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUpdateResponseAcsCredentialWarningsItem(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUpdateResponseAcsCredentialWarningsItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EntrancesGetResponseAcsEntrance struct {
	AcsEntranceId      string                                             `json:"acs_entrance_id" url:"acs_entrance_id"`
	DisplayName        string                                             `json:"display_name" url:"display_name"`
	AcsSystemId        string                                             `json:"acs_system_id" url:"acs_system_id"`
	CreatedAt          time.Time                                          `json:"created_at" url:"created_at"`
	VisionlineMetadata *EntrancesGetResponseAcsEntranceVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesGetResponseAcsEntrance) UnmarshalJSON(data []byte) error {
	type embed EntrancesGetResponseAcsEntrance
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntrancesGetResponseAcsEntrance(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesGetResponseAcsEntrance) MarshalJSON() ([]byte, error) {
	type embed EntrancesGetResponseAcsEntrance
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntrancesGetResponseAcsEntrance) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesGetResponseAcsEntranceVisionlineMetadata struct {
	DoorName     string                                                           `json:"door_name" url:"door_name"`
	DoorCategory EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory    `json:"door_category,omitempty" url:"door_category,omitempty"`
	Profiles     []*EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem `json:"profiles,omitempty" url:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesGetResponseAcsEntranceVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesGetResponseAcsEntranceVisionlineMetadata(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadata) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory string

const (
	EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryEntrance       EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory = "entrance"
	EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryGuest          EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory = "guest"
	EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryElevatorReader EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory = "elevator reader"
	EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryCommon         EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory = "common"
	EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryCommonPms      EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory = "common (PMS)"
)

func NewEntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryFromString(s string) (EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory, error) {
	switch s {
	case "entrance":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryEntrance, nil
	case "guest":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryGuest, nil
	case "elevator reader":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryElevatorReader, nil
	case "common":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryCommon, nil
	case "common (PMS)":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategoryCommonPms, nil
	}
	var t EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory) Ptr() *EntrancesGetResponseAcsEntranceVisionlineMetadataDoorCategory {
	return &e
}

type EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                                                 `json:"visionline_door_profile_id" url:"visionline_door_profile_id"`
	VisionlineDoorProfileType EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty" url:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewEntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *EntrancesGetResponseAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &e
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItem struct {
	AcsCredentialId            string                                                                          `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                  *string                                                                         `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId        *string                                                                         `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                string                                                                          `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId      *string                                                                         `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                string                                                                          `json:"display_name" url:"display_name"`
	Code                       *string                                                                         `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod               EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType               *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    *string                                                                         `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                  time.Time                                                                       `json:"created_at" url:"created_at"`
	WorkspaceId                string                                                                          `json:"workspace_id" url:"workspace_id"`
	StartsAt                   *string                                                                         `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *string                                                                         `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                     []*EntrancesListCredentialsWithAccessResponseAcsCredentialsItemErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                   []*EntrancesListCredentialsWithAccessResponseAcsCredentialsItemWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential *bool                                                                           `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	VisionlineMetadata         *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItem) UnmarshalJSON(data []byte) error {
	type embed EntrancesListCredentialsWithAccessResponseAcsCredentialsItem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntrancesListCredentialsWithAccessResponseAcsCredentialsItem(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItem) MarshalJSON() ([]byte, error) {
	type embed EntrancesListCredentialsWithAccessResponseAcsCredentialsItem
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod string

const (
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCode      EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod = "code"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCard      EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod = "card"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodMobileKey EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod = "mobile_key"
)

func NewEntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodFromString(s string) (EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod, error) {
	switch s {
	case "code":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCode, nil
	case "card":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodCard, nil
	case "mobile_key":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethodMobileKey, nil
	}
	var t EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod) Ptr() *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemAccessMethod {
	return &e
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListCredentialsWithAccessResponseAcsCredentialsItemErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListCredentialsWithAccessResponseAcsCredentialsItemErrorsItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemErrorsItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType string

const (
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypePtiCard         EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "pti_card"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeBrivoCredential EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "brivo_credential"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeHidCredential   EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "hid_credential"
	EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeVisionlineCard  EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType = "visionline_card"
)

func NewEntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeFromString(s string) (EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType, error) {
	switch s {
	case "pti_card":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypePtiCard, nil
	case "brivo_credential":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeBrivoCredential, nil
	case "hid_credential":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeHidCredential, nil
	case "visionline_card":
		return EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalTypeVisionlineCard, nil
	}
	var t EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType) Ptr() *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemExternalType {
	return &e
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemVisionlineMetadata struct {
	JoinerAcsCredentialIds []string `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListCredentialsWithAccessResponseAcsCredentialsItemVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListCredentialsWithAccessResponseAcsCredentialsItemVisionlineMetadata(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemVisionlineMetadata) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListCredentialsWithAccessResponseAcsCredentialsItemWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListCredentialsWithAccessResponseAcsCredentialsItemWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListCredentialsWithAccessResponseAcsCredentialsItemWarningsItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListCredentialsWithAccessResponseAcsCredentialsItemWarningsItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItem struct {
	AcsEntranceId      string                                                   `json:"acs_entrance_id" url:"acs_entrance_id"`
	DisplayName        string                                                   `json:"display_name" url:"display_name"`
	AcsSystemId        string                                                   `json:"acs_system_id" url:"acs_system_id"`
	CreatedAt          time.Time                                                `json:"created_at" url:"created_at"`
	VisionlineMetadata *EntrancesListResponseAcsEntrancesItemVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListResponseAcsEntrancesItem) UnmarshalJSON(data []byte) error {
	type embed EntrancesListResponseAcsEntrancesItem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntrancesListResponseAcsEntrancesItem(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListResponseAcsEntrancesItem) MarshalJSON() ([]byte, error) {
	type embed EntrancesListResponseAcsEntrancesItem
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntrancesListResponseAcsEntrancesItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadata struct {
	DoorName     string                                                                 `json:"door_name" url:"door_name"`
	DoorCategory EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory    `json:"door_category,omitempty" url:"door_category,omitempty"`
	Profiles     []*EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem `json:"profiles,omitempty" url:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListResponseAcsEntrancesItemVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListResponseAcsEntrancesItemVisionlineMetadata(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadata) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory string

const (
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryEntrance       EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "entrance"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryGuest          EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "guest"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryElevatorReader EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "elevator reader"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommon         EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "common"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommonPms      EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "common (PMS)"
)

func NewEntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryFromString(s string) (EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory, error) {
	switch s {
	case "entrance":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryEntrance, nil
	case "guest":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryGuest, nil
	case "elevator reader":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryElevatorReader, nil
	case "common":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommon, nil
	case "common (PMS)":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommonPms, nil
	}
	var t EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory) Ptr() *EntrancesListResponseAcsEntrancesItemVisionlineMetadataDoorCategory {
	return &e
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                                                       `json:"visionline_door_profile_id" url:"visionline_door_profile_id"`
	VisionlineDoorProfileType EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty" url:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItem) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewEntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *EntrancesListResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &e
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItem struct {
	AcsEntranceId      string                                                                  `json:"acs_entrance_id" url:"acs_entrance_id"`
	DisplayName        string                                                                  `json:"display_name" url:"display_name"`
	AcsSystemId        string                                                                  `json:"acs_system_id" url:"acs_system_id"`
	CreatedAt          time.Time                                                               `json:"created_at" url:"created_at"`
	VisionlineMetadata *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItem) UnmarshalJSON(data []byte) error {
	type embed UsersListAccessibleEntrancesResponseAcsEntrancesItem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UsersListAccessibleEntrancesResponseAcsEntrancesItem(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItem) MarshalJSON() ([]byte, error) {
	type embed UsersListAccessibleEntrancesResponseAcsEntrancesItem
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*u),
		CreatedAt: core.NewDateTime(u.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata struct {
	DoorName     string                                                                                `json:"door_name" url:"door_name"`
	DoorCategory UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory    `json:"door_category,omitempty" url:"door_category,omitempty"`
	Profiles     []*UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem `json:"profiles,omitempty" url:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadata) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory string

const (
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryEntrance       UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "entrance"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryGuest          UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "guest"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryElevatorReader UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "elevator reader"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommon         UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "common"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommonPms      UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory = "common (PMS)"
)

func NewUsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryFromString(s string) (UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory, error) {
	switch s {
	case "entrance":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryEntrance, nil
	case "guest":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryGuest, nil
	case "elevator reader":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryElevatorReader, nil
	case "common":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommon, nil
	case "common (PMS)":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategoryCommonPms, nil
	}
	var t UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory) Ptr() *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataDoorCategory {
	return &u
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                                                                      `json:"visionline_door_profile_id" url:"visionline_door_profile_id"`
	VisionlineDoorProfileType UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty" url:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewUsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *UsersListAccessibleEntrancesResponseAcsEntrancesItemVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &u
}

// This file was auto-generated by Fern from our API Definition.

package acs

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type CredentialsAssignRequest struct {
	AcsUserId       string `json:"acs_user_id" url:"acs_user_id"`
	AcsCredentialId string `json:"acs_credential_id" url:"acs_credential_id"`
}

type CredentialsCreateRequest struct {
	AcsUserId                  string                                      `json:"acs_user_id" url:"acs_user_id"`
	AccessMethod               CredentialsCreateRequestAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	Code                       *string                                     `json:"code,omitempty" url:"code,omitempty"`
	IsMultiPhoneSyncCredential *bool                                       `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	ExternalType               *string                                     `json:"external_type,omitempty" url:"external_type,omitempty"`
	VisionlineMetadata         *CredentialsCreateRequestVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`
	StartsAt                   *time.Time                                  `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                     *time.Time                                  `json:"ends_at,omitempty" url:"ends_at,omitempty"`
}

func (c *CredentialsCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CredentialsCreateRequest(body)
	return nil
}

func (c *CredentialsCreateRequest) MarshalJSON() ([]byte, error) {
	type embed CredentialsCreateRequest
	var marshaler = struct {
		embed
		StartsAt *core.DateTime `json:"starts_at,omitempty"`
		EndsAt   *core.DateTime `json:"ends_at,omitempty"`
	}{
		embed:    embed(*c),
		StartsAt: core.NewOptionalDateTime(c.StartsAt),
		EndsAt:   core.NewOptionalDateTime(c.EndsAt),
	}
	return json.Marshal(marshaler)
}

type CredentialsDeleteRequest struct {
	AcsCredentialId string `json:"acs_credential_id" url:"acs_credential_id"`
}

type CredentialsGetRequest struct {
	AcsCredentialId string `json:"acs_credential_id" url:"acs_credential_id"`
}

type CredentialsListRequest struct {
	IsMultiPhoneSyncCredential *bool `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
}

type CredentialsAssignResponse struct {
	AcsCredential *CredentialsAssignResponseAcsCredential `json:"acs_credential,omitempty" url:"acs_credential,omitempty"`
	Ok            bool                                    `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsAssignResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsAssignResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsAssignResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsAssignResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateRequestAccessMethod string

const (
	CredentialsCreateRequestAccessMethodCode      CredentialsCreateRequestAccessMethod = "code"
	CredentialsCreateRequestAccessMethodCard      CredentialsCreateRequestAccessMethod = "card"
	CredentialsCreateRequestAccessMethodMobileKey CredentialsCreateRequestAccessMethod = "mobile_key"
)

func NewCredentialsCreateRequestAccessMethodFromString(s string) (CredentialsCreateRequestAccessMethod, error) {
	switch s {
	case "code":
		return CredentialsCreateRequestAccessMethodCode, nil
	case "card":
		return CredentialsCreateRequestAccessMethodCard, nil
	case "mobile_key":
		return CredentialsCreateRequestAccessMethodMobileKey, nil
	}
	var t CredentialsCreateRequestAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CredentialsCreateRequestAccessMethod) Ptr() *CredentialsCreateRequestAccessMethod {
	return &c
}

type CredentialsCreateRequestVisionlineMetadata struct {
	AssaAbloyCredentialServiceMobileEndpointId *string                                               `json:"assa_abloy_credential_service_mobile_endpoint_id,omitempty" url:"assa_abloy_credential_service_mobile_endpoint_id,omitempty"`
	CardFormat                                 *CredentialsCreateRequestVisionlineMetadataCardFormat `json:"card_format,omitempty" url:"card_format,omitempty"`
	IsOverrideKey                              *bool                                                 `json:"is_override_key,omitempty" url:"is_override_key,omitempty"`
	JoinerAcsCredentialIds                     []string                                              `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateRequestVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateRequestVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsCreateRequestVisionlineMetadata(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateRequestVisionlineMetadata) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsCreateResponse struct {
	AcsCredential *CredentialsCreateResponseAcsCredential `json:"acs_credential,omitempty" url:"acs_credential,omitempty"`
	Ok            bool                                    `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsCreateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsCreateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsDeleteResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsDeleteResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsDeleteResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsGetResponse struct {
	AcsCredential *CredentialsGetResponseAcsCredential `json:"acs_credential,omitempty" url:"acs_credential,omitempty"`
	Ok            bool                                 `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsGetResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsGetResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsListResponse struct {
	AcsCredentials []*CredentialsListResponseAcsCredentialsItem `json:"acs_credentials,omitempty" url:"acs_credentials,omitempty"`
	Ok             bool                                         `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsListResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsListResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignResponse struct {
	AcsCredential *CredentialsUnassignResponseAcsCredential `json:"acs_credential,omitempty" url:"acs_credential,omitempty"`
	Ok            bool                                      `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUnassignResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUnassignResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUnassignResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUnassignResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUpdateResponse struct {
	AcsCredential *CredentialsUpdateResponseAcsCredential `json:"acs_credential,omitempty" url:"acs_credential,omitempty"`
	Ok            bool                                    `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *CredentialsUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CredentialsUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CredentialsUpdateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CredentialsUpdateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CredentialsUnassignRequest struct {
	AcsUserId       string `json:"acs_user_id" url:"acs_user_id"`
	AcsCredentialId string `json:"acs_credential_id" url:"acs_credential_id"`
}

type CredentialsUpdateRequest struct {
	AcsCredentialId string `json:"acs_credential_id" url:"acs_credential_id"`
	Code            string `json:"code" url:"code"`
}

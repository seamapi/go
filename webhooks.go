// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
)

type WebhooksCreateRequest struct {
	Url        string   `json:"url" url:"url"`
	EventTypes []string `json:"event_types,omitempty" url:"event_types,omitempty"`
}

type WebhooksDeleteRequest struct {
	WebhookId string `json:"webhook_id" url:"webhook_id"`
}

type WebhooksGetRequest struct {
	WebhookId string `json:"webhook_id" url:"webhook_id"`
}

type WebhooksCreateResponse struct {
	Webhook *Webhook `json:"webhook,omitempty" url:"webhook,omitempty"`
	Ok      bool     `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WebhooksCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhooksCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhooksCreateResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksCreateResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksDeleteResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WebhooksDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhooksDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhooksDeleteResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksDeleteResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksGetResponse struct {
	Webhook *Webhook `json:"webhook,omitempty" url:"webhook,omitempty"`
	Ok      bool     `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WebhooksGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhooksGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhooksGetResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksGetResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksListResponse struct {
	Webhooks []*Webhook `json:"webhooks,omitempty" url:"webhooks,omitempty"`
	Ok       bool       `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WebhooksListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhooksListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhooksListResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksListResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksUpdateResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WebhooksUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhooksUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhooksUpdateResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhooksUpdateResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhooksUpdateRequest struct {
	WebhookId  string   `json:"webhook_id" url:"webhook_id"`
	EventTypes []string `json:"event_types,omitempty" url:"event_types,omitempty"`
}

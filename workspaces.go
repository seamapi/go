// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
)

type WorkspacesCreateRequest struct {
	Name string `json:"name" url:"name"`
	// The name shown inside the connect webview
	ConnectPartnerName        string            `json:"connect_partner_name" url:"connect_partner_name"`
	IsSandbox                 *bool             `json:"is_sandbox,omitempty" url:"is_sandbox,omitempty"`
	WebviewPrimaryButtonColor *string           `json:"webview_primary_button_color,omitempty" url:"webview_primary_button_color,omitempty"`
	WebviewLogoShape          *WebviewLogoShape `json:"webview_logo_shape,omitempty" url:"webview_logo_shape,omitempty"`
}

type WorkspacesCreateResponse struct {
	Workspace *Workspace `json:"workspace,omitempty" url:"workspace,omitempty"`
	Ok        bool       `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WorkspacesCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkspacesCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkspacesCreateResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkspacesCreateResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkspacesGetResponse struct {
	Workspace *Workspace `json:"workspace,omitempty" url:"workspace,omitempty"`
	Ok        bool       `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WorkspacesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkspacesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkspacesGetResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkspacesGetResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkspacesListResponse struct {
	Workspaces []*Workspace `json:"workspaces,omitempty" url:"workspaces,omitempty"`
	Ok         bool         `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WorkspacesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkspacesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkspacesListResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkspacesListResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkspacesResetSandboxResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (w *WorkspacesResetSandboxResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkspacesResetSandboxResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkspacesResetSandboxResponse(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkspacesResetSandboxResponse) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebviewLogoShape string

const (
	WebviewLogoShapeCircle WebviewLogoShape = "circle"
	WebviewLogoShapeSquare WebviewLogoShape = "square"
)

func NewWebviewLogoShapeFromString(s string) (WebviewLogoShape, error) {
	switch s {
	case "circle":
		return WebviewLogoShapeCircle, nil
	case "square":
		return WebviewLogoShapeSquare, nil
	}
	var t WebviewLogoShape
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebviewLogoShape) Ptr() *WebviewLogoShape {
	return &w
}

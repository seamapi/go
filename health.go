// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
)

type HealthGetServiceHealthRequest struct {
	Service string `json:"service" url:"service"`
}

type HealthGetHealthResponse struct {
	Ok                      bool             `json:"ok" url:"ok"`
	LastServiceEvaluationAt *string          `json:"last_service_evaluation_at,omitempty" url:"last_service_evaluation_at,omitempty"`
	ServiceHealthStatuses   []*ServiceHealth `json:"service_health_statuses,omitempty" url:"service_health_statuses,omitempty"`
	msg                     string

	_rawJSON json.RawMessage
}

func (h *HealthGetHealthResponse) Msg() string {
	return h.msg
}

func (h *HealthGetHealthResponse) UnmarshalJSON(data []byte) error {
	type embed HealthGetHealthResponse
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*h),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*h = HealthGetHealthResponse(unmarshaler.embed)
	h.msg = "I’m one with the Force. The Force is with me."
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HealthGetHealthResponse) MarshalJSON() ([]byte, error) {
	type embed HealthGetHealthResponse
	var marshaler = struct {
		embed
		Msg string `json:"msg"`
	}{
		embed: embed(*h),
		Msg:   "I’m one with the Force. The Force is with me.",
	}
	return json.Marshal(marshaler)
}

func (h *HealthGetHealthResponse) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HealthGetServiceHealthResponse struct {
	Ok                      bool           `json:"ok" url:"ok"`
	LastServiceEvaluationAt string         `json:"last_service_evaluation_at" url:"last_service_evaluation_at"`
	ServiceHealth           *ServiceHealth `json:"service_health,omitempty" url:"service_health,omitempty"`

	_rawJSON json.RawMessage
}

func (h *HealthGetServiceHealthResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler HealthGetServiceHealthResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HealthGetServiceHealthResponse(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HealthGetServiceHealthResponse) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
)

type ConnectedAccountsDeleteRequest struct {
	ConnectedAccountId string `json:"connected_account_id" url:"connected_account_id"`
	Sync               *bool  `json:"sync,omitempty" url:"sync,omitempty"`
}

type ConnectedAccountsListRequest struct {
	// Returns devices where the account's custom_metadata contains all of the provided key/value pairs.
	CustomMetadataHas map[string]*ConnectedAccountsListRequestCustomMetadataHasValue `json:"custom_metadata_has,omitempty" url:"custom_metadata_has,omitempty"`
}

type ConnectedAccountsDeleteResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsDeleteResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsDeleteResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountsGetRequest struct {
	typeName                                      string
	ConnectedAccountsGetRequestConnectedAccountId *ConnectedAccountsGetRequestConnectedAccountId
	ConnectedAccountsGetRequestEmail              *ConnectedAccountsGetRequestEmail
}

func NewConnectedAccountsGetRequestFromConnectedAccountsGetRequestConnectedAccountId(value *ConnectedAccountsGetRequestConnectedAccountId) *ConnectedAccountsGetRequest {
	return &ConnectedAccountsGetRequest{typeName: "connectedAccountsGetRequestConnectedAccountId", ConnectedAccountsGetRequestConnectedAccountId: value}
}

func NewConnectedAccountsGetRequestFromConnectedAccountsGetRequestEmail(value *ConnectedAccountsGetRequestEmail) *ConnectedAccountsGetRequest {
	return &ConnectedAccountsGetRequest{typeName: "connectedAccountsGetRequestEmail", ConnectedAccountsGetRequestEmail: value}
}

func (c *ConnectedAccountsGetRequest) UnmarshalJSON(data []byte) error {
	valueConnectedAccountsGetRequestConnectedAccountId := new(ConnectedAccountsGetRequestConnectedAccountId)
	if err := json.Unmarshal(data, &valueConnectedAccountsGetRequestConnectedAccountId); err == nil {
		c.typeName = "connectedAccountsGetRequestConnectedAccountId"
		c.ConnectedAccountsGetRequestConnectedAccountId = valueConnectedAccountsGetRequestConnectedAccountId
		return nil
	}
	valueConnectedAccountsGetRequestEmail := new(ConnectedAccountsGetRequestEmail)
	if err := json.Unmarshal(data, &valueConnectedAccountsGetRequestEmail); err == nil {
		c.typeName = "connectedAccountsGetRequestEmail"
		c.ConnectedAccountsGetRequestEmail = valueConnectedAccountsGetRequestEmail
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountsGetRequest) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "connectedAccountsGetRequestConnectedAccountId":
		return json.Marshal(c.ConnectedAccountsGetRequestConnectedAccountId)
	case "connectedAccountsGetRequestEmail":
		return json.Marshal(c.ConnectedAccountsGetRequestEmail)
	}
}

type ConnectedAccountsGetRequestVisitor interface {
	VisitConnectedAccountsGetRequestConnectedAccountId(*ConnectedAccountsGetRequestConnectedAccountId) error
	VisitConnectedAccountsGetRequestEmail(*ConnectedAccountsGetRequestEmail) error
}

func (c *ConnectedAccountsGetRequest) Accept(visitor ConnectedAccountsGetRequestVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "connectedAccountsGetRequestConnectedAccountId":
		return visitor.VisitConnectedAccountsGetRequestConnectedAccountId(c.ConnectedAccountsGetRequestConnectedAccountId)
	case "connectedAccountsGetRequestEmail":
		return visitor.VisitConnectedAccountsGetRequestEmail(c.ConnectedAccountsGetRequestEmail)
	}
}

type ConnectedAccountsGetResponse struct {
	ConnectedAccount *ConnectedAccount `json:"connected_account,omitempty" url:"connected_account,omitempty"`
	Ok               bool              `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsGetResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsGetResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountsListRequestCustomMetadataHasValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewConnectedAccountsListRequestCustomMetadataHasValueFromString(value string) *ConnectedAccountsListRequestCustomMetadataHasValue {
	return &ConnectedAccountsListRequestCustomMetadataHasValue{typeName: "string", String: value}
}

func NewConnectedAccountsListRequestCustomMetadataHasValueFromBoolean(value bool) *ConnectedAccountsListRequestCustomMetadataHasValue {
	return &ConnectedAccountsListRequestCustomMetadataHasValue{typeName: "boolean", Boolean: value}
}

func (c *ConnectedAccountsListRequestCustomMetadataHasValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountsListRequestCustomMetadataHasValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "boolean":
		return json.Marshal(c.Boolean)
	}
}

type ConnectedAccountsListRequestCustomMetadataHasValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (c *ConnectedAccountsListRequestCustomMetadataHasValue) Accept(visitor ConnectedAccountsListRequestCustomMetadataHasValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	}
}

type ConnectedAccountsListResponse struct {
	ConnectedAccounts []*ConnectedAccount `json:"connected_accounts,omitempty" url:"connected_accounts,omitempty"`
	Ok                bool                `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsListResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsListResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountsUpdateRequestCustomMetadataValue struct {
	typeName       string
	String         string
	Boolean        bool
	StringOptional *string
}

func NewConnectedAccountsUpdateRequestCustomMetadataValueFromString(value string) *ConnectedAccountsUpdateRequestCustomMetadataValue {
	return &ConnectedAccountsUpdateRequestCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectedAccountsUpdateRequestCustomMetadataValueFromBoolean(value bool) *ConnectedAccountsUpdateRequestCustomMetadataValue {
	return &ConnectedAccountsUpdateRequestCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func NewConnectedAccountsUpdateRequestCustomMetadataValueFromStringOptional(value *string) *ConnectedAccountsUpdateRequestCustomMetadataValue {
	return &ConnectedAccountsUpdateRequestCustomMetadataValue{typeName: "stringOptional", StringOptional: value}
}

func (c *ConnectedAccountsUpdateRequestCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		c.typeName = "stringOptional"
		c.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountsUpdateRequestCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "boolean":
		return json.Marshal(c.Boolean)
	case "stringOptional":
		return json.Marshal(c.StringOptional)
	}
}

type ConnectedAccountsUpdateRequestCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
	VisitStringOptional(*string) error
}

func (c *ConnectedAccountsUpdateRequestCustomMetadataValue) Accept(visitor ConnectedAccountsUpdateRequestCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	case "stringOptional":
		return visitor.VisitStringOptional(c.StringOptional)
	}
}

type ConnectedAccountsUpdateResponse struct {
	ConnectedAccount *ConnectedAccount `json:"connected_account,omitempty" url:"connected_account,omitempty"`
	Ok               bool              `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsUpdateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsUpdateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountsUpdateRequest struct {
	ConnectedAccountId            string                                                        `json:"connected_account_id" url:"connected_account_id"`
	AutomaticallyManageNewDevices *bool                                                         `json:"automatically_manage_new_devices,omitempty" url:"automatically_manage_new_devices,omitempty"`
	CustomMetadata                map[string]*ConnectedAccountsUpdateRequestCustomMetadataValue `json:"custom_metadata,omitempty" url:"custom_metadata,omitempty"`
}

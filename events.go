// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type EventsGetRequest struct {
	EventId   *string `json:"event_id,omitempty" url:"event_id,omitempty"`
	EventType *string `json:"event_type,omitempty" url:"event_type,omitempty"`
	DeviceId  *string `json:"device_id,omitempty" url:"device_id,omitempty"`
}

type EventsListRequest struct {
	Since              *string                         `json:"since,omitempty" url:"since,omitempty"`
	Between            []*EventsListRequestBetweenItem `json:"between,omitempty" url:"between,omitempty"`
	DeviceId           *string                         `json:"device_id,omitempty" url:"device_id,omitempty"`
	DeviceIds          []string                        `json:"device_ids,omitempty" url:"device_ids,omitempty"`
	AccessCodeId       *string                         `json:"access_code_id,omitempty" url:"access_code_id,omitempty"`
	AccessCodeIds      []string                        `json:"access_code_ids,omitempty" url:"access_code_ids,omitempty"`
	EventType          *EventType                      `json:"event_type,omitempty" url:"event_type,omitempty"`
	EventTypes         []EventType                     `json:"event_types,omitempty" url:"event_types,omitempty"`
	ConnectedAccountId *string                         `json:"connected_account_id,omitempty" url:"connected_account_id,omitempty"`
}

type EventsGetResponse struct {
	Event   *Event  `json:"event,omitempty" url:"event,omitempty"`
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	Ok      bool    `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (e *EventsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EventsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventsGetResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventsGetResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventsListRequestBetweenItem struct {
	typeName string
	String   string
	DateTime time.Time
}

func NewEventsListRequestBetweenItemFromString(value string) *EventsListRequestBetweenItem {
	return &EventsListRequestBetweenItem{typeName: "string", String: value}
}

func NewEventsListRequestBetweenItemFromDateTime(value time.Time) *EventsListRequestBetweenItem {
	return &EventsListRequestBetweenItem{typeName: "dateTime", DateTime: value}
}

func (e *EventsListRequestBetweenItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	var valueDateTime *core.DateTime
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		e.typeName = "dateTime"
		e.DateTime = valueDateTime.Time()
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventsListRequestBetweenItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "dateTime":
		return json.Marshal(core.NewDateTime(e.DateTime))
	}
}

type EventsListRequestBetweenItemVisitor interface {
	VisitString(string) error
	VisitDateTime(time.Time) error
}

func (e *EventsListRequestBetweenItem) Accept(visitor EventsListRequestBetweenItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "dateTime":
		return visitor.VisitDateTime(e.DateTime)
	}
}

type EventsListResponse struct {
	Events  []*Event `json:"events,omitempty" url:"events,omitempty"`
	Message *string  `json:"message,omitempty" url:"message,omitempty"`
	Ok      bool     `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (e *EventsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EventsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventsListResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventsListResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

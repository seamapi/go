// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type AccessCode struct {
	// Unique identifier for a group of access codes that share the same code.
	CommonCodeKey *string `json:"common_code_key,omitempty" url:"common_code_key,omitempty"`
	// Indicates whether the code is set on the device according to a preconfigured schedule.
	IsScheduledOnDevice *bool `json:"is_scheduled_on_device,omitempty" url:"is_scheduled_on_device,omitempty"`
	// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
	Type AccessCodeType `json:"type,omitempty" url:"type,omitempty"`
	// Indicates whether the access code is waiting for a code assignment.
	IsWaitingForCodeAssignment *bool `json:"is_waiting_for_code_assignment,omitempty" url:"is_waiting_for_code_assignment,omitempty"`
	// Unique identifier for the access code.
	AccessCodeId string `json:"access_code_id" url:"access_code_id"`
	// Unique identifier for the device associated with the access code.
	DeviceId string `json:"device_id" url:"device_id"`
	// Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Code used for access. Typically, a numeric or alphanumeric string.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// Date and time at which the access code was created.
	CreatedAt time.Time   `json:"created_at" url:"created_at"`
	Errors    interface{} `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings  interface{} `json:"warnings,omitempty" url:"warnings,omitempty"`
	// Indicates whether Seam manages the access code.
	IsManaged bool `json:"is_managed" url:"is_managed"`
	// Date and time at which the time-bound access code becomes active.
	StartsAt *time.Time `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	// Date and time after which the time-bound access code becomes inactive.
	EndsAt *time.Time `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	// Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
	Status AccessCodeStatus `json:"status,omitempty" url:"status,omitempty"`
	// Indicates whether a backup access code is available for use if the primary access code is lost or compromised.
	IsBackupAccessCodeAvailable bool `json:"is_backup_access_code_available" url:"is_backup_access_code_available"`
	// Indicates whether the access code is a backup code.
	IsBackup *bool `json:"is_backup,omitempty" url:"is_backup,omitempty"`
	// Identifier of the pulled backup access code. Used to associate the pulled backup access code with the original access code.
	PulledBackupAccessCodeId *string `json:"pulled_backup_access_code_id,omitempty" url:"pulled_backup_access_code_id,omitempty"`
	// Indicates whether changes to the access code from external sources are permitted.
	IsExternalModificationAllowed bool `json:"is_external_modification_allowed" url:"is_external_modification_allowed"`
	// Indicates whether the access code can only be used once. If "true," the code becomes invalid after the first use.
	IsOneTimeUse bool `json:"is_one_time_use" url:"is_one_time_use"`
	// Indicates whether the access code is intended for use in offline scenarios. If "true," this code can be created on a device without a network connection.
	IsOfflineAccessCode bool `json:"is_offline_access_code" url:"is_offline_access_code"`

	_rawJSON json.RawMessage
}

func (a *AccessCode) UnmarshalJSON(data []byte) error {
	type embed AccessCode
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		StartsAt  *core.DateTime `json:"starts_at,omitempty"`
		EndsAt    *core.DateTime `json:"ends_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AccessCode(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.StartsAt = unmarshaler.StartsAt.TimePtr()
	a.EndsAt = unmarshaler.EndsAt.TimePtr()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCode) MarshalJSON() ([]byte, error) {
	type embed AccessCode
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		StartsAt  *core.DateTime `json:"starts_at,omitempty"`
		EndsAt    *core.DateTime `json:"ends_at,omitempty"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
		StartsAt:  core.NewOptionalDateTime(a.StartsAt),
		EndsAt:    core.NewOptionalDateTime(a.EndsAt),
	}
	return json.Marshal(marshaler)
}

func (a *AccessCode) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Current status of the access code within the operational lifecycle. Values are "setting," a transitional phase that indicates that the code is being configured or activated; "set", which indicates that the code is active and operational; "unset," which indicates a deactivated or unused state, either before activation or after deliberate deactivation; "removing," which indicates a transitional period in which the code is being deleted or made inactive; and "unknown," which indicates an indeterminate state, due to reasons such as system errors or incomplete data, that highlights a potential need for system review or troubleshooting.
type AccessCodeStatus string

const (
	AccessCodeStatusSetting  AccessCodeStatus = "setting"
	AccessCodeStatusSet      AccessCodeStatus = "set"
	AccessCodeStatusUnset    AccessCodeStatus = "unset"
	AccessCodeStatusRemoving AccessCodeStatus = "removing"
	AccessCodeStatusUnknown  AccessCodeStatus = "unknown"
)

func NewAccessCodeStatusFromString(s string) (AccessCodeStatus, error) {
	switch s {
	case "setting":
		return AccessCodeStatusSetting, nil
	case "set":
		return AccessCodeStatusSet, nil
	case "unset":
		return AccessCodeStatusUnset, nil
	case "removing":
		return AccessCodeStatusRemoving, nil
	case "unknown":
		return AccessCodeStatusUnknown, nil
	}
	var t AccessCodeStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodeStatus) Ptr() *AccessCodeStatus {
	return &a
}

// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
type AccessCodeType string

const (
	AccessCodeTypeTimeBound AccessCodeType = "time_bound"
	AccessCodeTypeOngoing   AccessCodeType = "ongoing"
)

func NewAccessCodeTypeFromString(s string) (AccessCodeType, error) {
	switch s {
	case "time_bound":
		return AccessCodeTypeTimeBound, nil
	case "ongoing":
		return AccessCodeTypeOngoing, nil
	}
	var t AccessCodeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodeType) Ptr() *AccessCodeType {
	return &a
}

type AcsAccessGroup struct {
	AcsAccessGroupId string `json:"acs_access_group_id" url:"acs_access_group_id"`
	AcsSystemId      string `json:"acs_system_id" url:"acs_system_id"`
	WorkspaceId      string `json:"workspace_id" url:"workspace_id"`
	Name             string `json:"name" url:"name"`
	// ---
	// deprecated: use external_type
	// ---
	AccessGroupType AcsAccessGroupAccessGroupType `json:"access_group_type,omitempty" url:"access_group_type,omitempty"`
	// ---
	// deprecated: use external_type_display_name
	// ---
	AccessGroupTypeDisplayName string                     `json:"access_group_type_display_name" url:"access_group_type_display_name"`
	DisplayName                string                     `json:"display_name" url:"display_name"`
	ExternalType               AcsAccessGroupExternalType `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName    string                     `json:"external_type_display_name" url:"external_type_display_name"`
	CreatedAt                  time.Time                  `json:"created_at" url:"created_at"`

	_rawJSON json.RawMessage
}

func (a *AcsAccessGroup) UnmarshalJSON(data []byte) error {
	type embed AcsAccessGroup
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsAccessGroup(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsAccessGroup) MarshalJSON() ([]byte, error) {
	type embed AcsAccessGroup
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsAccessGroup) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// ---
// deprecated: use external_type
// ---
type AcsAccessGroupAccessGroupType string

const (
	AcsAccessGroupAccessGroupTypePtiUnit          AcsAccessGroupAccessGroupType = "pti_unit"
	AcsAccessGroupAccessGroupTypePtiAccessLevel   AcsAccessGroupAccessGroupType = "pti_access_level"
	AcsAccessGroupAccessGroupTypeSaltoAccessGroup AcsAccessGroupAccessGroupType = "salto_access_group"
	AcsAccessGroupAccessGroupTypeBrivoGroup       AcsAccessGroupAccessGroupType = "brivo_group"
)

func NewAcsAccessGroupAccessGroupTypeFromString(s string) (AcsAccessGroupAccessGroupType, error) {
	switch s {
	case "pti_unit":
		return AcsAccessGroupAccessGroupTypePtiUnit, nil
	case "pti_access_level":
		return AcsAccessGroupAccessGroupTypePtiAccessLevel, nil
	case "salto_access_group":
		return AcsAccessGroupAccessGroupTypeSaltoAccessGroup, nil
	case "brivo_group":
		return AcsAccessGroupAccessGroupTypeBrivoGroup, nil
	}
	var t AcsAccessGroupAccessGroupType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsAccessGroupAccessGroupType) Ptr() *AcsAccessGroupAccessGroupType {
	return &a
}

type AcsAccessGroupExternalType string

const (
	AcsAccessGroupExternalTypePtiUnit          AcsAccessGroupExternalType = "pti_unit"
	AcsAccessGroupExternalTypePtiAccessLevel   AcsAccessGroupExternalType = "pti_access_level"
	AcsAccessGroupExternalTypeSaltoAccessGroup AcsAccessGroupExternalType = "salto_access_group"
	AcsAccessGroupExternalTypeBrivoGroup       AcsAccessGroupExternalType = "brivo_group"
)

func NewAcsAccessGroupExternalTypeFromString(s string) (AcsAccessGroupExternalType, error) {
	switch s {
	case "pti_unit":
		return AcsAccessGroupExternalTypePtiUnit, nil
	case "pti_access_level":
		return AcsAccessGroupExternalTypePtiAccessLevel, nil
	case "salto_access_group":
		return AcsAccessGroupExternalTypeSaltoAccessGroup, nil
	case "brivo_group":
		return AcsAccessGroupExternalTypeBrivoGroup, nil
	}
	var t AcsAccessGroupExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsAccessGroupExternalType) Ptr() *AcsAccessGroupExternalType {
	return &a
}

type AcsCredential struct {
	AcsCredentialId                        string                           `json:"acs_credential_id" url:"acs_credential_id"`
	AcsUserId                              *string                          `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsCredentialPoolId                    *string                          `json:"acs_credential_pool_id,omitempty" url:"acs_credential_pool_id,omitempty"`
	AcsSystemId                            string                           `json:"acs_system_id" url:"acs_system_id"`
	ParentAcsCredentialId                  *string                          `json:"parent_acs_credential_id,omitempty" url:"parent_acs_credential_id,omitempty"`
	DisplayName                            string                           `json:"display_name" url:"display_name"`
	Code                                   *string                          `json:"code,omitempty" url:"code,omitempty"`
	AccessMethod                           AcsCredentialAccessMethod        `json:"access_method,omitempty" url:"access_method,omitempty"`
	ExternalType                           *AcsCredentialExternalType       `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName                *string                          `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	CreatedAt                              time.Time                        `json:"created_at" url:"created_at"`
	WorkspaceId                            string                           `json:"workspace_id" url:"workspace_id"`
	StartsAt                               *string                          `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                                 *string                          `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Errors                                 []*AcsCredentialErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                               []*AcsCredentialWarningsItem     `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsMultiPhoneSyncCredential             *bool                            `json:"is_multi_phone_sync_credential,omitempty" url:"is_multi_phone_sync_credential,omitempty"`
	IsLatestDesiredStateSyncedWithProvider *bool                            `json:"is_latest_desired_state_synced_with_provider,omitempty" url:"is_latest_desired_state_synced_with_provider,omitempty"`
	LatestDesiredStateSyncedWithProviderAt *time.Time                       `json:"latest_desired_state_synced_with_provider_at,omitempty" url:"latest_desired_state_synced_with_provider_at,omitempty"`
	VisionlineMetadata                     *AcsCredentialVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsCredential) UnmarshalJSON(data []byte) error {
	type embed AcsCredential
	var unmarshaler = struct {
		embed
		CreatedAt                              *core.DateTime `json:"created_at"`
		LatestDesiredStateSyncedWithProviderAt *core.DateTime `json:"latest_desired_state_synced_with_provider_at,omitempty"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsCredential(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.LatestDesiredStateSyncedWithProviderAt = unmarshaler.LatestDesiredStateSyncedWithProviderAt.TimePtr()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsCredential) MarshalJSON() ([]byte, error) {
	type embed AcsCredential
	var marshaler = struct {
		embed
		CreatedAt                              *core.DateTime `json:"created_at"`
		LatestDesiredStateSyncedWithProviderAt *core.DateTime `json:"latest_desired_state_synced_with_provider_at,omitempty"`
	}{
		embed:                                  embed(*a),
		CreatedAt:                              core.NewDateTime(a.CreatedAt),
		LatestDesiredStateSyncedWithProviderAt: core.NewOptionalDateTime(a.LatestDesiredStateSyncedWithProviderAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsCredential) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsCredentialAccessMethod string

const (
	AcsCredentialAccessMethodCode      AcsCredentialAccessMethod = "code"
	AcsCredentialAccessMethodCard      AcsCredentialAccessMethod = "card"
	AcsCredentialAccessMethodMobileKey AcsCredentialAccessMethod = "mobile_key"
)

func NewAcsCredentialAccessMethodFromString(s string) (AcsCredentialAccessMethod, error) {
	switch s {
	case "code":
		return AcsCredentialAccessMethodCode, nil
	case "card":
		return AcsCredentialAccessMethodCard, nil
	case "mobile_key":
		return AcsCredentialAccessMethodMobileKey, nil
	}
	var t AcsCredentialAccessMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsCredentialAccessMethod) Ptr() *AcsCredentialAccessMethod {
	return &a
}

type AcsCredentialErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *AcsCredentialErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsCredentialErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsCredentialErrorsItem(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsCredentialErrorsItem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsCredentialExternalType string

const (
	AcsCredentialExternalTypePtiCard         AcsCredentialExternalType = "pti_card"
	AcsCredentialExternalTypeBrivoCredential AcsCredentialExternalType = "brivo_credential"
	AcsCredentialExternalTypeHidCredential   AcsCredentialExternalType = "hid_credential"
	AcsCredentialExternalTypeVisionlineCard  AcsCredentialExternalType = "visionline_card"
)

func NewAcsCredentialExternalTypeFromString(s string) (AcsCredentialExternalType, error) {
	switch s {
	case "pti_card":
		return AcsCredentialExternalTypePtiCard, nil
	case "brivo_credential":
		return AcsCredentialExternalTypeBrivoCredential, nil
	case "hid_credential":
		return AcsCredentialExternalTypeHidCredential, nil
	case "visionline_card":
		return AcsCredentialExternalTypeVisionlineCard, nil
	}
	var t AcsCredentialExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsCredentialExternalType) Ptr() *AcsCredentialExternalType {
	return &a
}

type AcsCredentialPool struct {
	AcsCredentialPoolId     string    `json:"acs_credential_pool_id" url:"acs_credential_pool_id"`
	AcsSystemId             string    `json:"acs_system_id" url:"acs_system_id"`
	DisplayName             string    `json:"display_name" url:"display_name"`
	ExternalTypeDisplayName string    `json:"external_type_display_name" url:"external_type_display_name"`
	CreatedAt               time.Time `json:"created_at" url:"created_at"`
	WorkspaceId             string    `json:"workspace_id" url:"workspace_id"`
	externalType            string

	_rawJSON json.RawMessage
}

func (a *AcsCredentialPool) ExternalType() string {
	return a.externalType
}

func (a *AcsCredentialPool) UnmarshalJSON(data []byte) error {
	type embed AcsCredentialPool
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsCredentialPool(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.externalType = "hid_part_number"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsCredentialPool) MarshalJSON() ([]byte, error) {
	type embed AcsCredentialPool
	var marshaler = struct {
		embed
		CreatedAt    *core.DateTime `json:"created_at"`
		ExternalType string         `json:"external_type"`
	}{
		embed:        embed(*a),
		CreatedAt:    core.NewDateTime(a.CreatedAt),
		ExternalType: "hid_part_number",
	}
	return json.Marshal(marshaler)
}

func (a *AcsCredentialPool) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsCredentialProvisioningAutomation struct {
	AcsCredentialProvisioningAutomationId string    `json:"acs_credential_provisioning_automation_id" url:"acs_credential_provisioning_automation_id"`
	CredentialManagerAcsSystemId          string    `json:"credential_manager_acs_system_id" url:"credential_manager_acs_system_id"`
	UserIdentityId                        string    `json:"user_identity_id" url:"user_identity_id"`
	CreatedAt                             time.Time `json:"created_at" url:"created_at"`
	WorkspaceId                           string    `json:"workspace_id" url:"workspace_id"`

	_rawJSON json.RawMessage
}

func (a *AcsCredentialProvisioningAutomation) UnmarshalJSON(data []byte) error {
	type embed AcsCredentialProvisioningAutomation
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsCredentialProvisioningAutomation(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsCredentialProvisioningAutomation) MarshalJSON() ([]byte, error) {
	type embed AcsCredentialProvisioningAutomation
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsCredentialProvisioningAutomation) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsCredentialVisionlineMetadata struct {
	CardFunctionType       AcsCredentialVisionlineMetadataCardFunctionType `json:"card_function_type,omitempty" url:"card_function_type,omitempty"`
	JoinerAcsCredentialIds []string                                        `json:"joiner_acs_credential_ids,omitempty" url:"joiner_acs_credential_ids,omitempty"`
	GuestAcsEntranceIds    []string                                        `json:"guest_acs_entrance_ids,omitempty" url:"guest_acs_entrance_ids,omitempty"`
	CommonAcsEntranceIds   []string                                        `json:"common_acs_entrance_ids,omitempty" url:"common_acs_entrance_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsCredentialVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsCredentialVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsCredentialVisionlineMetadata(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsCredentialVisionlineMetadata) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsCredentialVisionlineMetadataCardFunctionType string

const (
	AcsCredentialVisionlineMetadataCardFunctionTypeGuest AcsCredentialVisionlineMetadataCardFunctionType = "guest"
	AcsCredentialVisionlineMetadataCardFunctionTypeStaff AcsCredentialVisionlineMetadataCardFunctionType = "staff"
)

func NewAcsCredentialVisionlineMetadataCardFunctionTypeFromString(s string) (AcsCredentialVisionlineMetadataCardFunctionType, error) {
	switch s {
	case "guest":
		return AcsCredentialVisionlineMetadataCardFunctionTypeGuest, nil
	case "staff":
		return AcsCredentialVisionlineMetadataCardFunctionTypeStaff, nil
	}
	var t AcsCredentialVisionlineMetadataCardFunctionType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsCredentialVisionlineMetadataCardFunctionType) Ptr() *AcsCredentialVisionlineMetadataCardFunctionType {
	return &a
}

type AcsCredentialWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *AcsCredentialWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsCredentialWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsCredentialWarningsItem(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsCredentialWarningsItem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsEntrance struct {
	AcsSystemId        string                         `json:"acs_system_id" url:"acs_system_id"`
	AcsEntranceId      string                         `json:"acs_entrance_id" url:"acs_entrance_id"`
	CreatedAt          time.Time                      `json:"created_at" url:"created_at"`
	DisplayName        string                         `json:"display_name" url:"display_name"`
	Errors             []*AcsEntranceErrorsItem       `json:"errors,omitempty" url:"errors,omitempty"`
	LatchMetadata      *AcsEntranceLatchMetadata      `json:"latch_metadata,omitempty" url:"latch_metadata,omitempty"`
	VisionlineMetadata *AcsEntranceVisionlineMetadata `json:"visionline_metadata,omitempty" url:"visionline_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsEntrance) UnmarshalJSON(data []byte) error {
	type embed AcsEntrance
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsEntrance(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsEntrance) MarshalJSON() ([]byte, error) {
	type embed AcsEntrance
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsEntrance) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsEntranceErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *AcsEntranceErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsEntranceErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsEntranceErrorsItem(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsEntranceErrorsItem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsEntranceLatchMetadata struct {
	AccessibilityType string `json:"accessibility_type" url:"accessibility_type"`
	DoorName          string `json:"door_name" url:"door_name"`
	DoorType          string `json:"door_type" url:"door_type"`
	IsConnected       bool   `json:"is_connected" url:"is_connected"`

	_rawJSON json.RawMessage
}

func (a *AcsEntranceLatchMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsEntranceLatchMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsEntranceLatchMetadata(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsEntranceLatchMetadata) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsEntranceVisionlineMetadata struct {
	DoorName     string                                       `json:"door_name" url:"door_name"`
	DoorCategory AcsEntranceVisionlineMetadataDoorCategory    `json:"door_category,omitempty" url:"door_category,omitempty"`
	Profiles     []*AcsEntranceVisionlineMetadataProfilesItem `json:"profiles,omitempty" url:"profiles,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsEntranceVisionlineMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsEntranceVisionlineMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsEntranceVisionlineMetadata(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsEntranceVisionlineMetadata) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsEntranceVisionlineMetadataDoorCategory string

const (
	AcsEntranceVisionlineMetadataDoorCategoryEntrance       AcsEntranceVisionlineMetadataDoorCategory = "entrance"
	AcsEntranceVisionlineMetadataDoorCategoryGuest          AcsEntranceVisionlineMetadataDoorCategory = "guest"
	AcsEntranceVisionlineMetadataDoorCategoryElevatorReader AcsEntranceVisionlineMetadataDoorCategory = "elevator reader"
	AcsEntranceVisionlineMetadataDoorCategoryCommon         AcsEntranceVisionlineMetadataDoorCategory = "common"
	AcsEntranceVisionlineMetadataDoorCategoryCommonPms      AcsEntranceVisionlineMetadataDoorCategory = "common (PMS)"
)

func NewAcsEntranceVisionlineMetadataDoorCategoryFromString(s string) (AcsEntranceVisionlineMetadataDoorCategory, error) {
	switch s {
	case "entrance":
		return AcsEntranceVisionlineMetadataDoorCategoryEntrance, nil
	case "guest":
		return AcsEntranceVisionlineMetadataDoorCategoryGuest, nil
	case "elevator reader":
		return AcsEntranceVisionlineMetadataDoorCategoryElevatorReader, nil
	case "common":
		return AcsEntranceVisionlineMetadataDoorCategoryCommon, nil
	case "common (PMS)":
		return AcsEntranceVisionlineMetadataDoorCategoryCommonPms, nil
	}
	var t AcsEntranceVisionlineMetadataDoorCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsEntranceVisionlineMetadataDoorCategory) Ptr() *AcsEntranceVisionlineMetadataDoorCategory {
	return &a
}

type AcsEntranceVisionlineMetadataProfilesItem struct {
	VisionlineDoorProfileId   string                                                             `json:"visionline_door_profile_id" url:"visionline_door_profile_id"`
	VisionlineDoorProfileType AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType `json:"visionline_door_profile_type,omitempty" url:"visionline_door_profile_type,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsEntranceVisionlineMetadataProfilesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsEntranceVisionlineMetadataProfilesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsEntranceVisionlineMetadataProfilesItem(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsEntranceVisionlineMetadataProfilesItem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType string

const (
	AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle        AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "BLE"
	AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "commonDoor"
	AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch      AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType = "touch"
)

func NewAcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeFromString(s string) (AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType, error) {
	switch s {
	case "BLE":
		return AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeBle, nil
	case "commonDoor":
		return AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeCommonDoor, nil
	case "touch":
		return AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileTypeTouch, nil
	}
	var t AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType) Ptr() *AcsEntranceVisionlineMetadataProfilesItemVisionlineDoorProfileType {
	return &a
}

type AcsSystem struct {
	AcsSystemId             string                 `json:"acs_system_id" url:"acs_system_id"`
	ExternalType            *AcsSystemExternalType `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName *string                `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	// ---
	// deprecated: use external_type
	// ---
	SystemType *AcsSystemSystemType `json:"system_type,omitempty" url:"system_type,omitempty"`
	// ---
	// deprecated: use external_type_display_name
	// ---
	SystemTypeDisplayName                *string                  `json:"system_type_display_name,omitempty" url:"system_type_display_name,omitempty"`
	Name                                 string                   `json:"name" url:"name"`
	CreatedAt                            time.Time                `json:"created_at" url:"created_at"`
	WorkspaceId                          string                   `json:"workspace_id" url:"workspace_id"`
	ConnectedAccountIds                  []string                 `json:"connected_account_ids,omitempty" url:"connected_account_ids,omitempty"`
	ImageUrl                             string                   `json:"image_url" url:"image_url"`
	ImageAltText                         string                   `json:"image_alt_text" url:"image_alt_text"`
	Errors                               []*AcsSystemErrorsItem   `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                             []*AcsSystemWarningsItem `json:"warnings,omitempty" url:"warnings,omitempty"`
	CanAutomateEnrollment                *bool                    `json:"can_automate_enrollment,omitempty" url:"can_automate_enrollment,omitempty"`
	CanCreateAcsAccessGroups             *bool                    `json:"can_create_acs_access_groups,omitempty" url:"can_create_acs_access_groups,omitempty"`
	CanRemoveAcsUsersFromAcsAccessGroups *bool                    `json:"can_remove_acs_users_from_acs_access_groups,omitempty" url:"can_remove_acs_users_from_acs_access_groups,omitempty"`
	CanAddAcsUsersToAcsAccessGroups      *bool                    `json:"can_add_acs_users_to_acs_access_groups,omitempty" url:"can_add_acs_users_to_acs_access_groups,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsSystem) UnmarshalJSON(data []byte) error {
	type embed AcsSystem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsSystem(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsSystem) MarshalJSON() ([]byte, error) {
	type embed AcsSystem
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsSystem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsSystemErrorsItem struct {
	ErrorCode                     string
	SeamBridgeDisconnected        *AcsSystemErrorsItemSeamBridgeDisconnected
	VisionlineInstanceUnreachable *AcsSystemErrorsItemVisionlineInstanceUnreachable
}

func NewAcsSystemErrorsItemFromSeamBridgeDisconnected(value *AcsSystemErrorsItemSeamBridgeDisconnected) *AcsSystemErrorsItem {
	return &AcsSystemErrorsItem{ErrorCode: "seam_bridge_disconnected", SeamBridgeDisconnected: value}
}

func NewAcsSystemErrorsItemFromVisionlineInstanceUnreachable(value *AcsSystemErrorsItemVisionlineInstanceUnreachable) *AcsSystemErrorsItem {
	return &AcsSystemErrorsItem{ErrorCode: "visionline_instance_unreachable", VisionlineInstanceUnreachable: value}
}

func (a *AcsSystemErrorsItem) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		ErrorCode string `json:"error_code"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.ErrorCode = unmarshaler.ErrorCode
	switch unmarshaler.ErrorCode {
	case "seam_bridge_disconnected":
		value := new(AcsSystemErrorsItemSeamBridgeDisconnected)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.SeamBridgeDisconnected = value
	case "visionline_instance_unreachable":
		value := new(AcsSystemErrorsItemVisionlineInstanceUnreachable)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.VisionlineInstanceUnreachable = value
	}
	return nil
}

func (a AcsSystemErrorsItem) MarshalJSON() ([]byte, error) {
	switch a.ErrorCode {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.ErrorCode, a)
	case "seam_bridge_disconnected":
		var marshaler = struct {
			ErrorCode string `json:"error_code"`
			*AcsSystemErrorsItemSeamBridgeDisconnected
		}{
			ErrorCode: a.ErrorCode,
			AcsSystemErrorsItemSeamBridgeDisconnected: a.SeamBridgeDisconnected,
		}
		return json.Marshal(marshaler)
	case "visionline_instance_unreachable":
		var marshaler = struct {
			ErrorCode string `json:"error_code"`
			*AcsSystemErrorsItemVisionlineInstanceUnreachable
		}{
			ErrorCode: a.ErrorCode,
			AcsSystemErrorsItemVisionlineInstanceUnreachable: a.VisionlineInstanceUnreachable,
		}
		return json.Marshal(marshaler)
	}
}

type AcsSystemErrorsItemVisitor interface {
	VisitSeamBridgeDisconnected(*AcsSystemErrorsItemSeamBridgeDisconnected) error
	VisitVisionlineInstanceUnreachable(*AcsSystemErrorsItemVisionlineInstanceUnreachable) error
}

func (a *AcsSystemErrorsItem) Accept(visitor AcsSystemErrorsItemVisitor) error {
	switch a.ErrorCode {
	default:
		return fmt.Errorf("invalid type %s in %T", a.ErrorCode, a)
	case "seam_bridge_disconnected":
		return visitor.VisitSeamBridgeDisconnected(a.SeamBridgeDisconnected)
	case "visionline_instance_unreachable":
		return visitor.VisitVisionlineInstanceUnreachable(a.VisionlineInstanceUnreachable)
	}
}

type AcsSystemErrorsItemSeamBridgeDisconnected struct {
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	Message   string    `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *AcsSystemErrorsItemSeamBridgeDisconnected) UnmarshalJSON(data []byte) error {
	type embed AcsSystemErrorsItemSeamBridgeDisconnected
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsSystemErrorsItemSeamBridgeDisconnected(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsSystemErrorsItemSeamBridgeDisconnected) MarshalJSON() ([]byte, error) {
	type embed AcsSystemErrorsItemSeamBridgeDisconnected
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsSystemErrorsItemSeamBridgeDisconnected) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsSystemErrorsItemVisionlineInstanceUnreachable struct {
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	Message   string    `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *AcsSystemErrorsItemVisionlineInstanceUnreachable) UnmarshalJSON(data []byte) error {
	type embed AcsSystemErrorsItemVisionlineInstanceUnreachable
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsSystemErrorsItemVisionlineInstanceUnreachable(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsSystemErrorsItemVisionlineInstanceUnreachable) MarshalJSON() ([]byte, error) {
	type embed AcsSystemErrorsItemVisionlineInstanceUnreachable
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsSystemErrorsItemVisionlineInstanceUnreachable) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsSystemExternalType string

const (
	AcsSystemExternalTypePtiSite                          AcsSystemExternalType = "pti_site"
	AcsSystemExternalTypeAltaOrg                          AcsSystemExternalType = "alta_org"
	AcsSystemExternalTypeSaltoSite                        AcsSystemExternalType = "salto_site"
	AcsSystemExternalTypeBrivoAccount                     AcsSystemExternalType = "brivo_account"
	AcsSystemExternalTypeHidCredentialManagerOrganization AcsSystemExternalType = "hid_credential_manager_organization"
	AcsSystemExternalTypeVisionlineSystem                 AcsSystemExternalType = "visionline_system"
	AcsSystemExternalTypeAssaAbloyCredentialService       AcsSystemExternalType = "assa_abloy_credential_service"
	AcsSystemExternalTypeLatchBuilding                    AcsSystemExternalType = "latch_building"
)

func NewAcsSystemExternalTypeFromString(s string) (AcsSystemExternalType, error) {
	switch s {
	case "pti_site":
		return AcsSystemExternalTypePtiSite, nil
	case "alta_org":
		return AcsSystemExternalTypeAltaOrg, nil
	case "salto_site":
		return AcsSystemExternalTypeSaltoSite, nil
	case "brivo_account":
		return AcsSystemExternalTypeBrivoAccount, nil
	case "hid_credential_manager_organization":
		return AcsSystemExternalTypeHidCredentialManagerOrganization, nil
	case "visionline_system":
		return AcsSystemExternalTypeVisionlineSystem, nil
	case "assa_abloy_credential_service":
		return AcsSystemExternalTypeAssaAbloyCredentialService, nil
	case "latch_building":
		return AcsSystemExternalTypeLatchBuilding, nil
	}
	var t AcsSystemExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsSystemExternalType) Ptr() *AcsSystemExternalType {
	return &a
}

// ---
// deprecated: use external_type
// ---
type AcsSystemSystemType string

const (
	AcsSystemSystemTypePtiSite                          AcsSystemSystemType = "pti_site"
	AcsSystemSystemTypeAltaOrg                          AcsSystemSystemType = "alta_org"
	AcsSystemSystemTypeSaltoSite                        AcsSystemSystemType = "salto_site"
	AcsSystemSystemTypeBrivoAccount                     AcsSystemSystemType = "brivo_account"
	AcsSystemSystemTypeHidCredentialManagerOrganization AcsSystemSystemType = "hid_credential_manager_organization"
	AcsSystemSystemTypeVisionlineSystem                 AcsSystemSystemType = "visionline_system"
	AcsSystemSystemTypeAssaAbloyCredentialService       AcsSystemSystemType = "assa_abloy_credential_service"
	AcsSystemSystemTypeLatchBuilding                    AcsSystemSystemType = "latch_building"
)

func NewAcsSystemSystemTypeFromString(s string) (AcsSystemSystemType, error) {
	switch s {
	case "pti_site":
		return AcsSystemSystemTypePtiSite, nil
	case "alta_org":
		return AcsSystemSystemTypeAltaOrg, nil
	case "salto_site":
		return AcsSystemSystemTypeSaltoSite, nil
	case "brivo_account":
		return AcsSystemSystemTypeBrivoAccount, nil
	case "hid_credential_manager_organization":
		return AcsSystemSystemTypeHidCredentialManagerOrganization, nil
	case "visionline_system":
		return AcsSystemSystemTypeVisionlineSystem, nil
	case "assa_abloy_credential_service":
		return AcsSystemSystemTypeAssaAbloyCredentialService, nil
	case "latch_building":
		return AcsSystemSystemTypeLatchBuilding, nil
	}
	var t AcsSystemSystemType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsSystemSystemType) Ptr() *AcsSystemSystemType {
	return &a
}

type AcsSystemWarningsItem struct {
	_rawJSON json.RawMessage
}

func (a *AcsSystemWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler AcsSystemWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcsSystemWarningsItem(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsSystemWarningsItem) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsUser struct {
	AcsUserId                string                 `json:"acs_user_id" url:"acs_user_id"`
	AcsSystemId              string                 `json:"acs_system_id" url:"acs_system_id"`
	HidAcsSystemId           *string                `json:"hid_acs_system_id,omitempty" url:"hid_acs_system_id,omitempty"`
	WorkspaceId              string                 `json:"workspace_id" url:"workspace_id"`
	CreatedAt                time.Time              `json:"created_at" url:"created_at"`
	DisplayName              string                 `json:"display_name" url:"display_name"`
	ExternalType             *AcsUserExternalType   `json:"external_type,omitempty" url:"external_type,omitempty"`
	ExternalTypeDisplayName  *string                `json:"external_type_display_name,omitempty" url:"external_type_display_name,omitempty"`
	IsSuspended              bool                   `json:"is_suspended" url:"is_suspended"`
	AccessSchedule           *AcsUserAccessSchedule `json:"access_schedule,omitempty" url:"access_schedule,omitempty"`
	UserIdentityId           *string                `json:"user_identity_id,omitempty" url:"user_identity_id,omitempty"`
	UserIdentityFullName     *string                `json:"user_identity_full_name,omitempty" url:"user_identity_full_name,omitempty"`
	UserIdentityEmailAddress *string                `json:"user_identity_email_address,omitempty" url:"user_identity_email_address,omitempty"`
	UserIdentityPhoneNumber  *string                `json:"user_identity_phone_number,omitempty" url:"user_identity_phone_number,omitempty"`
	FullName                 *string                `json:"full_name,omitempty" url:"full_name,omitempty"`
	// ---
	// deprecated: use email_address.
	// ---
	Email        *string `json:"email,omitempty" url:"email,omitempty"`
	EmailAddress *string `json:"email_address,omitempty" url:"email_address,omitempty"`
	PhoneNumber  *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AcsUser) UnmarshalJSON(data []byte) error {
	type embed AcsUser
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsUser(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsUser) MarshalJSON() ([]byte, error) {
	type embed AcsUser
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*a),
		CreatedAt: core.NewDateTime(a.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsUser) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsUserAccessSchedule struct {
	StartsAt time.Time `json:"starts_at" url:"starts_at"`
	EndsAt   time.Time `json:"ends_at" url:"ends_at"`

	_rawJSON json.RawMessage
}

func (a *AcsUserAccessSchedule) UnmarshalJSON(data []byte) error {
	type embed AcsUserAccessSchedule
	var unmarshaler = struct {
		embed
		StartsAt *core.DateTime `json:"starts_at"`
		EndsAt   *core.DateTime `json:"ends_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = AcsUserAccessSchedule(unmarshaler.embed)
	a.StartsAt = unmarshaler.StartsAt.Time()
	a.EndsAt = unmarshaler.EndsAt.Time()
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcsUserAccessSchedule) MarshalJSON() ([]byte, error) {
	type embed AcsUserAccessSchedule
	var marshaler = struct {
		embed
		StartsAt *core.DateTime `json:"starts_at"`
		EndsAt   *core.DateTime `json:"ends_at"`
	}{
		embed:    embed(*a),
		StartsAt: core.NewDateTime(a.StartsAt),
		EndsAt:   core.NewDateTime(a.EndsAt),
	}
	return json.Marshal(marshaler)
}

func (a *AcsUserAccessSchedule) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AcsUserExternalType string

const (
	AcsUserExternalTypePtiUser                  AcsUserExternalType = "pti_user"
	AcsUserExternalTypeBrivoUser                AcsUserExternalType = "brivo_user"
	AcsUserExternalTypeHidCredentialManagerUser AcsUserExternalType = "hid_credential_manager_user"
	AcsUserExternalTypeSaltoSiteUser            AcsUserExternalType = "salto_site_user"
	AcsUserExternalTypeLatchUser                AcsUserExternalType = "latch_user"
)

func NewAcsUserExternalTypeFromString(s string) (AcsUserExternalType, error) {
	switch s {
	case "pti_user":
		return AcsUserExternalTypePtiUser, nil
	case "brivo_user":
		return AcsUserExternalTypeBrivoUser, nil
	case "hid_credential_manager_user":
		return AcsUserExternalTypeHidCredentialManagerUser, nil
	case "salto_site_user":
		return AcsUserExternalTypeSaltoSiteUser, nil
	case "latch_user":
		return AcsUserExternalTypeLatchUser, nil
	}
	var t AcsUserExternalType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AcsUserExternalType) Ptr() *AcsUserExternalType {
	return &a
}

type ActionAttempt struct {
	typeName string
	// Locking door.
	ActionAttemptZero *ActionAttemptZero
	// Locking door succeeded.
	ActionAttemptOne *ActionAttemptOne
	// Locking door failed.
	ActionAttemptTwo *ActionAttemptTwo
	// Unlocking door.
	ActionAttemptThree *ActionAttemptThree
	// Unlocking door succeeded.
	ActionAttemptFour *ActionAttemptFour
	// Unlocking door failed.
	ActionAttemptFive *ActionAttemptFive
	// Resetting sandbox workspace.
	ActionAttemptSix *ActionAttemptSix
	// Resetting sandbox workspace succeeded.
	ActionAttemptSeven *ActionAttemptSeven
	// Resetting sandbox workspace failed.
	ActionAttemptEight *ActionAttemptEight
	// Setting HVAC to cool.
	ActionAttemptNine *ActionAttemptNine
	// Setting HVAC to cool succeeded.
	ActionAttemptTen *ActionAttemptTen
	// Setting HVAC to cool failed.
	ActionAttemptEleven *ActionAttemptEleven
	// Setting HVAC to heat mode.
	ActionAttemptTwelve *ActionAttemptTwelve
	// Setting HVAC to heat mode succeeded.
	ActionAttemptThirteen *ActionAttemptThirteen
	// Setting HVAC to heat mode failed.
	ActionAttemptFourteen *ActionAttemptFourteen
	// Setting HVAC to heat-cool mode.
	ActionAttemptFifteen *ActionAttemptFifteen
	// Setting HVAC to heat-cool mode succeeded.
	ActionAttemptSixteen *ActionAttemptSixteen
	// Setting heat-cool mode failed.
	ActionAttemptSeventeen *ActionAttemptSeventeen
	// Setting fan mode.
	ActionAttemptEighteen *ActionAttemptEighteen
	// Setting fan mode succeeded.
	ActionAttemptNineteen *ActionAttemptNineteen
	// Setting fan mode failed.
	ActionAttemptTwenty *ActionAttemptTwenty
	// Turning HVAC off.
	ActionAttemptTwentyOne *ActionAttemptTwentyOne
	// Turning HVAC off succeeded.
	ActionAttemptTwentyTwo *ActionAttemptTwentyTwo
	// Turning HVAC off failed.
	ActionAttemptTwentyThree     *ActionAttemptTwentyThree
	ActionAttemptTwentyFour      *ActionAttemptTwentyFour
	ActionAttemptTwentyFive      *ActionAttemptTwentyFive
	ActionAttemptTwentySix       *ActionAttemptTwentySix
	ActionAttemptTwentySeven     *ActionAttemptTwentySeven
	ActionAttemptTwentyEight     *ActionAttemptTwentyEight
	ActionAttemptTwentyNine      *ActionAttemptTwentyNine
	ActionAttemptThirty          *ActionAttemptThirty
	ActionAttemptThirtyOne       *ActionAttemptThirtyOne
	ActionAttemptThirtyTwo       *ActionAttemptThirtyTwo
	ActionAttemptThirtyThree     *ActionAttemptThirtyThree
	ActionAttemptThirtyFour      *ActionAttemptThirtyFour
	ActionAttemptThirtyFive      *ActionAttemptThirtyFive
	ActionAttemptThirtySix       *ActionAttemptThirtySix
	ActionAttemptThirtySeven     *ActionAttemptThirtySeven
	ActionAttemptThirtyEight     *ActionAttemptThirtyEight
	ActionAttemptThirtyNine      *ActionAttemptThirtyNine
	ActionAttemptForty           *ActionAttemptForty
	ActionAttemptFortyOne        *ActionAttemptFortyOne
	ActionAttemptFortyTwo        *ActionAttemptFortyTwo
	ActionAttemptFortyThree      *ActionAttemptFortyThree
	ActionAttemptActionAttemptId *ActionAttemptActionAttemptId
}

func NewActionAttemptFromActionAttemptZero(value *ActionAttemptZero) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptZero", ActionAttemptZero: value}
}

func NewActionAttemptFromActionAttemptOne(value *ActionAttemptOne) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptOne", ActionAttemptOne: value}
}

func NewActionAttemptFromActionAttemptTwo(value *ActionAttemptTwo) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwo", ActionAttemptTwo: value}
}

func NewActionAttemptFromActionAttemptThree(value *ActionAttemptThree) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThree", ActionAttemptThree: value}
}

func NewActionAttemptFromActionAttemptFour(value *ActionAttemptFour) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFour", ActionAttemptFour: value}
}

func NewActionAttemptFromActionAttemptFive(value *ActionAttemptFive) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFive", ActionAttemptFive: value}
}

func NewActionAttemptFromActionAttemptSix(value *ActionAttemptSix) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptSix", ActionAttemptSix: value}
}

func NewActionAttemptFromActionAttemptSeven(value *ActionAttemptSeven) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptSeven", ActionAttemptSeven: value}
}

func NewActionAttemptFromActionAttemptEight(value *ActionAttemptEight) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptEight", ActionAttemptEight: value}
}

func NewActionAttemptFromActionAttemptNine(value *ActionAttemptNine) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptNine", ActionAttemptNine: value}
}

func NewActionAttemptFromActionAttemptTen(value *ActionAttemptTen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTen", ActionAttemptTen: value}
}

func NewActionAttemptFromActionAttemptEleven(value *ActionAttemptEleven) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptEleven", ActionAttemptEleven: value}
}

func NewActionAttemptFromActionAttemptTwelve(value *ActionAttemptTwelve) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwelve", ActionAttemptTwelve: value}
}

func NewActionAttemptFromActionAttemptThirteen(value *ActionAttemptThirteen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirteen", ActionAttemptThirteen: value}
}

func NewActionAttemptFromActionAttemptFourteen(value *ActionAttemptFourteen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFourteen", ActionAttemptFourteen: value}
}

func NewActionAttemptFromActionAttemptFifteen(value *ActionAttemptFifteen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFifteen", ActionAttemptFifteen: value}
}

func NewActionAttemptFromActionAttemptSixteen(value *ActionAttemptSixteen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptSixteen", ActionAttemptSixteen: value}
}

func NewActionAttemptFromActionAttemptSeventeen(value *ActionAttemptSeventeen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptSeventeen", ActionAttemptSeventeen: value}
}

func NewActionAttemptFromActionAttemptEighteen(value *ActionAttemptEighteen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptEighteen", ActionAttemptEighteen: value}
}

func NewActionAttemptFromActionAttemptNineteen(value *ActionAttemptNineteen) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptNineteen", ActionAttemptNineteen: value}
}

func NewActionAttemptFromActionAttemptTwenty(value *ActionAttemptTwenty) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwenty", ActionAttemptTwenty: value}
}

func NewActionAttemptFromActionAttemptTwentyOne(value *ActionAttemptTwentyOne) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyOne", ActionAttemptTwentyOne: value}
}

func NewActionAttemptFromActionAttemptTwentyTwo(value *ActionAttemptTwentyTwo) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyTwo", ActionAttemptTwentyTwo: value}
}

func NewActionAttemptFromActionAttemptTwentyThree(value *ActionAttemptTwentyThree) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyThree", ActionAttemptTwentyThree: value}
}

func NewActionAttemptFromActionAttemptTwentyFour(value *ActionAttemptTwentyFour) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyFour", ActionAttemptTwentyFour: value}
}

func NewActionAttemptFromActionAttemptTwentyFive(value *ActionAttemptTwentyFive) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyFive", ActionAttemptTwentyFive: value}
}

func NewActionAttemptFromActionAttemptTwentySix(value *ActionAttemptTwentySix) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentySix", ActionAttemptTwentySix: value}
}

func NewActionAttemptFromActionAttemptTwentySeven(value *ActionAttemptTwentySeven) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentySeven", ActionAttemptTwentySeven: value}
}

func NewActionAttemptFromActionAttemptTwentyEight(value *ActionAttemptTwentyEight) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyEight", ActionAttemptTwentyEight: value}
}

func NewActionAttemptFromActionAttemptTwentyNine(value *ActionAttemptTwentyNine) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptTwentyNine", ActionAttemptTwentyNine: value}
}

func NewActionAttemptFromActionAttemptThirty(value *ActionAttemptThirty) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirty", ActionAttemptThirty: value}
}

func NewActionAttemptFromActionAttemptThirtyOne(value *ActionAttemptThirtyOne) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyOne", ActionAttemptThirtyOne: value}
}

func NewActionAttemptFromActionAttemptThirtyTwo(value *ActionAttemptThirtyTwo) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyTwo", ActionAttemptThirtyTwo: value}
}

func NewActionAttemptFromActionAttemptThirtyThree(value *ActionAttemptThirtyThree) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyThree", ActionAttemptThirtyThree: value}
}

func NewActionAttemptFromActionAttemptThirtyFour(value *ActionAttemptThirtyFour) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyFour", ActionAttemptThirtyFour: value}
}

func NewActionAttemptFromActionAttemptThirtyFive(value *ActionAttemptThirtyFive) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyFive", ActionAttemptThirtyFive: value}
}

func NewActionAttemptFromActionAttemptThirtySix(value *ActionAttemptThirtySix) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtySix", ActionAttemptThirtySix: value}
}

func NewActionAttemptFromActionAttemptThirtySeven(value *ActionAttemptThirtySeven) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtySeven", ActionAttemptThirtySeven: value}
}

func NewActionAttemptFromActionAttemptThirtyEight(value *ActionAttemptThirtyEight) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyEight", ActionAttemptThirtyEight: value}
}

func NewActionAttemptFromActionAttemptThirtyNine(value *ActionAttemptThirtyNine) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptThirtyNine", ActionAttemptThirtyNine: value}
}

func NewActionAttemptFromActionAttemptForty(value *ActionAttemptForty) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptForty", ActionAttemptForty: value}
}

func NewActionAttemptFromActionAttemptFortyOne(value *ActionAttemptFortyOne) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFortyOne", ActionAttemptFortyOne: value}
}

func NewActionAttemptFromActionAttemptFortyTwo(value *ActionAttemptFortyTwo) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFortyTwo", ActionAttemptFortyTwo: value}
}

func NewActionAttemptFromActionAttemptFortyThree(value *ActionAttemptFortyThree) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptFortyThree", ActionAttemptFortyThree: value}
}

func NewActionAttemptFromActionAttemptActionAttemptId(value *ActionAttemptActionAttemptId) *ActionAttempt {
	return &ActionAttempt{typeName: "actionAttemptActionAttemptId", ActionAttemptActionAttemptId: value}
}

func (a *ActionAttempt) UnmarshalJSON(data []byte) error {
	valueActionAttemptZero := new(ActionAttemptZero)
	if err := json.Unmarshal(data, &valueActionAttemptZero); err == nil {
		a.typeName = "actionAttemptZero"
		a.ActionAttemptZero = valueActionAttemptZero
		return nil
	}
	valueActionAttemptOne := new(ActionAttemptOne)
	if err := json.Unmarshal(data, &valueActionAttemptOne); err == nil {
		a.typeName = "actionAttemptOne"
		a.ActionAttemptOne = valueActionAttemptOne
		return nil
	}
	valueActionAttemptTwo := new(ActionAttemptTwo)
	if err := json.Unmarshal(data, &valueActionAttemptTwo); err == nil {
		a.typeName = "actionAttemptTwo"
		a.ActionAttemptTwo = valueActionAttemptTwo
		return nil
	}
	valueActionAttemptThree := new(ActionAttemptThree)
	if err := json.Unmarshal(data, &valueActionAttemptThree); err == nil {
		a.typeName = "actionAttemptThree"
		a.ActionAttemptThree = valueActionAttemptThree
		return nil
	}
	valueActionAttemptFour := new(ActionAttemptFour)
	if err := json.Unmarshal(data, &valueActionAttemptFour); err == nil {
		a.typeName = "actionAttemptFour"
		a.ActionAttemptFour = valueActionAttemptFour
		return nil
	}
	valueActionAttemptFive := new(ActionAttemptFive)
	if err := json.Unmarshal(data, &valueActionAttemptFive); err == nil {
		a.typeName = "actionAttemptFive"
		a.ActionAttemptFive = valueActionAttemptFive
		return nil
	}
	valueActionAttemptSix := new(ActionAttemptSix)
	if err := json.Unmarshal(data, &valueActionAttemptSix); err == nil {
		a.typeName = "actionAttemptSix"
		a.ActionAttemptSix = valueActionAttemptSix
		return nil
	}
	valueActionAttemptSeven := new(ActionAttemptSeven)
	if err := json.Unmarshal(data, &valueActionAttemptSeven); err == nil {
		a.typeName = "actionAttemptSeven"
		a.ActionAttemptSeven = valueActionAttemptSeven
		return nil
	}
	valueActionAttemptEight := new(ActionAttemptEight)
	if err := json.Unmarshal(data, &valueActionAttemptEight); err == nil {
		a.typeName = "actionAttemptEight"
		a.ActionAttemptEight = valueActionAttemptEight
		return nil
	}
	valueActionAttemptNine := new(ActionAttemptNine)
	if err := json.Unmarshal(data, &valueActionAttemptNine); err == nil {
		a.typeName = "actionAttemptNine"
		a.ActionAttemptNine = valueActionAttemptNine
		return nil
	}
	valueActionAttemptTen := new(ActionAttemptTen)
	if err := json.Unmarshal(data, &valueActionAttemptTen); err == nil {
		a.typeName = "actionAttemptTen"
		a.ActionAttemptTen = valueActionAttemptTen
		return nil
	}
	valueActionAttemptEleven := new(ActionAttemptEleven)
	if err := json.Unmarshal(data, &valueActionAttemptEleven); err == nil {
		a.typeName = "actionAttemptEleven"
		a.ActionAttemptEleven = valueActionAttemptEleven
		return nil
	}
	valueActionAttemptTwelve := new(ActionAttemptTwelve)
	if err := json.Unmarshal(data, &valueActionAttemptTwelve); err == nil {
		a.typeName = "actionAttemptTwelve"
		a.ActionAttemptTwelve = valueActionAttemptTwelve
		return nil
	}
	valueActionAttemptThirteen := new(ActionAttemptThirteen)
	if err := json.Unmarshal(data, &valueActionAttemptThirteen); err == nil {
		a.typeName = "actionAttemptThirteen"
		a.ActionAttemptThirteen = valueActionAttemptThirteen
		return nil
	}
	valueActionAttemptFourteen := new(ActionAttemptFourteen)
	if err := json.Unmarshal(data, &valueActionAttemptFourteen); err == nil {
		a.typeName = "actionAttemptFourteen"
		a.ActionAttemptFourteen = valueActionAttemptFourteen
		return nil
	}
	valueActionAttemptFifteen := new(ActionAttemptFifteen)
	if err := json.Unmarshal(data, &valueActionAttemptFifteen); err == nil {
		a.typeName = "actionAttemptFifteen"
		a.ActionAttemptFifteen = valueActionAttemptFifteen
		return nil
	}
	valueActionAttemptSixteen := new(ActionAttemptSixteen)
	if err := json.Unmarshal(data, &valueActionAttemptSixteen); err == nil {
		a.typeName = "actionAttemptSixteen"
		a.ActionAttemptSixteen = valueActionAttemptSixteen
		return nil
	}
	valueActionAttemptSeventeen := new(ActionAttemptSeventeen)
	if err := json.Unmarshal(data, &valueActionAttemptSeventeen); err == nil {
		a.typeName = "actionAttemptSeventeen"
		a.ActionAttemptSeventeen = valueActionAttemptSeventeen
		return nil
	}
	valueActionAttemptEighteen := new(ActionAttemptEighteen)
	if err := json.Unmarshal(data, &valueActionAttemptEighteen); err == nil {
		a.typeName = "actionAttemptEighteen"
		a.ActionAttemptEighteen = valueActionAttemptEighteen
		return nil
	}
	valueActionAttemptNineteen := new(ActionAttemptNineteen)
	if err := json.Unmarshal(data, &valueActionAttemptNineteen); err == nil {
		a.typeName = "actionAttemptNineteen"
		a.ActionAttemptNineteen = valueActionAttemptNineteen
		return nil
	}
	valueActionAttemptTwenty := new(ActionAttemptTwenty)
	if err := json.Unmarshal(data, &valueActionAttemptTwenty); err == nil {
		a.typeName = "actionAttemptTwenty"
		a.ActionAttemptTwenty = valueActionAttemptTwenty
		return nil
	}
	valueActionAttemptTwentyOne := new(ActionAttemptTwentyOne)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyOne); err == nil {
		a.typeName = "actionAttemptTwentyOne"
		a.ActionAttemptTwentyOne = valueActionAttemptTwentyOne
		return nil
	}
	valueActionAttemptTwentyTwo := new(ActionAttemptTwentyTwo)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyTwo); err == nil {
		a.typeName = "actionAttemptTwentyTwo"
		a.ActionAttemptTwentyTwo = valueActionAttemptTwentyTwo
		return nil
	}
	valueActionAttemptTwentyThree := new(ActionAttemptTwentyThree)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyThree); err == nil {
		a.typeName = "actionAttemptTwentyThree"
		a.ActionAttemptTwentyThree = valueActionAttemptTwentyThree
		return nil
	}
	valueActionAttemptTwentyFour := new(ActionAttemptTwentyFour)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyFour); err == nil {
		a.typeName = "actionAttemptTwentyFour"
		a.ActionAttemptTwentyFour = valueActionAttemptTwentyFour
		return nil
	}
	valueActionAttemptTwentyFive := new(ActionAttemptTwentyFive)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyFive); err == nil {
		a.typeName = "actionAttemptTwentyFive"
		a.ActionAttemptTwentyFive = valueActionAttemptTwentyFive
		return nil
	}
	valueActionAttemptTwentySix := new(ActionAttemptTwentySix)
	if err := json.Unmarshal(data, &valueActionAttemptTwentySix); err == nil {
		a.typeName = "actionAttemptTwentySix"
		a.ActionAttemptTwentySix = valueActionAttemptTwentySix
		return nil
	}
	valueActionAttemptTwentySeven := new(ActionAttemptTwentySeven)
	if err := json.Unmarshal(data, &valueActionAttemptTwentySeven); err == nil {
		a.typeName = "actionAttemptTwentySeven"
		a.ActionAttemptTwentySeven = valueActionAttemptTwentySeven
		return nil
	}
	valueActionAttemptTwentyEight := new(ActionAttemptTwentyEight)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyEight); err == nil {
		a.typeName = "actionAttemptTwentyEight"
		a.ActionAttemptTwentyEight = valueActionAttemptTwentyEight
		return nil
	}
	valueActionAttemptTwentyNine := new(ActionAttemptTwentyNine)
	if err := json.Unmarshal(data, &valueActionAttemptTwentyNine); err == nil {
		a.typeName = "actionAttemptTwentyNine"
		a.ActionAttemptTwentyNine = valueActionAttemptTwentyNine
		return nil
	}
	valueActionAttemptThirty := new(ActionAttemptThirty)
	if err := json.Unmarshal(data, &valueActionAttemptThirty); err == nil {
		a.typeName = "actionAttemptThirty"
		a.ActionAttemptThirty = valueActionAttemptThirty
		return nil
	}
	valueActionAttemptThirtyOne := new(ActionAttemptThirtyOne)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyOne); err == nil {
		a.typeName = "actionAttemptThirtyOne"
		a.ActionAttemptThirtyOne = valueActionAttemptThirtyOne
		return nil
	}
	valueActionAttemptThirtyTwo := new(ActionAttemptThirtyTwo)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyTwo); err == nil {
		a.typeName = "actionAttemptThirtyTwo"
		a.ActionAttemptThirtyTwo = valueActionAttemptThirtyTwo
		return nil
	}
	valueActionAttemptThirtyThree := new(ActionAttemptThirtyThree)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyThree); err == nil {
		a.typeName = "actionAttemptThirtyThree"
		a.ActionAttemptThirtyThree = valueActionAttemptThirtyThree
		return nil
	}
	valueActionAttemptThirtyFour := new(ActionAttemptThirtyFour)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyFour); err == nil {
		a.typeName = "actionAttemptThirtyFour"
		a.ActionAttemptThirtyFour = valueActionAttemptThirtyFour
		return nil
	}
	valueActionAttemptThirtyFive := new(ActionAttemptThirtyFive)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyFive); err == nil {
		a.typeName = "actionAttemptThirtyFive"
		a.ActionAttemptThirtyFive = valueActionAttemptThirtyFive
		return nil
	}
	valueActionAttemptThirtySix := new(ActionAttemptThirtySix)
	if err := json.Unmarshal(data, &valueActionAttemptThirtySix); err == nil {
		a.typeName = "actionAttemptThirtySix"
		a.ActionAttemptThirtySix = valueActionAttemptThirtySix
		return nil
	}
	valueActionAttemptThirtySeven := new(ActionAttemptThirtySeven)
	if err := json.Unmarshal(data, &valueActionAttemptThirtySeven); err == nil {
		a.typeName = "actionAttemptThirtySeven"
		a.ActionAttemptThirtySeven = valueActionAttemptThirtySeven
		return nil
	}
	valueActionAttemptThirtyEight := new(ActionAttemptThirtyEight)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyEight); err == nil {
		a.typeName = "actionAttemptThirtyEight"
		a.ActionAttemptThirtyEight = valueActionAttemptThirtyEight
		return nil
	}
	valueActionAttemptThirtyNine := new(ActionAttemptThirtyNine)
	if err := json.Unmarshal(data, &valueActionAttemptThirtyNine); err == nil {
		a.typeName = "actionAttemptThirtyNine"
		a.ActionAttemptThirtyNine = valueActionAttemptThirtyNine
		return nil
	}
	valueActionAttemptForty := new(ActionAttemptForty)
	if err := json.Unmarshal(data, &valueActionAttemptForty); err == nil {
		a.typeName = "actionAttemptForty"
		a.ActionAttemptForty = valueActionAttemptForty
		return nil
	}
	valueActionAttemptFortyOne := new(ActionAttemptFortyOne)
	if err := json.Unmarshal(data, &valueActionAttemptFortyOne); err == nil {
		a.typeName = "actionAttemptFortyOne"
		a.ActionAttemptFortyOne = valueActionAttemptFortyOne
		return nil
	}
	valueActionAttemptFortyTwo := new(ActionAttemptFortyTwo)
	if err := json.Unmarshal(data, &valueActionAttemptFortyTwo); err == nil {
		a.typeName = "actionAttemptFortyTwo"
		a.ActionAttemptFortyTwo = valueActionAttemptFortyTwo
		return nil
	}
	valueActionAttemptFortyThree := new(ActionAttemptFortyThree)
	if err := json.Unmarshal(data, &valueActionAttemptFortyThree); err == nil {
		a.typeName = "actionAttemptFortyThree"
		a.ActionAttemptFortyThree = valueActionAttemptFortyThree
		return nil
	}
	valueActionAttemptActionAttemptId := new(ActionAttemptActionAttemptId)
	if err := json.Unmarshal(data, &valueActionAttemptActionAttemptId); err == nil {
		a.typeName = "actionAttemptActionAttemptId"
		a.ActionAttemptActionAttemptId = valueActionAttemptActionAttemptId
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a ActionAttempt) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "actionAttemptZero":
		return json.Marshal(a.ActionAttemptZero)
	case "actionAttemptOne":
		return json.Marshal(a.ActionAttemptOne)
	case "actionAttemptTwo":
		return json.Marshal(a.ActionAttemptTwo)
	case "actionAttemptThree":
		return json.Marshal(a.ActionAttemptThree)
	case "actionAttemptFour":
		return json.Marshal(a.ActionAttemptFour)
	case "actionAttemptFive":
		return json.Marshal(a.ActionAttemptFive)
	case "actionAttemptSix":
		return json.Marshal(a.ActionAttemptSix)
	case "actionAttemptSeven":
		return json.Marshal(a.ActionAttemptSeven)
	case "actionAttemptEight":
		return json.Marshal(a.ActionAttemptEight)
	case "actionAttemptNine":
		return json.Marshal(a.ActionAttemptNine)
	case "actionAttemptTen":
		return json.Marshal(a.ActionAttemptTen)
	case "actionAttemptEleven":
		return json.Marshal(a.ActionAttemptEleven)
	case "actionAttemptTwelve":
		return json.Marshal(a.ActionAttemptTwelve)
	case "actionAttemptThirteen":
		return json.Marshal(a.ActionAttemptThirteen)
	case "actionAttemptFourteen":
		return json.Marshal(a.ActionAttemptFourteen)
	case "actionAttemptFifteen":
		return json.Marshal(a.ActionAttemptFifteen)
	case "actionAttemptSixteen":
		return json.Marshal(a.ActionAttemptSixteen)
	case "actionAttemptSeventeen":
		return json.Marshal(a.ActionAttemptSeventeen)
	case "actionAttemptEighteen":
		return json.Marshal(a.ActionAttemptEighteen)
	case "actionAttemptNineteen":
		return json.Marshal(a.ActionAttemptNineteen)
	case "actionAttemptTwenty":
		return json.Marshal(a.ActionAttemptTwenty)
	case "actionAttemptTwentyOne":
		return json.Marshal(a.ActionAttemptTwentyOne)
	case "actionAttemptTwentyTwo":
		return json.Marshal(a.ActionAttemptTwentyTwo)
	case "actionAttemptTwentyThree":
		return json.Marshal(a.ActionAttemptTwentyThree)
	case "actionAttemptTwentyFour":
		return json.Marshal(a.ActionAttemptTwentyFour)
	case "actionAttemptTwentyFive":
		return json.Marshal(a.ActionAttemptTwentyFive)
	case "actionAttemptTwentySix":
		return json.Marshal(a.ActionAttemptTwentySix)
	case "actionAttemptTwentySeven":
		return json.Marshal(a.ActionAttemptTwentySeven)
	case "actionAttemptTwentyEight":
		return json.Marshal(a.ActionAttemptTwentyEight)
	case "actionAttemptTwentyNine":
		return json.Marshal(a.ActionAttemptTwentyNine)
	case "actionAttemptThirty":
		return json.Marshal(a.ActionAttemptThirty)
	case "actionAttemptThirtyOne":
		return json.Marshal(a.ActionAttemptThirtyOne)
	case "actionAttemptThirtyTwo":
		return json.Marshal(a.ActionAttemptThirtyTwo)
	case "actionAttemptThirtyThree":
		return json.Marshal(a.ActionAttemptThirtyThree)
	case "actionAttemptThirtyFour":
		return json.Marshal(a.ActionAttemptThirtyFour)
	case "actionAttemptThirtyFive":
		return json.Marshal(a.ActionAttemptThirtyFive)
	case "actionAttemptThirtySix":
		return json.Marshal(a.ActionAttemptThirtySix)
	case "actionAttemptThirtySeven":
		return json.Marshal(a.ActionAttemptThirtySeven)
	case "actionAttemptThirtyEight":
		return json.Marshal(a.ActionAttemptThirtyEight)
	case "actionAttemptThirtyNine":
		return json.Marshal(a.ActionAttemptThirtyNine)
	case "actionAttemptForty":
		return json.Marshal(a.ActionAttemptForty)
	case "actionAttemptFortyOne":
		return json.Marshal(a.ActionAttemptFortyOne)
	case "actionAttemptFortyTwo":
		return json.Marshal(a.ActionAttemptFortyTwo)
	case "actionAttemptFortyThree":
		return json.Marshal(a.ActionAttemptFortyThree)
	case "actionAttemptActionAttemptId":
		return json.Marshal(a.ActionAttemptActionAttemptId)
	}
}

type ActionAttemptVisitor interface {
	VisitActionAttemptZero(*ActionAttemptZero) error
	VisitActionAttemptOne(*ActionAttemptOne) error
	VisitActionAttemptTwo(*ActionAttemptTwo) error
	VisitActionAttemptThree(*ActionAttemptThree) error
	VisitActionAttemptFour(*ActionAttemptFour) error
	VisitActionAttemptFive(*ActionAttemptFive) error
	VisitActionAttemptSix(*ActionAttemptSix) error
	VisitActionAttemptSeven(*ActionAttemptSeven) error
	VisitActionAttemptEight(*ActionAttemptEight) error
	VisitActionAttemptNine(*ActionAttemptNine) error
	VisitActionAttemptTen(*ActionAttemptTen) error
	VisitActionAttemptEleven(*ActionAttemptEleven) error
	VisitActionAttemptTwelve(*ActionAttemptTwelve) error
	VisitActionAttemptThirteen(*ActionAttemptThirteen) error
	VisitActionAttemptFourteen(*ActionAttemptFourteen) error
	VisitActionAttemptFifteen(*ActionAttemptFifteen) error
	VisitActionAttemptSixteen(*ActionAttemptSixteen) error
	VisitActionAttemptSeventeen(*ActionAttemptSeventeen) error
	VisitActionAttemptEighteen(*ActionAttemptEighteen) error
	VisitActionAttemptNineteen(*ActionAttemptNineteen) error
	VisitActionAttemptTwenty(*ActionAttemptTwenty) error
	VisitActionAttemptTwentyOne(*ActionAttemptTwentyOne) error
	VisitActionAttemptTwentyTwo(*ActionAttemptTwentyTwo) error
	VisitActionAttemptTwentyThree(*ActionAttemptTwentyThree) error
	VisitActionAttemptTwentyFour(*ActionAttemptTwentyFour) error
	VisitActionAttemptTwentyFive(*ActionAttemptTwentyFive) error
	VisitActionAttemptTwentySix(*ActionAttemptTwentySix) error
	VisitActionAttemptTwentySeven(*ActionAttemptTwentySeven) error
	VisitActionAttemptTwentyEight(*ActionAttemptTwentyEight) error
	VisitActionAttemptTwentyNine(*ActionAttemptTwentyNine) error
	VisitActionAttemptThirty(*ActionAttemptThirty) error
	VisitActionAttemptThirtyOne(*ActionAttemptThirtyOne) error
	VisitActionAttemptThirtyTwo(*ActionAttemptThirtyTwo) error
	VisitActionAttemptThirtyThree(*ActionAttemptThirtyThree) error
	VisitActionAttemptThirtyFour(*ActionAttemptThirtyFour) error
	VisitActionAttemptThirtyFive(*ActionAttemptThirtyFive) error
	VisitActionAttemptThirtySix(*ActionAttemptThirtySix) error
	VisitActionAttemptThirtySeven(*ActionAttemptThirtySeven) error
	VisitActionAttemptThirtyEight(*ActionAttemptThirtyEight) error
	VisitActionAttemptThirtyNine(*ActionAttemptThirtyNine) error
	VisitActionAttemptForty(*ActionAttemptForty) error
	VisitActionAttemptFortyOne(*ActionAttemptFortyOne) error
	VisitActionAttemptFortyTwo(*ActionAttemptFortyTwo) error
	VisitActionAttemptFortyThree(*ActionAttemptFortyThree) error
	VisitActionAttemptActionAttemptId(*ActionAttemptActionAttemptId) error
}

func (a *ActionAttempt) Accept(visitor ActionAttemptVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "actionAttemptZero":
		return visitor.VisitActionAttemptZero(a.ActionAttemptZero)
	case "actionAttemptOne":
		return visitor.VisitActionAttemptOne(a.ActionAttemptOne)
	case "actionAttemptTwo":
		return visitor.VisitActionAttemptTwo(a.ActionAttemptTwo)
	case "actionAttemptThree":
		return visitor.VisitActionAttemptThree(a.ActionAttemptThree)
	case "actionAttemptFour":
		return visitor.VisitActionAttemptFour(a.ActionAttemptFour)
	case "actionAttemptFive":
		return visitor.VisitActionAttemptFive(a.ActionAttemptFive)
	case "actionAttemptSix":
		return visitor.VisitActionAttemptSix(a.ActionAttemptSix)
	case "actionAttemptSeven":
		return visitor.VisitActionAttemptSeven(a.ActionAttemptSeven)
	case "actionAttemptEight":
		return visitor.VisitActionAttemptEight(a.ActionAttemptEight)
	case "actionAttemptNine":
		return visitor.VisitActionAttemptNine(a.ActionAttemptNine)
	case "actionAttemptTen":
		return visitor.VisitActionAttemptTen(a.ActionAttemptTen)
	case "actionAttemptEleven":
		return visitor.VisitActionAttemptEleven(a.ActionAttemptEleven)
	case "actionAttemptTwelve":
		return visitor.VisitActionAttemptTwelve(a.ActionAttemptTwelve)
	case "actionAttemptThirteen":
		return visitor.VisitActionAttemptThirteen(a.ActionAttemptThirteen)
	case "actionAttemptFourteen":
		return visitor.VisitActionAttemptFourteen(a.ActionAttemptFourteen)
	case "actionAttemptFifteen":
		return visitor.VisitActionAttemptFifteen(a.ActionAttemptFifteen)
	case "actionAttemptSixteen":
		return visitor.VisitActionAttemptSixteen(a.ActionAttemptSixteen)
	case "actionAttemptSeventeen":
		return visitor.VisitActionAttemptSeventeen(a.ActionAttemptSeventeen)
	case "actionAttemptEighteen":
		return visitor.VisitActionAttemptEighteen(a.ActionAttemptEighteen)
	case "actionAttemptNineteen":
		return visitor.VisitActionAttemptNineteen(a.ActionAttemptNineteen)
	case "actionAttemptTwenty":
		return visitor.VisitActionAttemptTwenty(a.ActionAttemptTwenty)
	case "actionAttemptTwentyOne":
		return visitor.VisitActionAttemptTwentyOne(a.ActionAttemptTwentyOne)
	case "actionAttemptTwentyTwo":
		return visitor.VisitActionAttemptTwentyTwo(a.ActionAttemptTwentyTwo)
	case "actionAttemptTwentyThree":
		return visitor.VisitActionAttemptTwentyThree(a.ActionAttemptTwentyThree)
	case "actionAttemptTwentyFour":
		return visitor.VisitActionAttemptTwentyFour(a.ActionAttemptTwentyFour)
	case "actionAttemptTwentyFive":
		return visitor.VisitActionAttemptTwentyFive(a.ActionAttemptTwentyFive)
	case "actionAttemptTwentySix":
		return visitor.VisitActionAttemptTwentySix(a.ActionAttemptTwentySix)
	case "actionAttemptTwentySeven":
		return visitor.VisitActionAttemptTwentySeven(a.ActionAttemptTwentySeven)
	case "actionAttemptTwentyEight":
		return visitor.VisitActionAttemptTwentyEight(a.ActionAttemptTwentyEight)
	case "actionAttemptTwentyNine":
		return visitor.VisitActionAttemptTwentyNine(a.ActionAttemptTwentyNine)
	case "actionAttemptThirty":
		return visitor.VisitActionAttemptThirty(a.ActionAttemptThirty)
	case "actionAttemptThirtyOne":
		return visitor.VisitActionAttemptThirtyOne(a.ActionAttemptThirtyOne)
	case "actionAttemptThirtyTwo":
		return visitor.VisitActionAttemptThirtyTwo(a.ActionAttemptThirtyTwo)
	case "actionAttemptThirtyThree":
		return visitor.VisitActionAttemptThirtyThree(a.ActionAttemptThirtyThree)
	case "actionAttemptThirtyFour":
		return visitor.VisitActionAttemptThirtyFour(a.ActionAttemptThirtyFour)
	case "actionAttemptThirtyFive":
		return visitor.VisitActionAttemptThirtyFive(a.ActionAttemptThirtyFive)
	case "actionAttemptThirtySix":
		return visitor.VisitActionAttemptThirtySix(a.ActionAttemptThirtySix)
	case "actionAttemptThirtySeven":
		return visitor.VisitActionAttemptThirtySeven(a.ActionAttemptThirtySeven)
	case "actionAttemptThirtyEight":
		return visitor.VisitActionAttemptThirtyEight(a.ActionAttemptThirtyEight)
	case "actionAttemptThirtyNine":
		return visitor.VisitActionAttemptThirtyNine(a.ActionAttemptThirtyNine)
	case "actionAttemptForty":
		return visitor.VisitActionAttemptForty(a.ActionAttemptForty)
	case "actionAttemptFortyOne":
		return visitor.VisitActionAttemptFortyOne(a.ActionAttemptFortyOne)
	case "actionAttemptFortyTwo":
		return visitor.VisitActionAttemptFortyTwo(a.ActionAttemptFortyTwo)
	case "actionAttemptFortyThree":
		return visitor.VisitActionAttemptFortyThree(a.ActionAttemptFortyThree)
	case "actionAttemptActionAttemptId":
		return visitor.VisitActionAttemptActionAttemptId(a.ActionAttemptActionAttemptId)
	}
}

type ActionAttemptActionAttemptId struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                             `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                            `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptActionAttemptIdError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptActionAttemptId) Status() string {
	return a.status
}

func (a *ActionAttemptActionAttemptId) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptActionAttemptId) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptActionAttemptId
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptActionAttemptId(unmarshaler.embed)
	a.status = "error"
	a.actionType = "UPDATE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptActionAttemptId) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptActionAttemptId
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "UPDATE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptActionAttemptId) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptActionAttemptIdError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptActionAttemptIdError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptActionAttemptIdError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptActionAttemptIdError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptActionAttemptIdError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Resetting sandbox workspace failed.
type ActionAttemptEight struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                   `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                  `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptEightError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptEight) Status() string {
	return a.status
}

func (a *ActionAttemptEight) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptEight) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptEight
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptEight(unmarshaler.embed)
	a.status = "error"
	a.actionType = "RESET_SANDBOX_WORKSPACE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptEight) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptEight
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "RESET_SANDBOX_WORKSPACE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptEight) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptEightError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptEightError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptEightError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptEightError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptEightError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting fan mode.
type ActionAttemptEighteen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptEighteen) Status() string {
	return a.status
}

func (a *ActionAttemptEighteen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptEighteen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptEighteen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptEighteen(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "SET_FAN_MODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptEighteen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptEighteen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "SET_FAN_MODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptEighteen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to cool failed.
type ActionAttemptEleven struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                    `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                   `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptElevenError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptEleven) Status() string {
	return a.status
}

func (a *ActionAttemptEleven) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptEleven) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptEleven
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptEleven(unmarshaler.embed)
	a.status = "error"
	a.actionType = "SET_COOL"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptEleven) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptEleven
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "SET_COOL",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptEleven) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptElevenError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptElevenError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptElevenError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptElevenError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptElevenError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to heat-cool mode.
type ActionAttemptFifteen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFifteen) Status() string {
	return a.status
}

func (a *ActionAttemptFifteen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFifteen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFifteen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFifteen(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "SET_HEAT_COOL"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFifteen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFifteen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "SET_HEAT_COOL",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFifteen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Unlocking door failed.
type ActionAttemptFive struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                 `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptFiveError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFive) Status() string {
	return a.status
}

func (a *ActionAttemptFive) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFive) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFive
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFive(unmarshaler.embed)
	a.status = "error"
	a.actionType = "UNLOCK_DOOR"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFive) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFive
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "UNLOCK_DOOR",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFive) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFiveError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFiveError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptFiveError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptFiveError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFiveError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptForty struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptForty) Status() string {
	return a.status
}

func (a *ActionAttemptForty) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptForty) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptForty
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptForty(unmarshaler.embed)
	a.status = "success"
	a.actionType = "DELETE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptForty) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptForty
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "DELETE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptForty) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFortyOne struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                      `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                     `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptFortyOneError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFortyOne) Status() string {
	return a.status
}

func (a *ActionAttemptFortyOne) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFortyOne) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFortyOne
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFortyOne(unmarshaler.embed)
	a.status = "error"
	a.actionType = "DELETE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFortyOne) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFortyOne
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "DELETE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFortyOne) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFortyOneError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFortyOneError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptFortyOneError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptFortyOneError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFortyOneError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFortyThree struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFortyThree) Status() string {
	return a.status
}

func (a *ActionAttemptFortyThree) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFortyThree) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFortyThree
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFortyThree(unmarshaler.embed)
	a.status = "success"
	a.actionType = "UPDATE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFortyThree) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFortyThree
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "UPDATE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFortyThree) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFortyTwo struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFortyTwo) Status() string {
	return a.status
}

func (a *ActionAttemptFortyTwo) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFortyTwo) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFortyTwo
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFortyTwo(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "UPDATE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFortyTwo) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFortyTwo
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "UPDATE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFortyTwo) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Unlocking door succeeded.
type ActionAttemptFour struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                   `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                  `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptFourResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFour) Status() string {
	return a.status
}

func (a *ActionAttemptFour) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFour) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFour
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFour(unmarshaler.embed)
	a.status = "success"
	a.actionType = "UNLOCK_DOOR"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFour) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFour
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "UNLOCK_DOOR",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFour) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFourResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptFourResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptFourResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptFourResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFourResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to heat mode failed.
type ActionAttemptFourteen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                      `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                     `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptFourteenError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFourteen) Status() string {
	return a.status
}

func (a *ActionAttemptFourteen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptFourteen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptFourteen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptFourteen(unmarshaler.embed)
	a.status = "error"
	a.actionType = "SET_HEAT"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFourteen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptFourteen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "SET_HEAT",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptFourteen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptFourteenError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptFourteenError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptFourteenError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptFourteenError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptFourteenError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to cool.
type ActionAttemptNine struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptNine) Status() string {
	return a.status
}

func (a *ActionAttemptNine) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptNine) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptNine
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptNine(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "SET_COOL"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptNine) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptNine
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "SET_COOL",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptNine) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting fan mode succeeded.
type ActionAttemptNineteen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                       `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                      `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptNineteenResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptNineteen) Status() string {
	return a.status
}

func (a *ActionAttemptNineteen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptNineteen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptNineteen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptNineteen(unmarshaler.embed)
	a.status = "success"
	a.actionType = "SET_FAN_MODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptNineteen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptNineteen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "SET_FAN_MODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptNineteen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptNineteenResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptNineteenResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptNineteenResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptNineteenResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptNineteenResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Locking door succeeded.
type ActionAttemptOne struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                  `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                 `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptOneResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptOne) Status() string {
	return a.status
}

func (a *ActionAttemptOne) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptOne) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptOne
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptOne(unmarshaler.embed)
	a.status = "success"
	a.actionType = "LOCK_DOOR"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptOne) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptOne
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "LOCK_DOOR",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptOne) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptOneResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptOneResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptOneResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptOneResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptOneResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Resetting sandbox workspace succeeded.
type ActionAttemptSeven struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                    `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                   `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptSevenResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptSeven) Status() string {
	return a.status
}

func (a *ActionAttemptSeven) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptSeven) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptSeven
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptSeven(unmarshaler.embed)
	a.status = "success"
	a.actionType = "RESET_SANDBOX_WORKSPACE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSeven) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptSeven
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "RESET_SANDBOX_WORKSPACE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptSeven) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptSevenResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptSevenResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptSevenResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptSevenResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSevenResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting heat-cool mode failed.
type ActionAttemptSeventeen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                       `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                      `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptSeventeenError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptSeventeen) Status() string {
	return a.status
}

func (a *ActionAttemptSeventeen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptSeventeen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptSeventeen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptSeventeen(unmarshaler.embed)
	a.status = "error"
	a.actionType = "SET_HEAT_COOL"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSeventeen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptSeventeen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "SET_HEAT_COOL",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptSeventeen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptSeventeenError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptSeventeenError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptSeventeenError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptSeventeenError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSeventeenError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Resetting sandbox workspace.
type ActionAttemptSix struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptSix) Status() string {
	return a.status
}

func (a *ActionAttemptSix) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptSix) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptSix
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptSix(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "RESET_SANDBOX_WORKSPACE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSix) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptSix
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "RESET_SANDBOX_WORKSPACE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptSix) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to heat-cool mode succeeded.
type ActionAttemptSixteen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                     `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptSixteenResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptSixteen) Status() string {
	return a.status
}

func (a *ActionAttemptSixteen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptSixteen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptSixteen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptSixteen(unmarshaler.embed)
	a.status = "success"
	a.actionType = "SET_HEAT_COOL"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSixteen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptSixteen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "SET_HEAT_COOL",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptSixteen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptSixteenResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptSixteenResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptSixteenResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptSixteenResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptSixteenResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to cool succeeded.
type ActionAttemptTen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                  `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                 `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptTenResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTen) Status() string {
	return a.status
}

func (a *ActionAttemptTen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTen(unmarshaler.embed)
	a.status = "success"
	a.actionType = "SET_COOL"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "SET_COOL",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTenResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptTenResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTenResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTenResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTenResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to heat mode succeeded.
type ActionAttemptThirteen struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                       `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                      `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptThirteenResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirteen) Status() string {
	return a.status
}

func (a *ActionAttemptThirteen) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirteen) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirteen
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirteen(unmarshaler.embed)
	a.status = "success"
	a.actionType = "SET_HEAT"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirteen) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirteen
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "SET_HEAT",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirteen) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirteenResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirteenResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptThirteenResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptThirteenResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirteenResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirty struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirty) Status() string {
	return a.status
}

func (a *ActionAttemptThirty) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirty) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirty
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirty(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "DELETE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirty) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirty
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "DELETE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirty) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyEight struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                         `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                        `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptThirtyEightError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyEight) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyEight) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyEight) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyEight
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyEight(unmarshaler.embed)
	a.status = "error"
	a.actionType = "CREATE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyEight) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyEight
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "CREATE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyEight) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyEightError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyEightError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptThirtyEightError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptThirtyEightError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyEightError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyFive struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                        `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                       `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptThirtyFiveError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyFive) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyFive) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyFive) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyFive
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyFive(unmarshaler.embed)
	a.status = "error"
	a.actionType = "UPDATE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyFive) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyFive
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "UPDATE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyFive) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyFiveError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyFiveError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptThirtyFiveError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptThirtyFiveError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyFiveError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyFour struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyFour) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyFour) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyFour) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyFour
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyFour(unmarshaler.embed)
	a.status = "success"
	a.actionType = "UPDATE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyFour) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyFour
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "UPDATE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyFour) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyNine struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyNine) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyNine) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyNine) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyNine
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyNine(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "DELETE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyNine) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyNine
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "DELETE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyNine) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyOne struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyOne) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyOne) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyOne) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyOne
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyOne(unmarshaler.embed)
	a.status = "success"
	a.actionType = "DELETE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyOne) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyOne
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "DELETE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyOne) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtySeven struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtySeven) Status() string {
	return a.status
}

func (a *ActionAttemptThirtySeven) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtySeven) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtySeven
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtySeven(unmarshaler.embed)
	a.status = "success"
	a.actionType = "CREATE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtySeven) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtySeven
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "CREATE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtySeven) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtySix struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtySix) Status() string {
	return a.status
}

func (a *ActionAttemptThirtySix) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtySix) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtySix
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtySix(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "CREATE_NOISE_THRESHOLD"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtySix) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtySix
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "CREATE_NOISE_THRESHOLD",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtySix) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyThree struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyThree) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyThree) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyThree) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyThree
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyThree(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "UPDATE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyThree) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyThree
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "UPDATE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyThree) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyTwo struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                       `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                      `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptThirtyTwoError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyTwo) Status() string {
	return a.status
}

func (a *ActionAttemptThirtyTwo) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThirtyTwo) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThirtyTwo
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThirtyTwo(unmarshaler.embed)
	a.status = "error"
	a.actionType = "DELETE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyTwo) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThirtyTwo
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "DELETE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThirtyTwo) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptThirtyTwoError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThirtyTwoError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptThirtyTwoError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptThirtyTwoError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThirtyTwoError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Unlocking door.
type ActionAttemptThree struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptThree) Status() string {
	return a.status
}

func (a *ActionAttemptThree) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptThree) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptThree
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptThree(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "UNLOCK_DOOR"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptThree) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptThree
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "UNLOCK_DOOR",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptThree) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting HVAC to heat mode.
type ActionAttemptTwelve struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwelve) Status() string {
	return a.status
}

func (a *ActionAttemptTwelve) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwelve) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwelve
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwelve(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "SET_HEAT"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwelve) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwelve
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "SET_HEAT",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwelve) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Setting fan mode failed.
type ActionAttemptTwenty struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                    `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                   `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptTwentyError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwenty) Status() string {
	return a.status
}

func (a *ActionAttemptTwenty) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwenty) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwenty
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwenty(unmarshaler.embed)
	a.status = "error"
	a.actionType = "SET_FAN_MODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwenty) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwenty
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "SET_FAN_MODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwenty) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyEight struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyEight) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyEight) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyEight) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyEight
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyEight(unmarshaler.embed)
	a.status = "success"
	a.actionType = "CREATE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyEight) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyEight
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "CREATE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyEight) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTwentyError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTwentyError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyFive struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string      `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string     `json:"error,omitempty" url:"error,omitempty"`
	Result          interface{} `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyFive) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyFive) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyFive) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyFive
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyFive(unmarshaler.embed)
	a.status = "success"
	a.actionType = "SYNC_ACCESS_CODES"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyFive) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyFive
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "SYNC_ACCESS_CODES",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyFive) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyFour struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyFour) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyFour) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyFour) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyFour
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyFour(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "SYNC_ACCESS_CODES"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyFour) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyFour
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "SYNC_ACCESS_CODES",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyFour) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyNine struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                        `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                       `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptTwentyNineError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyNine) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyNine) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyNine) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyNine
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyNine(unmarshaler.embed)
	a.status = "error"
	a.actionType = "CREATE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyNine) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyNine
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "CREATE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyNine) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyNineError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyNineError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTwentyNineError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTwentyNineError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyNineError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Turning HVAC off.
type ActionAttemptTwentyOne struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyOne) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyOne) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyOne) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyOne
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyOne(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "SET_THERMOSTAT_OFF"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyOne) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyOne
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "SET_THERMOSTAT_OFF",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyOne) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentySeven struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentySeven) Status() string {
	return a.status
}

func (a *ActionAttemptTwentySeven) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentySeven) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentySeven
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentySeven(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "CREATE_ACCESS_CODE"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentySeven) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentySeven
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "CREATE_ACCESS_CODE",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentySeven) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentySix struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                       `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                      `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptTwentySixError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentySix) Status() string {
	return a.status
}

func (a *ActionAttemptTwentySix) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentySix) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentySix
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentySix(unmarshaler.embed)
	a.status = "error"
	a.actionType = "SYNC_ACCESS_CODES"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentySix) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentySix
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "SYNC_ACCESS_CODES",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentySix) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentySixError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentySixError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTwentySixError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTwentySixError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentySixError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Turning HVAC off failed.
type ActionAttemptTwentyThree struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                         `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                        `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptTwentyThreeError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyThree) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyThree) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyThree) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyThree
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyThree(unmarshaler.embed)
	a.status = "error"
	a.actionType = "SET_THERMOSTAT_OFF"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyThree) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyThree
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "SET_THERMOSTAT_OFF",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyThree) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyThreeError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyThreeError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTwentyThreeError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTwentyThreeError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyThreeError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Turning HVAC off succeeded.
type ActionAttemptTwentyTwo struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                        `json:"action_attempt_id" url:"action_attempt_id"`
	Error           *string                       `json:"error,omitempty" url:"error,omitempty"`
	Result          *ActionAttemptTwentyTwoResult `json:"result,omitempty" url:"result,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyTwo) Status() string {
	return a.status
}

func (a *ActionAttemptTwentyTwo) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwentyTwo) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwentyTwo
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwentyTwo(unmarshaler.embed)
	a.status = "success"
	a.actionType = "SET_THERMOSTAT_OFF"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyTwo) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwentyTwo
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "success",
		ActionType: "SET_THERMOSTAT_OFF",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwentyTwo) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwentyTwoResult struct {
	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwentyTwoResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTwentyTwoResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTwentyTwoResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwentyTwoResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Locking door failed.
type ActionAttemptTwo struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string                 `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string                `json:"result,omitempty" url:"result,omitempty"`
	Error           *ActionAttemptTwoError `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwo) Status() string {
	return a.status
}

func (a *ActionAttemptTwo) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptTwo) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptTwo
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptTwo(unmarshaler.embed)
	a.status = "error"
	a.actionType = "LOCK_DOOR"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwo) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptTwo
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "error",
		ActionType: "LOCK_DOOR",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptTwo) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ActionAttemptTwoError struct {
	Type    string `json:"type" url:"type"`
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (a *ActionAttemptTwoError) UnmarshalJSON(data []byte) error {
	type unmarshaler ActionAttemptTwoError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ActionAttemptTwoError(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptTwoError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Locking door.
type ActionAttemptZero struct {
	// ---
	// title: Action Attempt ID
	// ---
	// The ID of the action attempt.
	ActionAttemptId string  `json:"action_attempt_id" url:"action_attempt_id"`
	Result          *string `json:"result,omitempty" url:"result,omitempty"`
	Error           *string `json:"error,omitempty" url:"error,omitempty"`
	status          string
	actionType      string

	_rawJSON json.RawMessage
}

func (a *ActionAttemptZero) Status() string {
	return a.status
}

func (a *ActionAttemptZero) ActionType() string {
	return a.actionType
}

func (a *ActionAttemptZero) UnmarshalJSON(data []byte) error {
	type embed ActionAttemptZero
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = ActionAttemptZero(unmarshaler.embed)
	a.status = "pending"
	a.actionType = "LOCK_DOOR"
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ActionAttemptZero) MarshalJSON() ([]byte, error) {
	type embed ActionAttemptZero
	var marshaler = struct {
		embed
		Status     string `json:"status"`
		ActionType string `json:"action_type"`
	}{
		embed:      embed(*a),
		Status:     "pending",
		ActionType: "LOCK_DOOR",
	}
	return json.Marshal(marshaler)
}

func (a *ActionAttemptZero) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ClientSession struct {
	ClientSessionId     string    `json:"client_session_id" url:"client_session_id"`
	WorkspaceId         string    `json:"workspace_id" url:"workspace_id"`
	CreatedAt           time.Time `json:"created_at" url:"created_at"`
	Token               string    `json:"token" url:"token"`
	UserIdentifierKey   *string   `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
	DeviceCount         float64   `json:"device_count" url:"device_count"`
	ConnectedAccountIds []string  `json:"connected_account_ids,omitempty" url:"connected_account_ids,omitempty"`
	ConnectWebviewIds   []string  `json:"connect_webview_ids,omitempty" url:"connect_webview_ids,omitempty"`
	UserIdentityIds     []string  `json:"user_identity_ids,omitempty" url:"user_identity_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ClientSession) UnmarshalJSON(data []byte) error {
	type embed ClientSession
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClientSession(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSession) MarshalJSON() ([]byte, error) {
	type embed ClientSession
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ClientSession) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingSchedule struct {
	ClimateSettingScheduleId  string                                 `json:"climate_setting_schedule_id" url:"climate_setting_schedule_id"`
	DeviceId                  string                                 `json:"device_id" url:"device_id"`
	Name                      *string                                `json:"name,omitempty" url:"name,omitempty"`
	ScheduleStartsAt          string                                 `json:"schedule_starts_at" url:"schedule_starts_at"`
	ScheduleEndsAt            string                                 `json:"schedule_ends_at" url:"schedule_ends_at"`
	CreatedAt                 time.Time                              `json:"created_at" url:"created_at"`
	Errors                    interface{}                            `json:"errors,omitempty" url:"errors,omitempty"`
	AutomaticHeatingEnabled   *bool                                  `json:"automatic_heating_enabled,omitempty" url:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool                                  `json:"automatic_cooling_enabled,omitempty" url:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *ClimateSettingScheduleHvacModeSetting `json:"hvac_mode_setting,omitempty" url:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64                               `json:"cooling_set_point_celsius,omitempty" url:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64                               `json:"heating_set_point_celsius,omitempty" url:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64                               `json:"cooling_set_point_fahrenheit,omitempty" url:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64                               `json:"heating_set_point_fahrenheit,omitempty" url:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool                                  `json:"manual_override_allowed,omitempty" url:"manual_override_allowed,omitempty"`
	scheduleType              string

	_rawJSON json.RawMessage
}

func (c *ClimateSettingSchedule) ScheduleType() string {
	return c.scheduleType
}

func (c *ClimateSettingSchedule) UnmarshalJSON(data []byte) error {
	type embed ClimateSettingSchedule
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ClimateSettingSchedule(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.scheduleType = "time_bound"
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClimateSettingSchedule) MarshalJSON() ([]byte, error) {
	type embed ClimateSettingSchedule
	var marshaler = struct {
		embed
		CreatedAt    *core.DateTime `json:"created_at"`
		ScheduleType string         `json:"schedule_type"`
	}{
		embed:        embed(*c),
		CreatedAt:    core.NewDateTime(c.CreatedAt),
		ScheduleType: "time_bound",
	}
	return json.Marshal(marshaler)
}

func (c *ClimateSettingSchedule) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClimateSettingScheduleHvacModeSetting string

const (
	ClimateSettingScheduleHvacModeSettingOff      ClimateSettingScheduleHvacModeSetting = "off"
	ClimateSettingScheduleHvacModeSettingHeat     ClimateSettingScheduleHvacModeSetting = "heat"
	ClimateSettingScheduleHvacModeSettingCool     ClimateSettingScheduleHvacModeSetting = "cool"
	ClimateSettingScheduleHvacModeSettingHeatCool ClimateSettingScheduleHvacModeSetting = "heat_cool"
)

func NewClimateSettingScheduleHvacModeSettingFromString(s string) (ClimateSettingScheduleHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingScheduleHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingScheduleHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingScheduleHvacModeSettingCool, nil
	case "heat_cool":
		return ClimateSettingScheduleHvacModeSettingHeatCool, nil
	}
	var t ClimateSettingScheduleHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingScheduleHvacModeSetting) Ptr() *ClimateSettingScheduleHvacModeSetting {
	return &c
}

type ConnectWebview struct {
	ConnectWebviewId    string        `json:"connect_webview_id" url:"connect_webview_id"`
	WorkspaceId         string        `json:"workspace_id" url:"workspace_id"`
	CreatedAt           time.Time     `json:"created_at" url:"created_at"`
	ConnectedAccountId  *string       `json:"connected_account_id,omitempty" url:"connected_account_id,omitempty"`
	Url                 string        `json:"url" url:"url"`
	DeviceSelectionMode SelectionMode `json:"device_selection_mode,omitempty" url:"device_selection_mode,omitempty"`
	AcceptedProviders   []string      `json:"accepted_providers,omitempty" url:"accepted_providers,omitempty"`
	// ---
	// deprecated: Unused. Will be removed.
	// ---
	AcceptedDevices []string `json:"accepted_devices,omitempty" url:"accepted_devices,omitempty"`
	// ---
	// deprecated: Unused. Will be removed.
	// ---
	AnyDeviceAllowed              bool                                          `json:"any_device_allowed" url:"any_device_allowed"`
	AnyProviderAllowed            bool                                          `json:"any_provider_allowed" url:"any_provider_allowed"`
	LoginSuccessful               bool                                          `json:"login_successful" url:"login_successful"`
	Status                        ConnectWebviewStatus                          `json:"status,omitempty" url:"status,omitempty"`
	CustomRedirectUrl             *string                                       `json:"custom_redirect_url,omitempty" url:"custom_redirect_url,omitempty"`
	CustomRedirectFailureUrl      *string                                       `json:"custom_redirect_failure_url,omitempty" url:"custom_redirect_failure_url,omitempty"`
	CustomMetadata                map[string]*ConnectWebviewCustomMetadataValue `json:"custom_metadata,omitempty" url:"custom_metadata,omitempty"`
	AutomaticallyManageNewDevices bool                                          `json:"automatically_manage_new_devices" url:"automatically_manage_new_devices"`
	WaitForDeviceCreation         bool                                          `json:"wait_for_device_creation" url:"wait_for_device_creation"`
	AuthorizedAt                  *time.Time                                    `json:"authorized_at,omitempty" url:"authorized_at,omitempty"`
	SelectedProvider              *string                                       `json:"selected_provider,omitempty" url:"selected_provider,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConnectWebview) UnmarshalJSON(data []byte) error {
	type embed ConnectWebview
	var unmarshaler = struct {
		embed
		CreatedAt    *core.DateTime `json:"created_at"`
		AuthorizedAt *core.DateTime `json:"authorized_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConnectWebview(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.AuthorizedAt = unmarshaler.AuthorizedAt.TimePtr()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectWebview) MarshalJSON() ([]byte, error) {
	type embed ConnectWebview
	var marshaler = struct {
		embed
		CreatedAt    *core.DateTime `json:"created_at"`
		AuthorizedAt *core.DateTime `json:"authorized_at,omitempty"`
	}{
		embed:        embed(*c),
		CreatedAt:    core.NewDateTime(c.CreatedAt),
		AuthorizedAt: core.NewOptionalDateTime(c.AuthorizedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ConnectWebview) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectWebviewCustomMetadataValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewConnectWebviewCustomMetadataValueFromString(value string) *ConnectWebviewCustomMetadataValue {
	return &ConnectWebviewCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectWebviewCustomMetadataValueFromBoolean(value bool) *ConnectWebviewCustomMetadataValue {
	return &ConnectWebviewCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func (c *ConnectWebviewCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectWebviewCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "boolean":
		return json.Marshal(c.Boolean)
	}
}

type ConnectWebviewCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (c *ConnectWebviewCustomMetadataValue) Accept(visitor ConnectWebviewCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	}
}

type ConnectWebviewStatus string

const (
	ConnectWebviewStatusPending    ConnectWebviewStatus = "pending"
	ConnectWebviewStatusFailed     ConnectWebviewStatus = "failed"
	ConnectWebviewStatusAuthorized ConnectWebviewStatus = "authorized"
)

func NewConnectWebviewStatusFromString(s string) (ConnectWebviewStatus, error) {
	switch s {
	case "pending":
		return ConnectWebviewStatusPending, nil
	case "failed":
		return ConnectWebviewStatusFailed, nil
	case "authorized":
		return ConnectWebviewStatusAuthorized, nil
	}
	var t ConnectWebviewStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectWebviewStatus) Ptr() *ConnectWebviewStatus {
	return &c
}

type ConnectedAccount struct {
	ConnectedAccountId            *string                                         `json:"connected_account_id,omitempty" url:"connected_account_id,omitempty"`
	CreatedAt                     *time.Time                                      `json:"created_at,omitempty" url:"created_at,omitempty"`
	UserIdentifier                *ConnectedAccountUserIdentifier                 `json:"user_identifier,omitempty" url:"user_identifier,omitempty"`
	AccountType                   *string                                         `json:"account_type,omitempty" url:"account_type,omitempty"`
	AccountTypeDisplayName        string                                          `json:"account_type_display_name" url:"account_type_display_name"`
	Errors                        interface{}                                     `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings                      interface{}                                     `json:"warnings,omitempty" url:"warnings,omitempty"`
	CustomMetadata                map[string]*ConnectedAccountCustomMetadataValue `json:"custom_metadata,omitempty" url:"custom_metadata,omitempty"`
	AutomaticallyManageNewDevices bool                                            `json:"automatically_manage_new_devices" url:"automatically_manage_new_devices"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccount) UnmarshalJSON(data []byte) error {
	type embed ConnectedAccount
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ConnectedAccount(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccount) MarshalJSON() ([]byte, error) {
	type embed ConnectedAccount
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewOptionalDateTime(c.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ConnectedAccount) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountCustomMetadataValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewConnectedAccountCustomMetadataValueFromString(value string) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectedAccountCustomMetadataValueFromBoolean(value bool) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func (c *ConnectedAccountCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "boolean":
		return json.Marshal(c.Boolean)
	}
}

type ConnectedAccountCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (c *ConnectedAccountCustomMetadataValue) Accept(visitor ConnectedAccountCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	}
}

type ConnectedAccountUserIdentifier struct {
	Username  *string `json:"username,omitempty" url:"username,omitempty"`
	ApiUrl    *string `json:"api_url,omitempty" url:"api_url,omitempty"`
	Email     *string `json:"email,omitempty" url:"email,omitempty"`
	Phone     *string `json:"phone,omitempty" url:"phone,omitempty"`
	Exclusive *bool   `json:"exclusive,omitempty" url:"exclusive,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountUserIdentifier) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountUserIdentifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountUserIdentifier(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountUserIdentifier) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Device struct {
	// Unique identifier for the device.
	DeviceId string `json:"device_id" url:"device_id"`
	// Type of the device.
	DeviceType DeviceType `json:"device_type,omitempty" url:"device_type,omitempty"`
	// Optional nickname to describe the device, settable through Seam
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.
	DisplayName string `json:"display_name" url:"display_name"`
	// Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.
	CapabilitiesSupported []DeviceCapabilitiesSupportedItem `json:"capabilities_supported,omitempty" url:"capabilities_supported,omitempty"`
	// Properties of the device.
	Properties *DeviceProperties `json:"properties,omitempty" url:"properties,omitempty"`
	// Location information for the device.
	Location *DeviceLocation `json:"location,omitempty" url:"location,omitempty"`
	// Unique identifier for the account associated with the device.
	ConnectedAccountId string `json:"connected_account_id" url:"connected_account_id"`
	// Unique identifier for the Seam workspace associated with the device.
	WorkspaceId string `json:"workspace_id" url:"workspace_id"`
	// Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
	Errors []*DeviceErrorsItem `json:"errors,omitempty" url:"errors,omitempty"`
	// Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
	Warnings []*DeviceWarningsItem `json:"warnings,omitempty" url:"warnings,omitempty"`
	// Date and time at which the device object was created.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Indicates whether Seam manages the device.
	IsManaged                    bool                                  `json:"is_managed" url:"is_managed"`
	CustomMetadata               map[string]*DeviceCustomMetadataValue `json:"custom_metadata,omitempty" url:"custom_metadata,omitempty"`
	CanRemotelyUnlock            *bool                                 `json:"can_remotely_unlock,omitempty" url:"can_remotely_unlock,omitempty"`
	CanRemotelyLock              *bool                                 `json:"can_remotely_lock,omitempty" url:"can_remotely_lock,omitempty"`
	CanProgramOfflineAccessCodes *bool                                 `json:"can_program_offline_access_codes,omitempty" url:"can_program_offline_access_codes,omitempty"`
	CanProgramOnlineAccessCodes  *bool                                 `json:"can_program_online_access_codes,omitempty" url:"can_program_online_access_codes,omitempty"`
	CanSimulateRemoval           *bool                                 `json:"can_simulate_removal,omitempty" url:"can_simulate_removal,omitempty"`
	CanSimulateConnection        *bool                                 `json:"can_simulate_connection,omitempty" url:"can_simulate_connection,omitempty"`
	CanSimulateDisconnection     *bool                                 `json:"can_simulate_disconnection,omitempty" url:"can_simulate_disconnection,omitempty"`

	_rawJSON json.RawMessage
}

func (d *Device) UnmarshalJSON(data []byte) error {
	type embed Device
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = Device(unmarshaler.embed)
	d.CreatedAt = unmarshaler.CreatedAt.Time()
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *Device) MarshalJSON() ([]byte, error) {
	type embed Device
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*d),
		CreatedAt: core.NewDateTime(d.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *Device) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceCapabilitiesSupportedItem string

const (
	DeviceCapabilitiesSupportedItemAccessCode     DeviceCapabilitiesSupportedItem = "access_code"
	DeviceCapabilitiesSupportedItemLock           DeviceCapabilitiesSupportedItem = "lock"
	DeviceCapabilitiesSupportedItemNoiseDetection DeviceCapabilitiesSupportedItem = "noise_detection"
	DeviceCapabilitiesSupportedItemThermostat     DeviceCapabilitiesSupportedItem = "thermostat"
	DeviceCapabilitiesSupportedItemBattery        DeviceCapabilitiesSupportedItem = "battery"
	DeviceCapabilitiesSupportedItemPhone          DeviceCapabilitiesSupportedItem = "phone"
)

func NewDeviceCapabilitiesSupportedItemFromString(s string) (DeviceCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return DeviceCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return DeviceCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return DeviceCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return DeviceCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return DeviceCapabilitiesSupportedItemBattery, nil
	case "phone":
		return DeviceCapabilitiesSupportedItemPhone, nil
	}
	var t DeviceCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceCapabilitiesSupportedItem) Ptr() *DeviceCapabilitiesSupportedItem {
	return &d
}

type DeviceCustomMetadataValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewDeviceCustomMetadataValueFromString(value string) *DeviceCustomMetadataValue {
	return &DeviceCustomMetadataValue{typeName: "string", String: value}
}

func NewDeviceCustomMetadataValueFromBoolean(value bool) *DeviceCustomMetadataValue {
	return &DeviceCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func (d *DeviceCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		d.typeName = "string"
		d.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		d.typeName = "boolean"
		d.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DeviceCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch d.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "string":
		return json.Marshal(d.String)
	case "boolean":
		return json.Marshal(d.Boolean)
	}
}

type DeviceCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (d *DeviceCustomMetadataValue) Accept(visitor DeviceCustomMetadataValueVisitor) error {
	switch d.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "string":
		return visitor.VisitString(d.String)
	case "boolean":
		return visitor.VisitBoolean(d.Boolean)
	}
}

type DeviceErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (d *DeviceErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceErrorsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceErrorsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Location information for the device.
type DeviceLocation struct {
	// Name of the device location.
	LocationName *string `json:"location_name,omitempty" url:"location_name,omitempty"`
	// Time zone of the device location.
	Timezone *string `json:"timezone,omitempty" url:"timezone,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeviceLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceLocation(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceLocation) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Properties of the device.
type DeviceProperties struct {
	// Indicates whether the device is online.
	Online bool `json:"online" url:"online"`
	// ---
	// deprecated: use device.display_name instead
	// ---
	// Name of the device.
	Name string `json:"name" url:"name"`
	// Represents the accessory keypad state.
	AccessoryKeypad *DevicePropertiesAccessoryKeypad `json:"accessory_keypad,omitempty" url:"accessory_keypad,omitempty"`
	Appearance      *DevicePropertiesAppearance      `json:"appearance,omitempty" url:"appearance,omitempty"`
	Model           *DevicePropertiesModel           `json:"model,omitempty" url:"model,omitempty"`
	// Indicates whether the device has direct power.
	HasDirectPower *bool `json:"has_direct_power,omitempty" url:"has_direct_power,omitempty"`
	// Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.
	BatteryLevel *float64 `json:"battery_level,omitempty" url:"battery_level,omitempty"`
	// Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.
	Battery *DevicePropertiesBattery `json:"battery,omitempty" url:"battery,omitempty"`
	// Manufacturer of the device.
	Manufacturer *string `json:"manufacturer,omitempty" url:"manufacturer,omitempty"`
	// Image URL for the device.
	ImageUrl *string `json:"image_url,omitempty" url:"image_url,omitempty"`
	// Alt text for the device image.
	ImageAltText *string `json:"image_alt_text,omitempty" url:"image_alt_text,omitempty"`
	// Serial number of the device.
	SerialNumber *string `json:"serial_number,omitempty" url:"serial_number,omitempty"`
	// Indicates whether it is currently possible to use online access codes for the device.
	OnlineAccessCodesEnabled *bool `json:"online_access_codes_enabled,omitempty" url:"online_access_codes_enabled,omitempty"`
	// Indicates whether it is currently possible to use offline access codes for the device.
	OfflineAccessCodesEnabled *bool `json:"offline_access_codes_enabled,omitempty" url:"offline_access_codes_enabled,omitempty"`
	// ---
	// deprecated: use device.properties.model.can_connect_accessory_keypad
	// ---
	SupportsAccessoryKeypad *bool `json:"supports_accessory_keypad,omitempty" url:"supports_accessory_keypad,omitempty"`
	// ---
	// deprecated: use offline_access_codes_enabled
	// ---
	SupportsOfflineAccessCodes *bool `json:"supports_offline_access_codes,omitempty" url:"supports_offline_access_codes,omitempty"`
	// Indicates current noise level in decibels, if the device supports noise detection.
	NoiseLevelDecibels *float64 `json:"noise_level_decibels,omitempty" url:"noise_level_decibels,omitempty"`
	// Array of noise threshold IDs that are currently triggering.
	CurrentlyTriggeringNoiseThresholdIds            []string                                            `json:"currently_triggering_noise_threshold_ids,omitempty" url:"currently_triggering_noise_threshold_ids,omitempty"`
	AssaAbloyCredentialServiceMetadata              *DevicePropertiesAssaAbloyCredentialServiceMetadata `json:"assa_abloy_credential_service_metadata,omitempty" url:"assa_abloy_credential_service_metadata,omitempty"`
	AugustMetadata                                  *DevicePropertiesAugustMetadata                     `json:"august_metadata,omitempty" url:"august_metadata,omitempty"`
	AvigilonAltaMetadata                            *DevicePropertiesAvigilonAltaMetadata               `json:"avigilon_alta_metadata,omitempty" url:"avigilon_alta_metadata,omitempty"`
	SchlageMetadata                                 *DevicePropertiesSchlageMetadata                    `json:"schlage_metadata,omitempty" url:"schlage_metadata,omitempty"`
	SmartthingsMetadata                             *DevicePropertiesSmartthingsMetadata                `json:"smartthings_metadata,omitempty" url:"smartthings_metadata,omitempty"`
	LocklyMetadata                                  *DevicePropertiesLocklyMetadata                     `json:"lockly_metadata,omitempty" url:"lockly_metadata,omitempty"`
	NukiMetadata                                    *DevicePropertiesNukiMetadata                       `json:"nuki_metadata,omitempty" url:"nuki_metadata,omitempty"`
	KwiksetMetadata                                 *DevicePropertiesKwiksetMetadata                    `json:"kwikset_metadata,omitempty" url:"kwikset_metadata,omitempty"`
	SaltoMetadata                                   *DevicePropertiesSaltoMetadata                      `json:"salto_metadata,omitempty" url:"salto_metadata,omitempty"`
	GenieMetadata                                   *DevicePropertiesGenieMetadata                      `json:"genie_metadata,omitempty" url:"genie_metadata,omitempty"`
	BrivoMetadata                                   *DevicePropertiesBrivoMetadata                      `json:"brivo_metadata,omitempty" url:"brivo_metadata,omitempty"`
	IglooMetadata                                   *DevicePropertiesIglooMetadata                      `json:"igloo_metadata,omitempty" url:"igloo_metadata,omitempty"`
	NoiseawareMetadata                              *DevicePropertiesNoiseawareMetadata                 `json:"noiseaware_metadata,omitempty" url:"noiseaware_metadata,omitempty"`
	MinutMetadata                                   *DevicePropertiesMinutMetadata                      `json:"minut_metadata,omitempty" url:"minut_metadata,omitempty"`
	FourSuitesMetadata                              *DevicePropertiesFourSuitesMetadata                 `json:"four_suites_metadata,omitempty" url:"four_suites_metadata,omitempty"`
	TwoNMetadata                                    *DevicePropertiesTwoNMetadata                       `json:"two_n_metadata,omitempty" url:"two_n_metadata,omitempty"`
	ControlbywebMetadata                            *DevicePropertiesControlbywebMetadata               `json:"controlbyweb_metadata,omitempty" url:"controlbyweb_metadata,omitempty"`
	TtlockMetadata                                  *DevicePropertiesTtlockMetadata                     `json:"ttlock_metadata,omitempty" url:"ttlock_metadata,omitempty"`
	SeamBridgeMetadata                              *DevicePropertiesSeamBridgeMetadata                 `json:"seam_bridge_metadata,omitempty" url:"seam_bridge_metadata,omitempty"`
	IgloohomeMetadata                               *DevicePropertiesIgloohomeMetadata                  `json:"igloohome_metadata,omitempty" url:"igloohome_metadata,omitempty"`
	NestMetadata                                    *DevicePropertiesNestMetadata                       `json:"nest_metadata,omitempty" url:"nest_metadata,omitempty"`
	EcobeeMetadata                                  *DevicePropertiesEcobeeMetadata                     `json:"ecobee_metadata,omitempty" url:"ecobee_metadata,omitempty"`
	HoneywellResideoMetadata                        *DevicePropertiesHoneywellResideoMetadata           `json:"honeywell_resideo_metadata,omitempty" url:"honeywell_resideo_metadata,omitempty"`
	HubitatMetadata                                 *DevicePropertiesHubitatMetadata                    `json:"hubitat_metadata,omitempty" url:"hubitat_metadata,omitempty"`
	DormakabaOracodeMetadata                        *DevicePropertiesDormakabaOracodeMetadata           `json:"dormakaba_oracode_metadata,omitempty" url:"dormakaba_oracode_metadata,omitempty"`
	WyzeMetadata                                    *DevicePropertiesWyzeMetadata                       `json:"wyze_metadata,omitempty" url:"wyze_metadata,omitempty"`
	TedeeMetadata                                   *DevicePropertiesTedeeMetadata                      `json:"tedee_metadata,omitempty" url:"tedee_metadata,omitempty"`
	ExperimentalSupportedCodeFromAccessCodesLengths []float64                                           `json:"_experimental_supported_code_from_access_codes_lengths,omitempty" url:"_experimental_supported_code_from_access_codes_lengths,omitempty"`
	CodeConstraints                                 []*DevicePropertiesCodeConstraintsItem              `json:"code_constraints,omitempty" url:"code_constraints,omitempty"`
	SupportedCodeLengths                            []float64                                           `json:"supported_code_lengths,omitempty" url:"supported_code_lengths,omitempty"`
	MaxActiveCodesSupported                         *float64                                            `json:"max_active_codes_supported,omitempty" url:"max_active_codes_supported,omitempty"`
	SupportsBackupAccessCodePool                    *bool                                               `json:"supports_backup_access_code_pool,omitempty" url:"supports_backup_access_code_pool,omitempty"`
	HasNativeEntryEvents                            *bool                                               `json:"has_native_entry_events,omitempty" url:"has_native_entry_events,omitempty"`
	Locked                                          *bool                                               `json:"locked,omitempty" url:"locked,omitempty"`
	KeypadBattery                                   *DevicePropertiesKeypadBattery                      `json:"keypad_battery,omitempty" url:"keypad_battery,omitempty"`
	DoorOpen                                        *bool                                               `json:"door_open,omitempty" url:"door_open,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeviceProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceProperties(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceProperties) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Represents the accessory keypad state.
type DevicePropertiesAccessoryKeypad struct {
	// Indicates if the accessory_keypad is connected to the device.
	IsConnected bool `json:"is_connected" url:"is_connected"`
	// Indicates if the keypad battery properties.
	Battery *DevicePropertiesAccessoryKeypadBattery `json:"battery,omitempty" url:"battery,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAccessoryKeypad) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAccessoryKeypad
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAccessoryKeypad(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAccessoryKeypad) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Indicates if the keypad battery properties.
type DevicePropertiesAccessoryKeypadBattery struct {
	Level float64 `json:"level" url:"level"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAccessoryKeypadBattery) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAccessoryKeypadBattery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAccessoryKeypadBattery(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAccessoryKeypadBattery) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAppearance struct {
	// Name of the device as seen from the provider API and application, not settable through Seam.
	Name string `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAppearance) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAppearance
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAppearance(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAppearance) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAssaAbloyCredentialServiceMetadata struct {
	HasActiveEndpoint bool                                                               `json:"has_active_endpoint" url:"has_active_endpoint"`
	Endpoints         []*DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem `json:"endpoints,omitempty" url:"endpoints,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAssaAbloyCredentialServiceMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAssaAbloyCredentialServiceMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem struct {
	EndpointId string `json:"endpoint_id" url:"endpoint_id"`
	IsActive   bool   `json:"is_active" url:"is_active"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAugustMetadata struct {
	LockId             string  `json:"lock_id" url:"lock_id"`
	LockName           string  `json:"lock_name" url:"lock_name"`
	HouseName          string  `json:"house_name" url:"house_name"`
	HasKeypad          bool    `json:"has_keypad" url:"has_keypad"`
	KeypadBatteryLevel *string `json:"keypad_battery_level,omitempty" url:"keypad_battery_level,omitempty"`
	Model              *string `json:"model,omitempty" url:"model,omitempty"`
	HouseId            *string `json:"house_id,omitempty" url:"house_id,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAugustMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAugustMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAugustMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAugustMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesAvigilonAltaMetadata struct {
	EntryName             string  `json:"entry_name" url:"entry_name"`
	OrgName               string  `json:"org_name" url:"org_name"`
	ZoneId                float64 `json:"zone_id" url:"zone_id"`
	ZoneName              string  `json:"zone_name" url:"zone_name"`
	SiteId                float64 `json:"site_id" url:"site_id"`
	SiteName              string  `json:"site_name" url:"site_name"`
	EntryRelaysTotalCount float64 `json:"entry_relays_total_count" url:"entry_relays_total_count"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesAvigilonAltaMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesAvigilonAltaMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesAvigilonAltaMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesAvigilonAltaMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.
type DevicePropertiesBattery struct {
	Level  float64                       `json:"level" url:"level"`
	Status DevicePropertiesBatteryStatus `json:"status,omitempty" url:"status,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesBattery) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesBattery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesBattery(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesBattery) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesBatteryStatus string

const (
	DevicePropertiesBatteryStatusCritical DevicePropertiesBatteryStatus = "critical"
	DevicePropertiesBatteryStatusLow      DevicePropertiesBatteryStatus = "low"
	DevicePropertiesBatteryStatusGood     DevicePropertiesBatteryStatus = "good"
	DevicePropertiesBatteryStatusFull     DevicePropertiesBatteryStatus = "full"
)

func NewDevicePropertiesBatteryStatusFromString(s string) (DevicePropertiesBatteryStatus, error) {
	switch s {
	case "critical":
		return DevicePropertiesBatteryStatusCritical, nil
	case "low":
		return DevicePropertiesBatteryStatusLow, nil
	case "good":
		return DevicePropertiesBatteryStatusGood, nil
	case "full":
		return DevicePropertiesBatteryStatusFull, nil
	}
	var t DevicePropertiesBatteryStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicePropertiesBatteryStatus) Ptr() *DevicePropertiesBatteryStatus {
	return &d
}

type DevicePropertiesBrivoMetadata struct {
	DeviceName string `json:"device_name" url:"device_name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesBrivoMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesBrivoMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesBrivoMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesBrivoMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesCodeConstraintsItem struct {
	typeName                                     string
	DevicePropertiesCodeConstraintsItemZero      *DevicePropertiesCodeConstraintsItemZero
	DevicePropertiesCodeConstraintsItemMaxLength *DevicePropertiesCodeConstraintsItemMaxLength
}

func NewDevicePropertiesCodeConstraintsItemFromDevicePropertiesCodeConstraintsItemZero(value *DevicePropertiesCodeConstraintsItemZero) *DevicePropertiesCodeConstraintsItem {
	return &DevicePropertiesCodeConstraintsItem{typeName: "devicePropertiesCodeConstraintsItemZero", DevicePropertiesCodeConstraintsItemZero: value}
}

func NewDevicePropertiesCodeConstraintsItemFromDevicePropertiesCodeConstraintsItemMaxLength(value *DevicePropertiesCodeConstraintsItemMaxLength) *DevicePropertiesCodeConstraintsItem {
	return &DevicePropertiesCodeConstraintsItem{typeName: "devicePropertiesCodeConstraintsItemMaxLength", DevicePropertiesCodeConstraintsItemMaxLength: value}
}

func (d *DevicePropertiesCodeConstraintsItem) UnmarshalJSON(data []byte) error {
	valueDevicePropertiesCodeConstraintsItemZero := new(DevicePropertiesCodeConstraintsItemZero)
	if err := json.Unmarshal(data, &valueDevicePropertiesCodeConstraintsItemZero); err == nil {
		d.typeName = "devicePropertiesCodeConstraintsItemZero"
		d.DevicePropertiesCodeConstraintsItemZero = valueDevicePropertiesCodeConstraintsItemZero
		return nil
	}
	valueDevicePropertiesCodeConstraintsItemMaxLength := new(DevicePropertiesCodeConstraintsItemMaxLength)
	if err := json.Unmarshal(data, &valueDevicePropertiesCodeConstraintsItemMaxLength); err == nil {
		d.typeName = "devicePropertiesCodeConstraintsItemMaxLength"
		d.DevicePropertiesCodeConstraintsItemMaxLength = valueDevicePropertiesCodeConstraintsItemMaxLength
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DevicePropertiesCodeConstraintsItem) MarshalJSON() ([]byte, error) {
	switch d.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicePropertiesCodeConstraintsItemZero":
		return json.Marshal(d.DevicePropertiesCodeConstraintsItemZero)
	case "devicePropertiesCodeConstraintsItemMaxLength":
		return json.Marshal(d.DevicePropertiesCodeConstraintsItemMaxLength)
	}
}

type DevicePropertiesCodeConstraintsItemVisitor interface {
	VisitDevicePropertiesCodeConstraintsItemZero(*DevicePropertiesCodeConstraintsItemZero) error
	VisitDevicePropertiesCodeConstraintsItemMaxLength(*DevicePropertiesCodeConstraintsItemMaxLength) error
}

func (d *DevicePropertiesCodeConstraintsItem) Accept(visitor DevicePropertiesCodeConstraintsItemVisitor) error {
	switch d.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicePropertiesCodeConstraintsItemZero":
		return visitor.VisitDevicePropertiesCodeConstraintsItemZero(d.DevicePropertiesCodeConstraintsItemZero)
	case "devicePropertiesCodeConstraintsItemMaxLength":
		return visitor.VisitDevicePropertiesCodeConstraintsItemMaxLength(d.DevicePropertiesCodeConstraintsItemMaxLength)
	}
}

type DevicePropertiesCodeConstraintsItemMaxLength struct {
	ConstraintType DevicePropertiesCodeConstraintsItemMaxLengthConstraintType `json:"constraint_type,omitempty" url:"constraint_type,omitempty"`
	MinLength      *float64                                                   `json:"min_length,omitempty" url:"min_length,omitempty"`
	MaxLength      *float64                                                   `json:"max_length,omitempty" url:"max_length,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesCodeConstraintsItemMaxLength) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesCodeConstraintsItemMaxLength
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesCodeConstraintsItemMaxLength(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesCodeConstraintsItemMaxLength) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesCodeConstraintsItemMaxLengthConstraintType string

const (
	DevicePropertiesCodeConstraintsItemMaxLengthConstraintTypeNameLength       DevicePropertiesCodeConstraintsItemMaxLengthConstraintType = "name_length"
	DevicePropertiesCodeConstraintsItemMaxLengthConstraintTypeNameMustBeUnique DevicePropertiesCodeConstraintsItemMaxLengthConstraintType = "name_must_be_unique"
)

func NewDevicePropertiesCodeConstraintsItemMaxLengthConstraintTypeFromString(s string) (DevicePropertiesCodeConstraintsItemMaxLengthConstraintType, error) {
	switch s {
	case "name_length":
		return DevicePropertiesCodeConstraintsItemMaxLengthConstraintTypeNameLength, nil
	case "name_must_be_unique":
		return DevicePropertiesCodeConstraintsItemMaxLengthConstraintTypeNameMustBeUnique, nil
	}
	var t DevicePropertiesCodeConstraintsItemMaxLengthConstraintType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicePropertiesCodeConstraintsItemMaxLengthConstraintType) Ptr() *DevicePropertiesCodeConstraintsItemMaxLengthConstraintType {
	return &d
}

type DevicePropertiesCodeConstraintsItemZero struct {
	ConstraintType DevicePropertiesCodeConstraintsItemZeroConstraintType `json:"constraint_type,omitempty" url:"constraint_type,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesCodeConstraintsItemZero) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesCodeConstraintsItemZero
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesCodeConstraintsItemZero(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesCodeConstraintsItemZero) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesCodeConstraintsItemZeroConstraintType string

const (
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeNoZeros                         DevicePropertiesCodeConstraintsItemZeroConstraintType = "no_zeros"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeCannotStartWith12               DevicePropertiesCodeConstraintsItemZeroConstraintType = "cannot_start_with_12"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeNoTripleConsecutiveInts         DevicePropertiesCodeConstraintsItemZeroConstraintType = "no_triple_consecutive_ints"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeCannotSpecifyPinCode            DevicePropertiesCodeConstraintsItemZeroConstraintType = "cannot_specify_pin_code"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypePinCodeMatchesExistingSet       DevicePropertiesCodeConstraintsItemZeroConstraintType = "pin_code_matches_existing_set"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeStartDateInFuture               DevicePropertiesCodeConstraintsItemZeroConstraintType = "start_date_in_future"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeNoAscendingOrDescendingSequence DevicePropertiesCodeConstraintsItemZeroConstraintType = "no_ascending_or_descending_sequence"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeAtLeastThreeUniqueDigits        DevicePropertiesCodeConstraintsItemZeroConstraintType = "at_least_three_unique_digits"
	DevicePropertiesCodeConstraintsItemZeroConstraintTypeCannotContain089                DevicePropertiesCodeConstraintsItemZeroConstraintType = "cannot_contain_089"
)

func NewDevicePropertiesCodeConstraintsItemZeroConstraintTypeFromString(s string) (DevicePropertiesCodeConstraintsItemZeroConstraintType, error) {
	switch s {
	case "no_zeros":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeNoZeros, nil
	case "cannot_start_with_12":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeCannotStartWith12, nil
	case "no_triple_consecutive_ints":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeNoTripleConsecutiveInts, nil
	case "cannot_specify_pin_code":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeCannotSpecifyPinCode, nil
	case "pin_code_matches_existing_set":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypePinCodeMatchesExistingSet, nil
	case "start_date_in_future":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeStartDateInFuture, nil
	case "no_ascending_or_descending_sequence":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeNoAscendingOrDescendingSequence, nil
	case "at_least_three_unique_digits":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeAtLeastThreeUniqueDigits, nil
	case "cannot_contain_089":
		return DevicePropertiesCodeConstraintsItemZeroConstraintTypeCannotContain089, nil
	}
	var t DevicePropertiesCodeConstraintsItemZeroConstraintType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicePropertiesCodeConstraintsItemZeroConstraintType) Ptr() *DevicePropertiesCodeConstraintsItemZeroConstraintType {
	return &d
}

type DevicePropertiesControlbywebMetadata struct {
	DeviceId   string  `json:"device_id" url:"device_id"`
	DeviceName string  `json:"device_name" url:"device_name"`
	RelayName  *string `json:"relay_name,omitempty" url:"relay_name,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesControlbywebMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesControlbywebMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesControlbywebMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesControlbywebMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesDormakabaOracodeMetadata struct {
	DoorId              float64                                                            `json:"door_id" url:"door_id"`
	DoorName            string                                                             `json:"door_name" url:"door_name"`
	DeviceId            *float64                                                           `json:"device_id,omitempty" url:"device_id,omitempty"`
	DoorIsWireless      bool                                                               `json:"door_is_wireless" url:"door_is_wireless"`
	SiteId              float64                                                            `json:"site_id" url:"site_id"`
	SiteName            string                                                             `json:"site_name" url:"site_name"`
	IanaTimezone        *string                                                            `json:"iana_timezone,omitempty" url:"iana_timezone,omitempty"`
	PredefinedTimeSlots []*DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem `json:"predefined_time_slots,omitempty" url:"predefined_time_slots,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesDormakabaOracodeMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesDormakabaOracodeMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesDormakabaOracodeMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesDormakabaOracodeMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem struct {
	Name                               string  `json:"name" url:"name"`
	Prefix                             float64 `json:"prefix" url:"prefix"`
	CheckInTime                        string  `json:"check_in_time" url:"check_in_time"`
	CheckOutTime                       string  `json:"check_out_time" url:"check_out_time"`
	Is24Hour                           bool    `json:"is_24_hour" url:"is_24_hour"`
	IsBiweeklyMode                     bool    `json:"is_biweekly_mode" url:"is_biweekly_mode"`
	IsOneShot                          bool    `json:"is_one_shot" url:"is_one_shot"`
	IsMaster                           bool    `json:"is_master" url:"is_master"`
	ExtDormakabaOracodeUserLevelPrefix float64 `json:"ext_dormakaba_oracode_user_level_prefix" url:"ext_dormakaba_oracode_user_level_prefix"`
	DormakabaOracodeUserLevelId        string  `json:"dormakaba_oracode_user_level_id" url:"dormakaba_oracode_user_level_id"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesDormakabaOracodeMetadataPredefinedTimeSlotsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesEcobeeMetadata struct {
	EcobeeDeviceId string `json:"ecobee_device_id" url:"ecobee_device_id"`
	DeviceName     string `json:"device_name" url:"device_name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesEcobeeMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesEcobeeMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesEcobeeMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesEcobeeMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesFourSuitesMetadata struct {
	DeviceId              float64 `json:"device_id" url:"device_id"`
	DeviceName            string  `json:"device_name" url:"device_name"`
	RecloseDelayInSeconds float64 `json:"reclose_delay_in_seconds" url:"reclose_delay_in_seconds"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesFourSuitesMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesFourSuitesMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesFourSuitesMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesFourSuitesMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesGenieMetadata struct {
	DeviceName string `json:"device_name" url:"device_name"`
	DoorName   string `json:"door_name" url:"door_name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesGenieMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesGenieMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesGenieMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesGenieMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesHoneywellResideoMetadata struct {
	HoneywellResideoDeviceId string `json:"honeywell_resideo_device_id" url:"honeywell_resideo_device_id"`
	DeviceName               string `json:"device_name" url:"device_name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesHoneywellResideoMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesHoneywellResideoMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesHoneywellResideoMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesHoneywellResideoMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesHubitatMetadata struct {
	DeviceId    string `json:"device_id" url:"device_id"`
	DeviceName  string `json:"device_name" url:"device_name"`
	DeviceLabel string `json:"device_label" url:"device_label"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesHubitatMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesHubitatMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesHubitatMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesHubitatMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesIglooMetadata struct {
	DeviceId string  `json:"device_id" url:"device_id"`
	BridgeId string  `json:"bridge_id" url:"bridge_id"`
	Model    *string `json:"model,omitempty" url:"model,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesIglooMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesIglooMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesIglooMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesIglooMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesIgloohomeMetadata struct {
	DeviceId   string  `json:"device_id" url:"device_id"`
	DeviceName string  `json:"device_name" url:"device_name"`
	BridgeId   *string `json:"bridge_id,omitempty" url:"bridge_id,omitempty"`
	BridgeName *string `json:"bridge_name,omitempty" url:"bridge_name,omitempty"`
	KeypadId   *string `json:"keypad_id,omitempty" url:"keypad_id,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesIgloohomeMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesIgloohomeMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesIgloohomeMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesIgloohomeMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesKeypadBattery struct {
	Level float64 `json:"level" url:"level"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesKeypadBattery) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesKeypadBattery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesKeypadBattery(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesKeypadBattery) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesKwiksetMetadata struct {
	DeviceId    string `json:"device_id" url:"device_id"`
	DeviceName  string `json:"device_name" url:"device_name"`
	ModelNumber string `json:"model_number" url:"model_number"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesKwiksetMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesKwiksetMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesKwiksetMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesKwiksetMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesLocklyMetadata struct {
	DeviceId   string  `json:"device_id" url:"device_id"`
	DeviceName string  `json:"device_name" url:"device_name"`
	Model      *string `json:"model,omitempty" url:"model,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesLocklyMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesLocklyMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesLocklyMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesLocklyMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadata struct {
	DeviceId           string                                           `json:"device_id" url:"device_id"`
	DeviceName         string                                           `json:"device_name" url:"device_name"`
	LatestSensorValues *DevicePropertiesMinutMetadataLatestSensorValues `json:"latest_sensor_values,omitempty" url:"latest_sensor_values,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadataLatestSensorValues struct {
	Temperature    *DevicePropertiesMinutMetadataLatestSensorValuesTemperature    `json:"temperature,omitempty" url:"temperature,omitempty"`
	Sound          *DevicePropertiesMinutMetadataLatestSensorValuesSound          `json:"sound,omitempty" url:"sound,omitempty"`
	Humidity       *DevicePropertiesMinutMetadataLatestSensorValuesHumidity       `json:"humidity,omitempty" url:"humidity,omitempty"`
	Pressure       *DevicePropertiesMinutMetadataLatestSensorValuesPressure       `json:"pressure,omitempty" url:"pressure,omitempty"`
	AccelerometerZ *DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ `json:"accelerometer_z,omitempty" url:"accelerometer_z,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadataLatestSensorValues) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadataLatestSensorValues
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadataLatestSensorValues(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadataLatestSensorValues) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ struct {
	Time  string  `json:"time" url:"time"`
	Value float64 `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesAccelerometerZ) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadataLatestSensorValuesHumidity struct {
	Time  string  `json:"time" url:"time"`
	Value float64 `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesHumidity) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadataLatestSensorValuesHumidity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadataLatestSensorValuesHumidity(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesHumidity) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadataLatestSensorValuesPressure struct {
	Time  string  `json:"time" url:"time"`
	Value float64 `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesPressure) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadataLatestSensorValuesPressure
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadataLatestSensorValuesPressure(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesPressure) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadataLatestSensorValuesSound struct {
	Time  string  `json:"time" url:"time"`
	Value float64 `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesSound) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadataLatestSensorValuesSound
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadataLatestSensorValuesSound(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesSound) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesMinutMetadataLatestSensorValuesTemperature struct {
	Time  string  `json:"time" url:"time"`
	Value float64 `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesTemperature) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesMinutMetadataLatestSensorValuesTemperature
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesMinutMetadataLatestSensorValuesTemperature(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesMinutMetadataLatestSensorValuesTemperature) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesModel struct {
	// Indicates whether the device can connect a accessory keypad.
	CanConnectAccessoryKeypad *bool `json:"can_connect_accessory_keypad,omitempty" url:"can_connect_accessory_keypad,omitempty"`
	// Display name of the device model.
	DisplayName string `json:"display_name" url:"display_name"`
	// Display name that corresponds to the manufacturer-specific terminology for the device.
	ManufacturerDisplayName string `json:"manufacturer_display_name" url:"manufacturer_display_name"`
	// Indicates whether the device has a built in accessory keypad.
	HasBuiltInKeypad *bool `json:"has_built_in_keypad,omitempty" url:"has_built_in_keypad,omitempty"`
	// Indicates whether the device supports offline access codes.
	OfflineAccessCodesSupported *bool `json:"offline_access_codes_supported,omitempty" url:"offline_access_codes_supported,omitempty"`
	// Indicates whether the device supports online access codes.
	OnlineAccessCodesSupported *bool `json:"online_access_codes_supported,omitempty" url:"online_access_codes_supported,omitempty"`
	// ---
	// deprecated: use device.properties.model.can_connect_accessory_keypad
	// ---
	AccessoryKeypadSupported *bool `json:"accessory_keypad_supported,omitempty" url:"accessory_keypad_supported,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesModel) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesModel(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesModel) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesNestMetadata struct {
	NestDeviceId string `json:"nest_device_id" url:"nest_device_id"`
	DeviceName   string `json:"device_name" url:"device_name"`
	CustomName   string `json:"custom_name" url:"custom_name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesNestMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesNestMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesNestMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesNestMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesNoiseawareMetadata struct {
	DeviceModel       DevicePropertiesNoiseawareMetadataDeviceModel `json:"device_model,omitempty" url:"device_model,omitempty"`
	NoiseLevelNrs     float64                                       `json:"noise_level_nrs" url:"noise_level_nrs"`
	NoiseLevelDecibel float64                                       `json:"noise_level_decibel" url:"noise_level_decibel"`
	DeviceName        string                                        `json:"device_name" url:"device_name"`
	DeviceId          string                                        `json:"device_id" url:"device_id"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesNoiseawareMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesNoiseawareMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesNoiseawareMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesNoiseawareMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesNoiseawareMetadataDeviceModel string

const (
	DevicePropertiesNoiseawareMetadataDeviceModelIndoor  DevicePropertiesNoiseawareMetadataDeviceModel = "indoor"
	DevicePropertiesNoiseawareMetadataDeviceModelOutdoor DevicePropertiesNoiseawareMetadataDeviceModel = "outdoor"
)

func NewDevicePropertiesNoiseawareMetadataDeviceModelFromString(s string) (DevicePropertiesNoiseawareMetadataDeviceModel, error) {
	switch s {
	case "indoor":
		return DevicePropertiesNoiseawareMetadataDeviceModelIndoor, nil
	case "outdoor":
		return DevicePropertiesNoiseawareMetadataDeviceModelOutdoor, nil
	}
	var t DevicePropertiesNoiseawareMetadataDeviceModel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicePropertiesNoiseawareMetadataDeviceModel) Ptr() *DevicePropertiesNoiseawareMetadataDeviceModel {
	return &d
}

type DevicePropertiesNukiMetadata struct {
	DeviceId              string `json:"device_id" url:"device_id"`
	DeviceName            string `json:"device_name" url:"device_name"`
	KeypadBatteryCritical *bool  `json:"keypad_battery_critical,omitempty" url:"keypad_battery_critical,omitempty"`
	KeypadPaired          *bool  `json:"keypad_paired,omitempty" url:"keypad_paired,omitempty"`
	Keypad2Paired         *bool  `json:"keypad_2_paired,omitempty" url:"keypad_2_paired,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesNukiMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesNukiMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesNukiMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesNukiMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesSaltoMetadata struct {
	LockId            string  `json:"lock_id" url:"lock_id"`
	CustomerReference string  `json:"customer_reference" url:"customer_reference"`
	LockType          string  `json:"lock_type" url:"lock_type"`
	BatteryLevel      string  `json:"battery_level" url:"battery_level"`
	LockedState       string  `json:"locked_state" url:"locked_state"`
	Model             *string `json:"model,omitempty" url:"model,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesSaltoMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesSaltoMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesSaltoMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesSaltoMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesSchlageMetadata struct {
	DeviceId         string   `json:"device_id" url:"device_id"`
	DeviceName       string   `json:"device_name" url:"device_name"`
	AccessCodeLength *float64 `json:"access_code_length,omitempty" url:"access_code_length,omitempty"`
	Model            *string  `json:"model,omitempty" url:"model,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesSchlageMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesSchlageMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesSchlageMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesSchlageMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesSeamBridgeMetadata struct {
	UnlockMethod *DevicePropertiesSeamBridgeMetadataUnlockMethod `json:"unlock_method,omitempty" url:"unlock_method,omitempty"`
	DeviceNum    float64                                         `json:"device_num" url:"device_num"`
	Name         string                                          `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesSeamBridgeMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesSeamBridgeMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesSeamBridgeMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesSeamBridgeMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesSeamBridgeMetadataUnlockMethod string

const (
	DevicePropertiesSeamBridgeMetadataUnlockMethodBridge   DevicePropertiesSeamBridgeMetadataUnlockMethod = "bridge"
	DevicePropertiesSeamBridgeMetadataUnlockMethodDoorking DevicePropertiesSeamBridgeMetadataUnlockMethod = "doorking"
)

func NewDevicePropertiesSeamBridgeMetadataUnlockMethodFromString(s string) (DevicePropertiesSeamBridgeMetadataUnlockMethod, error) {
	switch s {
	case "bridge":
		return DevicePropertiesSeamBridgeMetadataUnlockMethodBridge, nil
	case "doorking":
		return DevicePropertiesSeamBridgeMetadataUnlockMethodDoorking, nil
	}
	var t DevicePropertiesSeamBridgeMetadataUnlockMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicePropertiesSeamBridgeMetadataUnlockMethod) Ptr() *DevicePropertiesSeamBridgeMetadataUnlockMethod {
	return &d
}

type DevicePropertiesSmartthingsMetadata struct {
	DeviceId   string  `json:"device_id" url:"device_id"`
	DeviceName string  `json:"device_name" url:"device_name"`
	Model      *string `json:"model,omitempty" url:"model,omitempty"`
	LocationId *string `json:"location_id,omitempty" url:"location_id,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesSmartthingsMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesSmartthingsMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesSmartthingsMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesSmartthingsMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesTedeeMetadata struct {
	DeviceId     float64  `json:"device_id" url:"device_id"`
	SerialNumber string   `json:"serial_number" url:"serial_number"`
	DeviceName   string   `json:"device_name" url:"device_name"`
	DeviceModel  string   `json:"device_model" url:"device_model"`
	BridgeId     float64  `json:"bridge_id" url:"bridge_id"`
	BridgeName   string   `json:"bridge_name" url:"bridge_name"`
	KeypadId     *float64 `json:"keypad_id,omitempty" url:"keypad_id,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesTedeeMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesTedeeMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesTedeeMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesTedeeMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesTtlockMetadata struct {
	LockId       float64 `json:"lock_id" url:"lock_id"`
	LockAlias    string  `json:"lock_alias" url:"lock_alias"`
	FeatureValue string  `json:"feature_value" url:"feature_value"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesTtlockMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesTtlockMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesTtlockMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesTtlockMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesTwoNMetadata struct {
	DeviceId   float64 `json:"device_id" url:"device_id"`
	DeviceName string  `json:"device_name" url:"device_name"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesTwoNMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesTwoNMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesTwoNMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesTwoNMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicePropertiesWyzeMetadata struct {
	DeviceId             string   `json:"device_id" url:"device_id"`
	DeviceName           string   `json:"device_name" url:"device_name"`
	ProductName          string   `json:"product_name" url:"product_name"`
	ProductType          string   `json:"product_type" url:"product_type"`
	ProductModel         string   `json:"product_model" url:"product_model"`
	DeviceInfoModel      string   `json:"device_info_model" url:"device_info_model"`
	KeypadUuid           *string  `json:"keypad_uuid,omitempty" url:"keypad_uuid,omitempty"`
	LockerStatusHardlock *float64 `json:"locker_status_hardlock,omitempty" url:"locker_status_hardlock,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicePropertiesWyzeMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicePropertiesWyzeMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicePropertiesWyzeMetadata(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicePropertiesWyzeMetadata) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceProvider struct {
	DeviceProviderName DeviceProviderDeviceProviderName       `json:"device_provider_name,omitempty" url:"device_provider_name,omitempty"`
	DisplayName        string                                 `json:"display_name" url:"display_name"`
	ImageUrl           string                                 `json:"image_url" url:"image_url"`
	ProviderCategories []DeviceProviderProviderCategoriesItem `json:"provider_categories,omitempty" url:"provider_categories,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeviceProvider) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceProvider
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceProvider(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceProvider) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeviceProviderDeviceProviderName string

const (
	DeviceProviderDeviceProviderNameAkuvox                     DeviceProviderDeviceProviderName = "akuvox"
	DeviceProviderDeviceProviderNameAugust                     DeviceProviderDeviceProviderName = "august"
	DeviceProviderDeviceProviderNameAvigilonAlta               DeviceProviderDeviceProviderName = "avigilon_alta"
	DeviceProviderDeviceProviderNameBrivo                      DeviceProviderDeviceProviderName = "brivo"
	DeviceProviderDeviceProviderNameButterflymx                DeviceProviderDeviceProviderName = "butterflymx"
	DeviceProviderDeviceProviderNameSchlage                    DeviceProviderDeviceProviderName = "schlage"
	DeviceProviderDeviceProviderNameSmartthings                DeviceProviderDeviceProviderName = "smartthings"
	DeviceProviderDeviceProviderNameYale                       DeviceProviderDeviceProviderName = "yale"
	DeviceProviderDeviceProviderNameGenie                      DeviceProviderDeviceProviderName = "genie"
	DeviceProviderDeviceProviderNameDoorking                   DeviceProviderDeviceProviderName = "doorking"
	DeviceProviderDeviceProviderNameSalto                      DeviceProviderDeviceProviderName = "salto"
	DeviceProviderDeviceProviderNameLockly                     DeviceProviderDeviceProviderName = "lockly"
	DeviceProviderDeviceProviderNameTtlock                     DeviceProviderDeviceProviderName = "ttlock"
	DeviceProviderDeviceProviderNameLinear                     DeviceProviderDeviceProviderName = "linear"
	DeviceProviderDeviceProviderNameNoiseaware                 DeviceProviderDeviceProviderName = "noiseaware"
	DeviceProviderDeviceProviderNameNuki                       DeviceProviderDeviceProviderName = "nuki"
	DeviceProviderDeviceProviderNameSeamRelayAdmin             DeviceProviderDeviceProviderName = "seam_relay_admin"
	DeviceProviderDeviceProviderNameIgloo                      DeviceProviderDeviceProviderName = "igloo"
	DeviceProviderDeviceProviderNameKwikset                    DeviceProviderDeviceProviderName = "kwikset"
	DeviceProviderDeviceProviderNameMinut                      DeviceProviderDeviceProviderName = "minut"
	DeviceProviderDeviceProviderNameMy2N                       DeviceProviderDeviceProviderName = "my_2n"
	DeviceProviderDeviceProviderNameControlbyweb               DeviceProviderDeviceProviderName = "controlbyweb"
	DeviceProviderDeviceProviderNameNest                       DeviceProviderDeviceProviderName = "nest"
	DeviceProviderDeviceProviderNameIgloohome                  DeviceProviderDeviceProviderName = "igloohome"
	DeviceProviderDeviceProviderNameEcobee                     DeviceProviderDeviceProviderName = "ecobee"
	DeviceProviderDeviceProviderNameHubitat                    DeviceProviderDeviceProviderName = "hubitat"
	DeviceProviderDeviceProviderNameFourSuites                 DeviceProviderDeviceProviderName = "four_suites"
	DeviceProviderDeviceProviderNameDormakabaOracode           DeviceProviderDeviceProviderName = "dormakaba_oracode"
	DeviceProviderDeviceProviderNamePti                        DeviceProviderDeviceProviderName = "pti"
	DeviceProviderDeviceProviderNameWyze                       DeviceProviderDeviceProviderName = "wyze"
	DeviceProviderDeviceProviderNameSeamPassport               DeviceProviderDeviceProviderName = "seam_passport"
	DeviceProviderDeviceProviderNameVisionline                 DeviceProviderDeviceProviderName = "visionline"
	DeviceProviderDeviceProviderNameAssaAbloyCredentialService DeviceProviderDeviceProviderName = "assa_abloy_credential_service"
	DeviceProviderDeviceProviderNameSeamBridge                 DeviceProviderDeviceProviderName = "seam_bridge"
	DeviceProviderDeviceProviderNameTedee                      DeviceProviderDeviceProviderName = "tedee"
	DeviceProviderDeviceProviderNameHoneywellResideo           DeviceProviderDeviceProviderName = "honeywell_resideo"
	DeviceProviderDeviceProviderNameLatch                      DeviceProviderDeviceProviderName = "latch"
)

func NewDeviceProviderDeviceProviderNameFromString(s string) (DeviceProviderDeviceProviderName, error) {
	switch s {
	case "akuvox":
		return DeviceProviderDeviceProviderNameAkuvox, nil
	case "august":
		return DeviceProviderDeviceProviderNameAugust, nil
	case "avigilon_alta":
		return DeviceProviderDeviceProviderNameAvigilonAlta, nil
	case "brivo":
		return DeviceProviderDeviceProviderNameBrivo, nil
	case "butterflymx":
		return DeviceProviderDeviceProviderNameButterflymx, nil
	case "schlage":
		return DeviceProviderDeviceProviderNameSchlage, nil
	case "smartthings":
		return DeviceProviderDeviceProviderNameSmartthings, nil
	case "yale":
		return DeviceProviderDeviceProviderNameYale, nil
	case "genie":
		return DeviceProviderDeviceProviderNameGenie, nil
	case "doorking":
		return DeviceProviderDeviceProviderNameDoorking, nil
	case "salto":
		return DeviceProviderDeviceProviderNameSalto, nil
	case "lockly":
		return DeviceProviderDeviceProviderNameLockly, nil
	case "ttlock":
		return DeviceProviderDeviceProviderNameTtlock, nil
	case "linear":
		return DeviceProviderDeviceProviderNameLinear, nil
	case "noiseaware":
		return DeviceProviderDeviceProviderNameNoiseaware, nil
	case "nuki":
		return DeviceProviderDeviceProviderNameNuki, nil
	case "seam_relay_admin":
		return DeviceProviderDeviceProviderNameSeamRelayAdmin, nil
	case "igloo":
		return DeviceProviderDeviceProviderNameIgloo, nil
	case "kwikset":
		return DeviceProviderDeviceProviderNameKwikset, nil
	case "minut":
		return DeviceProviderDeviceProviderNameMinut, nil
	case "my_2n":
		return DeviceProviderDeviceProviderNameMy2N, nil
	case "controlbyweb":
		return DeviceProviderDeviceProviderNameControlbyweb, nil
	case "nest":
		return DeviceProviderDeviceProviderNameNest, nil
	case "igloohome":
		return DeviceProviderDeviceProviderNameIgloohome, nil
	case "ecobee":
		return DeviceProviderDeviceProviderNameEcobee, nil
	case "hubitat":
		return DeviceProviderDeviceProviderNameHubitat, nil
	case "four_suites":
		return DeviceProviderDeviceProviderNameFourSuites, nil
	case "dormakaba_oracode":
		return DeviceProviderDeviceProviderNameDormakabaOracode, nil
	case "pti":
		return DeviceProviderDeviceProviderNamePti, nil
	case "wyze":
		return DeviceProviderDeviceProviderNameWyze, nil
	case "seam_passport":
		return DeviceProviderDeviceProviderNameSeamPassport, nil
	case "visionline":
		return DeviceProviderDeviceProviderNameVisionline, nil
	case "assa_abloy_credential_service":
		return DeviceProviderDeviceProviderNameAssaAbloyCredentialService, nil
	case "seam_bridge":
		return DeviceProviderDeviceProviderNameSeamBridge, nil
	case "tedee":
		return DeviceProviderDeviceProviderNameTedee, nil
	case "honeywell_resideo":
		return DeviceProviderDeviceProviderNameHoneywellResideo, nil
	case "latch":
		return DeviceProviderDeviceProviderNameLatch, nil
	}
	var t DeviceProviderDeviceProviderName
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceProviderDeviceProviderName) Ptr() *DeviceProviderDeviceProviderName {
	return &d
}

type DeviceProviderProviderCategoriesItem string

const (
	DeviceProviderProviderCategoriesItemStable               DeviceProviderProviderCategoriesItem = "stable"
	DeviceProviderProviderCategoriesItemConsumerSmartlocks   DeviceProviderProviderCategoriesItem = "consumer_smartlocks"
	DeviceProviderProviderCategoriesItemThermostats          DeviceProviderProviderCategoriesItem = "thermostats"
	DeviceProviderProviderCategoriesItemNoiseSensors         DeviceProviderProviderCategoriesItem = "noise_sensors"
	DeviceProviderProviderCategoriesItemAccessControlSystems DeviceProviderProviderCategoriesItem = "access_control_systems"
)

func NewDeviceProviderProviderCategoriesItemFromString(s string) (DeviceProviderProviderCategoriesItem, error) {
	switch s {
	case "stable":
		return DeviceProviderProviderCategoriesItemStable, nil
	case "consumer_smartlocks":
		return DeviceProviderProviderCategoriesItemConsumerSmartlocks, nil
	case "thermostats":
		return DeviceProviderProviderCategoriesItemThermostats, nil
	case "noise_sensors":
		return DeviceProviderProviderCategoriesItemNoiseSensors, nil
	case "access_control_systems":
		return DeviceProviderProviderCategoriesItemAccessControlSystems, nil
	}
	var t DeviceProviderProviderCategoriesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceProviderProviderCategoriesItem) Ptr() *DeviceProviderProviderCategoriesItem {
	return &d
}

type DeviceType string

const (
	DeviceTypeAkuvoxLock             DeviceType = "akuvox_lock"
	DeviceTypeAugustLock             DeviceType = "august_lock"
	DeviceTypeBrivoAccessPoint       DeviceType = "brivo_access_point"
	DeviceTypeButterflymxPanel       DeviceType = "butterflymx_panel"
	DeviceTypeAvigilonAltaEntry      DeviceType = "avigilon_alta_entry"
	DeviceTypeDoorkingLock           DeviceType = "doorking_lock"
	DeviceTypeGenieDoor              DeviceType = "genie_door"
	DeviceTypeIglooLock              DeviceType = "igloo_lock"
	DeviceTypeLinearLock             DeviceType = "linear_lock"
	DeviceTypeLocklyLock             DeviceType = "lockly_lock"
	DeviceTypeKwiksetLock            DeviceType = "kwikset_lock"
	DeviceTypeNukiLock               DeviceType = "nuki_lock"
	DeviceTypeSaltoLock              DeviceType = "salto_lock"
	DeviceTypeSchlageLock            DeviceType = "schlage_lock"
	DeviceTypeSeamRelay              DeviceType = "seam_relay"
	DeviceTypeSmartthingsLock        DeviceType = "smartthings_lock"
	DeviceTypeWyzeLock               DeviceType = "wyze_lock"
	DeviceTypeYaleLock               DeviceType = "yale_lock"
	DeviceTypeTwoNIntercom           DeviceType = "two_n_intercom"
	DeviceTypeControlbywebDevice     DeviceType = "controlbyweb_device"
	DeviceTypeTtlockLock             DeviceType = "ttlock_lock"
	DeviceTypeIgloohomeLock          DeviceType = "igloohome_lock"
	DeviceTypeHubitatLock            DeviceType = "hubitat_lock"
	DeviceTypeFourSuitesDoor         DeviceType = "four_suites_door"
	DeviceTypeDormakabaOracodeDoor   DeviceType = "dormakaba_oracode_door"
	DeviceTypeNoiseawareActivityZone DeviceType = "noiseaware_activity_zone"
	DeviceTypeMinutSensor            DeviceType = "minut_sensor"
	DeviceTypeEcobeeThermostat       DeviceType = "ecobee_thermostat"
	DeviceTypeNestThermostat         DeviceType = "nest_thermostat"
	DeviceTypeIosPhone               DeviceType = "ios_phone"
	DeviceTypeAndroidPhone           DeviceType = "android_phone"
)

func NewDeviceTypeFromString(s string) (DeviceType, error) {
	switch s {
	case "akuvox_lock":
		return DeviceTypeAkuvoxLock, nil
	case "august_lock":
		return DeviceTypeAugustLock, nil
	case "brivo_access_point":
		return DeviceTypeBrivoAccessPoint, nil
	case "butterflymx_panel":
		return DeviceTypeButterflymxPanel, nil
	case "avigilon_alta_entry":
		return DeviceTypeAvigilonAltaEntry, nil
	case "doorking_lock":
		return DeviceTypeDoorkingLock, nil
	case "genie_door":
		return DeviceTypeGenieDoor, nil
	case "igloo_lock":
		return DeviceTypeIglooLock, nil
	case "linear_lock":
		return DeviceTypeLinearLock, nil
	case "lockly_lock":
		return DeviceTypeLocklyLock, nil
	case "kwikset_lock":
		return DeviceTypeKwiksetLock, nil
	case "nuki_lock":
		return DeviceTypeNukiLock, nil
	case "salto_lock":
		return DeviceTypeSaltoLock, nil
	case "schlage_lock":
		return DeviceTypeSchlageLock, nil
	case "seam_relay":
		return DeviceTypeSeamRelay, nil
	case "smartthings_lock":
		return DeviceTypeSmartthingsLock, nil
	case "wyze_lock":
		return DeviceTypeWyzeLock, nil
	case "yale_lock":
		return DeviceTypeYaleLock, nil
	case "two_n_intercom":
		return DeviceTypeTwoNIntercom, nil
	case "controlbyweb_device":
		return DeviceTypeControlbywebDevice, nil
	case "ttlock_lock":
		return DeviceTypeTtlockLock, nil
	case "igloohome_lock":
		return DeviceTypeIgloohomeLock, nil
	case "hubitat_lock":
		return DeviceTypeHubitatLock, nil
	case "four_suites_door":
		return DeviceTypeFourSuitesDoor, nil
	case "dormakaba_oracode_door":
		return DeviceTypeDormakabaOracodeDoor, nil
	case "noiseaware_activity_zone":
		return DeviceTypeNoiseawareActivityZone, nil
	case "minut_sensor":
		return DeviceTypeMinutSensor, nil
	case "ecobee_thermostat":
		return DeviceTypeEcobeeThermostat, nil
	case "nest_thermostat":
		return DeviceTypeNestThermostat, nil
	case "ios_phone":
		return DeviceTypeIosPhone, nil
	case "android_phone":
		return DeviceTypeAndroidPhone, nil
	}
	var t DeviceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceType) Ptr() *DeviceType {
	return &d
}

type DeviceWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (d *DeviceWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler DeviceWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeviceWarningsItem(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeviceWarningsItem) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EnrollmentAutomation struct {
	CredentialManagerAcsSystemId string    `json:"credential_manager_acs_system_id" url:"credential_manager_acs_system_id"`
	UserIdentityId               string    `json:"user_identity_id" url:"user_identity_id"`
	CreatedAt                    time.Time `json:"created_at" url:"created_at"`
	WorkspaceId                  string    `json:"workspace_id" url:"workspace_id"`
	EnrollmentAutomationId       string    `json:"enrollment_automation_id" url:"enrollment_automation_id"`

	_rawJSON json.RawMessage
}

func (e *EnrollmentAutomation) UnmarshalJSON(data []byte) error {
	type embed EnrollmentAutomation
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EnrollmentAutomation(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrollmentAutomation) MarshalJSON() ([]byte, error) {
	type embed EnrollmentAutomation
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EnrollmentAutomation) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Event struct {
	EventId                string    `json:"event_id" url:"event_id"`
	DeviceId               *string   `json:"device_id,omitempty" url:"device_id,omitempty"`
	ActionAttemptId        *string   `json:"action_attempt_id,omitempty" url:"action_attempt_id,omitempty"`
	AcsCredentialId        *string   `json:"acs_credential_id,omitempty" url:"acs_credential_id,omitempty"`
	AcsUserId              *string   `json:"acs_user_id,omitempty" url:"acs_user_id,omitempty"`
	AcsSystemId            *string   `json:"acs_system_id,omitempty" url:"acs_system_id,omitempty"`
	ClientSessionId        *string   `json:"client_session_id,omitempty" url:"client_session_id,omitempty"`
	EnrollmentAutomationId *string   `json:"enrollment_automation_id,omitempty" url:"enrollment_automation_id,omitempty"`
	EventType              string    `json:"event_type" url:"event_type"`
	WorkspaceId            string    `json:"workspace_id" url:"workspace_id"`
	CreatedAt              time.Time `json:"created_at" url:"created_at"`
	OccurredAt             time.Time `json:"occurred_at" url:"occurred_at"`

	_rawJSON json.RawMessage
}

func (e *Event) UnmarshalJSON(data []byte) error {
	type embed Event
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		OccurredAt *core.DateTime `json:"occurred_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = Event(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.OccurredAt = unmarshaler.OccurredAt.Time()
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *Event) MarshalJSON() ([]byte, error) {
	type embed Event
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		OccurredAt *core.DateTime `json:"occurred_at"`
	}{
		embed:      embed(*e),
		CreatedAt:  core.NewDateTime(e.CreatedAt),
		OccurredAt: core.NewDateTime(e.OccurredAt),
	}
	return json.Marshal(marshaler)
}

func (e *Event) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventType string

const (
	EventTypeDeviceConnected                             EventType = "device.connected"
	EventTypeDeviceUnmanagedConnected                    EventType = "device.unmanaged.connected"
	EventTypeDeviceDisconnected                          EventType = "device.disconnected"
	EventTypeDeviceUnmanagedDisconnected                 EventType = "device.unmanaged.disconnected"
	EventTypeDeviceConvertedToUnmanaged                  EventType = "device.converted_to_unmanaged"
	EventTypeDeviceUnmanagedConvertedToManaged           EventType = "device.unmanaged.converted_to_managed"
	EventTypeDeviceRemoved                               EventType = "device.removed"
	EventTypeDeviceTampered                              EventType = "device.tampered"
	EventTypeDeviceLowBattery                            EventType = "device.low_battery"
	EventTypeDeviceBatteryStatusChanged                  EventType = "device.battery_status_changed"
	EventTypeDeviceThirdPartyIntegrationDetected         EventType = "device.third_party_integration_detected"
	EventTypeDeviceThirdPartyIntegrationNoLongerDetected EventType = "device.third_party_integration_no_longer_detected"
	EventTypeDeviceSaltoPrivacyModeActivated             EventType = "device.salto.privacy_mode_activated"
	EventTypeDeviceSaltoPrivacyModeDeactivated           EventType = "device.salto.privacy_mode_deactivated"
	EventTypeDeviceConnectionBecameFlaky                 EventType = "device.connection_became_flaky"
	EventTypeDeviceConnectionStabilized                  EventType = "device.connection_stabilized"
	EventTypeDeviceErrorSubscriptionRequired             EventType = "device.error.subscription_required"
	EventTypeDeviceErrorSubscriptionRequiredResolved     EventType = "device.error.subscription_required.resolved"
	EventTypeAccessCodeCreated                           EventType = "access_code.created"
	EventTypeAccessCodeChanged                           EventType = "access_code.changed"
	EventTypeAccessCodeScheduledOnDevice                 EventType = "access_code.scheduled_on_device"
	EventTypeAccessCodeSetOnDevice                       EventType = "access_code.set_on_device"
	EventTypeAccessCodeDeleted                           EventType = "access_code.deleted"
	EventTypeAccessCodeRemovedFromDevice                 EventType = "access_code.removed_from_device"
	EventTypeAccessCodeFailedToSetOnDevice               EventType = "access_code.failed_to_set_on_device"
	EventTypeAccessCodeDelayInSettingOnDevice            EventType = "access_code.delay_in_setting_on_device"
	EventTypeAccessCodeFailedToRemoveFromDevice          EventType = "access_code.failed_to_remove_from_device"
	EventTypeAccessCodeDelayInRemovingFromDevice         EventType = "access_code.delay_in_removing_from_device"
	EventTypeAccessCodeDeletedExternalToSeam             EventType = "access_code.deleted_external_to_seam"
	EventTypeAccessCodeModifiedExternalToSeam            EventType = "access_code.modified_external_to_seam"
	EventTypeAccessCodeUnmanagedConvertedToManaged       EventType = "access_code.unmanaged.converted_to_managed"
	EventTypeAccessCodeUnmanagedFailedToConvertToManaged EventType = "access_code.unmanaged.failed_to_convert_to_managed"
	EventTypeAccessCodeUnmanagedCreated                  EventType = "access_code.unmanaged.created"
	EventTypeAccessCodeUnmanagedRemoved                  EventType = "access_code.unmanaged.removed"
	EventTypeLockLocked                                  EventType = "lock.locked"
	EventTypeLockUnlocked                                EventType = "lock.unlocked"
	EventTypeConnectedAccountConnected                   EventType = "connected_account.connected"
	EventTypeConnectedAccountSuccessfulLogin             EventType = "connected_account.successful_login"
	EventTypeConnectedAccountCreated                     EventType = "connected_account.created"
	EventTypeConnectedAccountDeleted                     EventType = "connected_account.deleted"
	EventTypeConnectedAccountDisconnected                EventType = "connected_account.disconnected"
	EventTypeConnectedAccountCompletedFirstSync          EventType = "connected_account.completed_first_sync"
	EventTypeNoiseSensorNoiseThresholdTriggered          EventType = "noise_sensor.noise_threshold_triggered"
	EventTypeAccessCodeBackupAccessCodePulled            EventType = "access_code.backup_access_code_pulled"
	EventTypeEnrollmentAutomationDeleted                 EventType = "enrollment_automation.deleted"
	EventTypeAcsUserDeleted                              EventType = "acs_user.deleted"
	EventTypeAcsCredentialDeleted                        EventType = "acs_credential.deleted"
	EventTypePhoneDeactivated                            EventType = "phone.deactivated"
	EventTypeClientSessionDeleted                        EventType = "client_session.deleted"
)

func NewEventTypeFromString(s string) (EventType, error) {
	switch s {
	case "device.connected":
		return EventTypeDeviceConnected, nil
	case "device.unmanaged.connected":
		return EventTypeDeviceUnmanagedConnected, nil
	case "device.disconnected":
		return EventTypeDeviceDisconnected, nil
	case "device.unmanaged.disconnected":
		return EventTypeDeviceUnmanagedDisconnected, nil
	case "device.converted_to_unmanaged":
		return EventTypeDeviceConvertedToUnmanaged, nil
	case "device.unmanaged.converted_to_managed":
		return EventTypeDeviceUnmanagedConvertedToManaged, nil
	case "device.removed":
		return EventTypeDeviceRemoved, nil
	case "device.tampered":
		return EventTypeDeviceTampered, nil
	case "device.low_battery":
		return EventTypeDeviceLowBattery, nil
	case "device.battery_status_changed":
		return EventTypeDeviceBatteryStatusChanged, nil
	case "device.third_party_integration_detected":
		return EventTypeDeviceThirdPartyIntegrationDetected, nil
	case "device.third_party_integration_no_longer_detected":
		return EventTypeDeviceThirdPartyIntegrationNoLongerDetected, nil
	case "device.salto.privacy_mode_activated":
		return EventTypeDeviceSaltoPrivacyModeActivated, nil
	case "device.salto.privacy_mode_deactivated":
		return EventTypeDeviceSaltoPrivacyModeDeactivated, nil
	case "device.connection_became_flaky":
		return EventTypeDeviceConnectionBecameFlaky, nil
	case "device.connection_stabilized":
		return EventTypeDeviceConnectionStabilized, nil
	case "device.error.subscription_required":
		return EventTypeDeviceErrorSubscriptionRequired, nil
	case "device.error.subscription_required.resolved":
		return EventTypeDeviceErrorSubscriptionRequiredResolved, nil
	case "access_code.created":
		return EventTypeAccessCodeCreated, nil
	case "access_code.changed":
		return EventTypeAccessCodeChanged, nil
	case "access_code.scheduled_on_device":
		return EventTypeAccessCodeScheduledOnDevice, nil
	case "access_code.set_on_device":
		return EventTypeAccessCodeSetOnDevice, nil
	case "access_code.deleted":
		return EventTypeAccessCodeDeleted, nil
	case "access_code.removed_from_device":
		return EventTypeAccessCodeRemovedFromDevice, nil
	case "access_code.failed_to_set_on_device":
		return EventTypeAccessCodeFailedToSetOnDevice, nil
	case "access_code.delay_in_setting_on_device":
		return EventTypeAccessCodeDelayInSettingOnDevice, nil
	case "access_code.failed_to_remove_from_device":
		return EventTypeAccessCodeFailedToRemoveFromDevice, nil
	case "access_code.delay_in_removing_from_device":
		return EventTypeAccessCodeDelayInRemovingFromDevice, nil
	case "access_code.deleted_external_to_seam":
		return EventTypeAccessCodeDeletedExternalToSeam, nil
	case "access_code.modified_external_to_seam":
		return EventTypeAccessCodeModifiedExternalToSeam, nil
	case "access_code.unmanaged.converted_to_managed":
		return EventTypeAccessCodeUnmanagedConvertedToManaged, nil
	case "access_code.unmanaged.failed_to_convert_to_managed":
		return EventTypeAccessCodeUnmanagedFailedToConvertToManaged, nil
	case "access_code.unmanaged.created":
		return EventTypeAccessCodeUnmanagedCreated, nil
	case "access_code.unmanaged.removed":
		return EventTypeAccessCodeUnmanagedRemoved, nil
	case "lock.locked":
		return EventTypeLockLocked, nil
	case "lock.unlocked":
		return EventTypeLockUnlocked, nil
	case "connected_account.connected":
		return EventTypeConnectedAccountConnected, nil
	case "connected_account.successful_login":
		return EventTypeConnectedAccountSuccessfulLogin, nil
	case "connected_account.created":
		return EventTypeConnectedAccountCreated, nil
	case "connected_account.deleted":
		return EventTypeConnectedAccountDeleted, nil
	case "connected_account.disconnected":
		return EventTypeConnectedAccountDisconnected, nil
	case "connected_account.completed_first_sync":
		return EventTypeConnectedAccountCompletedFirstSync, nil
	case "noise_sensor.noise_threshold_triggered":
		return EventTypeNoiseSensorNoiseThresholdTriggered, nil
	case "access_code.backup_access_code_pulled":
		return EventTypeAccessCodeBackupAccessCodePulled, nil
	case "enrollment_automation.deleted":
		return EventTypeEnrollmentAutomationDeleted, nil
	case "acs_user.deleted":
		return EventTypeAcsUserDeleted, nil
	case "acs_credential.deleted":
		return EventTypeAcsCredentialDeleted, nil
	case "phone.deactivated":
		return EventTypePhoneDeactivated, nil
	case "client_session.deleted":
		return EventTypeClientSessionDeleted, nil
	}
	var t EventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventType) Ptr() *EventType {
	return &e
}

type FanMode string

const (
	FanModeAuto FanMode = "auto"
	FanModeOn   FanMode = "on"
)

func NewFanModeFromString(s string) (FanMode, error) {
	switch s {
	case "auto":
		return FanModeAuto, nil
	case "on":
		return FanModeOn, nil
	}
	var t FanMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FanMode) Ptr() *FanMode {
	return &f
}

type FanModeSetting string

const (
	FanModeSettingAuto FanModeSetting = "auto"
	FanModeSettingOn   FanModeSetting = "on"
)

func NewFanModeSettingFromString(s string) (FanModeSetting, error) {
	switch s {
	case "auto":
		return FanModeSettingAuto, nil
	case "on":
		return FanModeSettingOn, nil
	}
	var t FanModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FanModeSetting) Ptr() *FanModeSetting {
	return &f
}

type HvacModeSetting string

const (
	HvacModeSettingOff      HvacModeSetting = "off"
	HvacModeSettingHeat     HvacModeSetting = "heat"
	HvacModeSettingCool     HvacModeSetting = "cool"
	HvacModeSettingHeatCool HvacModeSetting = "heat_cool"
)

func NewHvacModeSettingFromString(s string) (HvacModeSetting, error) {
	switch s {
	case "off":
		return HvacModeSettingOff, nil
	case "heat":
		return HvacModeSettingHeat, nil
	case "cool":
		return HvacModeSettingCool, nil
	case "heat_cool":
		return HvacModeSettingHeatCool, nil
	}
	var t HvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HvacModeSetting) Ptr() *HvacModeSetting {
	return &h
}

type Manufacturer string

const (
	ManufacturerAkuvox           Manufacturer = "akuvox"
	ManufacturerAugust           Manufacturer = "august"
	ManufacturerAvigilonAlta     Manufacturer = "avigilon_alta"
	ManufacturerBrivo            Manufacturer = "brivo"
	ManufacturerButterflymx      Manufacturer = "butterflymx"
	ManufacturerDoorking         Manufacturer = "doorking"
	ManufacturerFourSuites       Manufacturer = "four_suites"
	ManufacturerGenie            Manufacturer = "genie"
	ManufacturerIgloo            Manufacturer = "igloo"
	ManufacturerKeywe            Manufacturer = "keywe"
	ManufacturerKwikset          Manufacturer = "kwikset"
	ManufacturerLinear           Manufacturer = "linear"
	ManufacturerLockly           Manufacturer = "lockly"
	ManufacturerNuki             Manufacturer = "nuki"
	ManufacturerPhilia           Manufacturer = "philia"
	ManufacturerSalto            Manufacturer = "salto"
	ManufacturerSamsung          Manufacturer = "samsung"
	ManufacturerSchlage          Manufacturer = "schlage"
	ManufacturerSeam             Manufacturer = "seam"
	ManufacturerUnknown          Manufacturer = "unknown"
	ManufacturerWyze             Manufacturer = "wyze"
	ManufacturerYale             Manufacturer = "yale"
	ManufacturerMinut            Manufacturer = "minut"
	ManufacturerTwoN             Manufacturer = "two_n"
	ManufacturerTtlock           Manufacturer = "ttlock"
	ManufacturerNest             Manufacturer = "nest"
	ManufacturerIgloohome        Manufacturer = "igloohome"
	ManufacturerEcobee           Manufacturer = "ecobee"
	ManufacturerHubitat          Manufacturer = "hubitat"
	ManufacturerControlbyweb     Manufacturer = "controlbyweb"
	ManufacturerSmartthings      Manufacturer = "smartthings"
	ManufacturerDormakabaOracode Manufacturer = "dormakaba_oracode"
)

func NewManufacturerFromString(s string) (Manufacturer, error) {
	switch s {
	case "akuvox":
		return ManufacturerAkuvox, nil
	case "august":
		return ManufacturerAugust, nil
	case "avigilon_alta":
		return ManufacturerAvigilonAlta, nil
	case "brivo":
		return ManufacturerBrivo, nil
	case "butterflymx":
		return ManufacturerButterflymx, nil
	case "doorking":
		return ManufacturerDoorking, nil
	case "four_suites":
		return ManufacturerFourSuites, nil
	case "genie":
		return ManufacturerGenie, nil
	case "igloo":
		return ManufacturerIgloo, nil
	case "keywe":
		return ManufacturerKeywe, nil
	case "kwikset":
		return ManufacturerKwikset, nil
	case "linear":
		return ManufacturerLinear, nil
	case "lockly":
		return ManufacturerLockly, nil
	case "nuki":
		return ManufacturerNuki, nil
	case "philia":
		return ManufacturerPhilia, nil
	case "salto":
		return ManufacturerSalto, nil
	case "samsung":
		return ManufacturerSamsung, nil
	case "schlage":
		return ManufacturerSchlage, nil
	case "seam":
		return ManufacturerSeam, nil
	case "unknown":
		return ManufacturerUnknown, nil
	case "wyze":
		return ManufacturerWyze, nil
	case "yale":
		return ManufacturerYale, nil
	case "minut":
		return ManufacturerMinut, nil
	case "two_n":
		return ManufacturerTwoN, nil
	case "ttlock":
		return ManufacturerTtlock, nil
	case "nest":
		return ManufacturerNest, nil
	case "igloohome":
		return ManufacturerIgloohome, nil
	case "ecobee":
		return ManufacturerEcobee, nil
	case "hubitat":
		return ManufacturerHubitat, nil
	case "controlbyweb":
		return ManufacturerControlbyweb, nil
	case "smartthings":
		return ManufacturerSmartthings, nil
	case "dormakaba_oracode":
		return ManufacturerDormakabaOracode, nil
	}
	var t Manufacturer
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m Manufacturer) Ptr() *Manufacturer {
	return &m
}

type MaxTimeRounding string

const (
	MaxTimeRoundingOneHour MaxTimeRounding = "1hour"
	MaxTimeRoundingOneDay  MaxTimeRounding = "1day"
	MaxTimeRoundingOneH    MaxTimeRounding = "1h"
	MaxTimeRoundingOneD    MaxTimeRounding = "1d"
)

func NewMaxTimeRoundingFromString(s string) (MaxTimeRounding, error) {
	switch s {
	case "1hour":
		return MaxTimeRoundingOneHour, nil
	case "1day":
		return MaxTimeRoundingOneDay, nil
	case "1h":
		return MaxTimeRoundingOneH, nil
	case "1d":
		return MaxTimeRoundingOneD, nil
	}
	var t MaxTimeRounding
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MaxTimeRounding) Ptr() *MaxTimeRounding {
	return &m
}

type Network struct {
	NetworkId   string    `json:"network_id" url:"network_id"`
	WorkspaceId string    `json:"workspace_id" url:"workspace_id"`
	DisplayName string    `json:"display_name" url:"display_name"`
	CreatedAt   time.Time `json:"created_at" url:"created_at"`

	_rawJSON json.RawMessage
}

func (n *Network) UnmarshalJSON(data []byte) error {
	type embed Network
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*n),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*n = Network(unmarshaler.embed)
	n.CreatedAt = unmarshaler.CreatedAt.Time()
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *Network) MarshalJSON() ([]byte, error) {
	type embed Network
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*n),
		CreatedAt: core.NewDateTime(n.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (n *Network) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NoiseThreshold struct {
	NoiseThresholdId       string   `json:"noise_threshold_id" url:"noise_threshold_id"`
	DeviceId               string   `json:"device_id" url:"device_id"`
	Name                   string   `json:"name" url:"name"`
	NoiseThresholdNrs      *float64 `json:"noise_threshold_nrs,omitempty" url:"noise_threshold_nrs,omitempty"`
	StartsDailyAt          string   `json:"starts_daily_at" url:"starts_daily_at"`
	EndsDailyAt            string   `json:"ends_daily_at" url:"ends_daily_at"`
	NoiseThresholdDecibels float64  `json:"noise_threshold_decibels" url:"noise_threshold_decibels"`

	_rawJSON json.RawMessage
}

func (n *NoiseThreshold) UnmarshalJSON(data []byte) error {
	type unmarshaler NoiseThreshold
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NoiseThreshold(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NoiseThreshold) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type Phone struct {
	// Unique identifier for the device.
	DeviceId   string          `json:"device_id" url:"device_id"`
	DeviceType PhoneDeviceType `json:"device_type,omitempty" url:"device_type,omitempty"`
	// Optional nickname to describe the device, settable through Seam
	Nickname *string `json:"nickname,omitempty" url:"nickname,omitempty"`
	// Display name of the device, defaults to nickname (if it is set) or properties.appearance.name otherwise. Enables administrators and users to identify the device easily, especially when there are numerous devices.
	DisplayName string `json:"display_name" url:"display_name"`
	// Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.
	CapabilitiesSupported []PhoneCapabilitiesSupportedItem `json:"capabilities_supported,omitempty" url:"capabilities_supported,omitempty"`
	Properties            *PhoneProperties                 `json:"properties,omitempty" url:"properties,omitempty"`
	// Location information for the device.
	Location *PhoneLocation `json:"location,omitempty" url:"location,omitempty"`
	// Unique identifier for the Seam workspace associated with the device.
	WorkspaceId string `json:"workspace_id" url:"workspace_id"`
	// Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
	Errors []*PhoneErrorsItem `json:"errors,omitempty" url:"errors,omitempty"`
	// Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
	Warnings []*PhoneWarningsItem `json:"warnings,omitempty" url:"warnings,omitempty"`
	// Date and time at which the device object was created.
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// Indicates whether Seam manages the device.
	IsManaged                    bool                                 `json:"is_managed" url:"is_managed"`
	CustomMetadata               map[string]*PhoneCustomMetadataValue `json:"custom_metadata,omitempty" url:"custom_metadata,omitempty"`
	CanRemotelyUnlock            *bool                                `json:"can_remotely_unlock,omitempty" url:"can_remotely_unlock,omitempty"`
	CanRemotelyLock              *bool                                `json:"can_remotely_lock,omitempty" url:"can_remotely_lock,omitempty"`
	CanProgramOfflineAccessCodes *bool                                `json:"can_program_offline_access_codes,omitempty" url:"can_program_offline_access_codes,omitempty"`
	CanProgramOnlineAccessCodes  *bool                                `json:"can_program_online_access_codes,omitempty" url:"can_program_online_access_codes,omitempty"`
	CanSimulateRemoval           *bool                                `json:"can_simulate_removal,omitempty" url:"can_simulate_removal,omitempty"`
	CanSimulateConnection        *bool                                `json:"can_simulate_connection,omitempty" url:"can_simulate_connection,omitempty"`
	CanSimulateDisconnection     *bool                                `json:"can_simulate_disconnection,omitempty" url:"can_simulate_disconnection,omitempty"`

	_rawJSON json.RawMessage
}

func (p *Phone) UnmarshalJSON(data []byte) error {
	type embed Phone
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = Phone(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Phone) MarshalJSON() ([]byte, error) {
	type embed Phone
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *Phone) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneCapabilitiesSupportedItem string

const (
	PhoneCapabilitiesSupportedItemAccessCode     PhoneCapabilitiesSupportedItem = "access_code"
	PhoneCapabilitiesSupportedItemLock           PhoneCapabilitiesSupportedItem = "lock"
	PhoneCapabilitiesSupportedItemNoiseDetection PhoneCapabilitiesSupportedItem = "noise_detection"
	PhoneCapabilitiesSupportedItemThermostat     PhoneCapabilitiesSupportedItem = "thermostat"
	PhoneCapabilitiesSupportedItemBattery        PhoneCapabilitiesSupportedItem = "battery"
	PhoneCapabilitiesSupportedItemPhone          PhoneCapabilitiesSupportedItem = "phone"
)

func NewPhoneCapabilitiesSupportedItemFromString(s string) (PhoneCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return PhoneCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return PhoneCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return PhoneCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return PhoneCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return PhoneCapabilitiesSupportedItemBattery, nil
	case "phone":
		return PhoneCapabilitiesSupportedItemPhone, nil
	}
	var t PhoneCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneCapabilitiesSupportedItem) Ptr() *PhoneCapabilitiesSupportedItem {
	return &p
}

type PhoneCustomMetadataValue struct {
	typeName string
	String   string
	Boolean  bool
}

func NewPhoneCustomMetadataValueFromString(value string) *PhoneCustomMetadataValue {
	return &PhoneCustomMetadataValue{typeName: "string", String: value}
}

func NewPhoneCustomMetadataValueFromBoolean(value bool) *PhoneCustomMetadataValue {
	return &PhoneCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func (p *PhoneCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		p.typeName = "string"
		p.String = valueString
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		p.typeName = "boolean"
		p.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, p)
}

func (p PhoneCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch p.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return json.Marshal(p.String)
	case "boolean":
		return json.Marshal(p.Boolean)
	}
}

type PhoneCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitBoolean(bool) error
}

func (p *PhoneCustomMetadataValue) Accept(visitor PhoneCustomMetadataValueVisitor) error {
	switch p.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", p.typeName, p)
	case "string":
		return visitor.VisitString(p.String)
	case "boolean":
		return visitor.VisitBoolean(p.Boolean)
	}
}

type PhoneDeviceType string

const (
	PhoneDeviceTypeAndroidPhone PhoneDeviceType = "android_phone"
	PhoneDeviceTypeIosPhone     PhoneDeviceType = "ios_phone"
)

func NewPhoneDeviceTypeFromString(s string) (PhoneDeviceType, error) {
	switch s {
	case "android_phone":
		return PhoneDeviceTypeAndroidPhone, nil
	case "ios_phone":
		return PhoneDeviceTypeIosPhone, nil
	}
	var t PhoneDeviceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneDeviceType) Ptr() *PhoneDeviceType {
	return &p
}

type PhoneErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (p *PhoneErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneErrorsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneErrorsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Location information for the device.
type PhoneLocation struct {
	// Name of the device location.
	LocationName *string `json:"location_name,omitempty" url:"location_name,omitempty"`
	// Time zone of the device location.
	Timezone *string `json:"timezone,omitempty" url:"timezone,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneLocation(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneLocation) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneOperatingSystem string

const (
	PhoneOperatingSystemAndroid PhoneOperatingSystem = "android"
	PhoneOperatingSystemIos     PhoneOperatingSystem = "ios"
)

func NewPhoneOperatingSystemFromString(s string) (PhoneOperatingSystem, error) {
	switch s {
	case "android":
		return PhoneOperatingSystemAndroid, nil
	case "ios":
		return PhoneOperatingSystemIos, nil
	}
	var t PhoneOperatingSystem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PhoneOperatingSystem) Ptr() *PhoneOperatingSystem {
	return &p
}

type PhoneProperties struct {
	AssaAbloyCredentialServiceMetadata *PhonePropertiesAssaAbloyCredentialServiceMetadata `json:"assa_abloy_credential_service_metadata,omitempty" url:"assa_abloy_credential_service_metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhoneProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneProperties(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneProperties) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhonePropertiesAssaAbloyCredentialServiceMetadata struct {
	HasActiveEndpoint bool                                                              `json:"has_active_endpoint" url:"has_active_endpoint"`
	Endpoints         []*PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem `json:"endpoints,omitempty" url:"endpoints,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler PhonePropertiesAssaAbloyCredentialServiceMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhonePropertiesAssaAbloyCredentialServiceMetadata(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadata) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem struct {
	EndpointId string `json:"endpoint_id" url:"endpoint_id"`
	IsActive   bool   `json:"is_active" url:"is_active"`

	_rawJSON json.RawMessage
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhonePropertiesAssaAbloyCredentialServiceMetadataEndpointsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PhoneWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (p *PhoneWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler PhoneWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PhoneWarningsItem(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PhoneWarningsItem) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProviderCategory string

const (
	ProviderCategoryStable             ProviderCategory = "stable"
	ProviderCategoryConsumerSmartlocks ProviderCategory = "consumer_smartlocks"
)

func NewProviderCategoryFromString(s string) (ProviderCategory, error) {
	switch s {
	case "stable":
		return ProviderCategoryStable, nil
	case "consumer_smartlocks":
		return ProviderCategoryConsumerSmartlocks, nil
	}
	var t ProviderCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProviderCategory) Ptr() *ProviderCategory {
	return &p
}

type SelectionMode string

const (
	SelectionModeNone     SelectionMode = "none"
	SelectionModeSingle   SelectionMode = "single"
	SelectionModeMultiple SelectionMode = "multiple"
)

func NewSelectionModeFromString(s string) (SelectionMode, error) {
	switch s {
	case "none":
		return SelectionModeNone, nil
	case "single":
		return SelectionModeSingle, nil
	case "multiple":
		return SelectionModeMultiple, nil
	}
	var t SelectionMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SelectionMode) Ptr() *SelectionMode {
	return &s
}

type ServiceHealth struct {
	Service     string              `json:"service" url:"service"`
	Status      ServiceHealthStatus `json:"status,omitempty" url:"status,omitempty"`
	Description string              `json:"description" url:"description"`

	_rawJSON json.RawMessage
}

func (s *ServiceHealth) UnmarshalJSON(data []byte) error {
	type unmarshaler ServiceHealth
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ServiceHealth(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ServiceHealth) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ServiceHealthStatus string

const (
	ServiceHealthStatusHealthy  ServiceHealthStatus = "healthy"
	ServiceHealthStatusDegraded ServiceHealthStatus = "degraded"
	ServiceHealthStatusDown     ServiceHealthStatus = "down"
)

func NewServiceHealthStatusFromString(s string) (ServiceHealthStatus, error) {
	switch s {
	case "healthy":
		return ServiceHealthStatusHealthy, nil
	case "degraded":
		return ServiceHealthStatusDegraded, nil
	case "down":
		return ServiceHealthStatusDown, nil
	}
	var t ServiceHealthStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ServiceHealthStatus) Ptr() *ServiceHealthStatus {
	return &s
}

type UnmanagedAccessCode struct {
	// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
	Type UnmanagedAccessCodeType `json:"type,omitempty" url:"type,omitempty"`
	// Unique identifier for the access code.
	AccessCodeId string `json:"access_code_id" url:"access_code_id"`
	// Unique identifier for the device associated with the access code.
	DeviceId string `json:"device_id" url:"device_id"`
	// Name of the access code. Enables administrators and users to identify the access code easily, especially when there are numerous access codes.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// Code used for access. Typically, a numeric or alphanumeric string.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// Date and time at which the access code was created.
	CreatedAt time.Time   `json:"created_at" url:"created_at"`
	Errors    interface{} `json:"errors,omitempty" url:"errors,omitempty"`
	Warnings  interface{} `json:"warnings,omitempty" url:"warnings,omitempty"`
	IsManaged bool        `json:"is_managed" url:"is_managed"`
	// Date and time at which the time-bound access code becomes active.
	StartsAt *time.Time `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	// Date and time after which the time-bound access code becomes inactive.
	EndsAt *time.Time `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	status string

	_rawJSON json.RawMessage
}

func (u *UnmanagedAccessCode) Status() string {
	return u.status
}

func (u *UnmanagedAccessCode) UnmarshalJSON(data []byte) error {
	type embed UnmanagedAccessCode
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		StartsAt  *core.DateTime `json:"starts_at,omitempty"`
		EndsAt    *core.DateTime `json:"ends_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UnmanagedAccessCode(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.StartsAt = unmarshaler.StartsAt.TimePtr()
	u.EndsAt = unmarshaler.EndsAt.TimePtr()
	u.status = "set"
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedAccessCode) MarshalJSON() ([]byte, error) {
	type embed UnmanagedAccessCode
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		StartsAt  *core.DateTime `json:"starts_at,omitempty"`
		EndsAt    *core.DateTime `json:"ends_at,omitempty"`
		Status    string         `json:"status"`
	}{
		embed:     embed(*u),
		CreatedAt: core.NewDateTime(u.CreatedAt),
		StartsAt:  core.NewOptionalDateTime(u.StartsAt),
		EndsAt:    core.NewOptionalDateTime(u.EndsAt),
		Status:    "set",
	}
	return json.Marshal(marshaler)
}

func (u *UnmanagedAccessCode) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Nature of the access code. Values are "ongoing" for access codes that are active continuously until deactivated manually or "time_bound" for access codes that have a specific duration.
type UnmanagedAccessCodeType string

const (
	UnmanagedAccessCodeTypeTimeBound UnmanagedAccessCodeType = "time_bound"
	UnmanagedAccessCodeTypeOngoing   UnmanagedAccessCodeType = "ongoing"
)

func NewUnmanagedAccessCodeTypeFromString(s string) (UnmanagedAccessCodeType, error) {
	switch s {
	case "time_bound":
		return UnmanagedAccessCodeTypeTimeBound, nil
	case "ongoing":
		return UnmanagedAccessCodeTypeOngoing, nil
	}
	var t UnmanagedAccessCodeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedAccessCodeType) Ptr() *UnmanagedAccessCodeType {
	return &u
}

type UnmanagedDevice struct {
	// Unique identifier for the device.
	DeviceId string `json:"device_id" url:"device_id"`
	// Type of the device.
	DeviceType DeviceType `json:"device_type,omitempty" url:"device_type,omitempty"`
	// Unique identifier for the account associated with the device.
	ConnectedAccountId string `json:"connected_account_id" url:"connected_account_id"`
	// Collection of capabilities that the device supports when connected to Seam. Values are "access_code," which indicates that the device can manage and utilize digital PIN codes for secure access; "lock," which indicates that the device controls a door locking mechanism, enabling the remote opening and closing of doors and other entry points; "noise_detection," which indicates that the device supports monitoring and responding to ambient noise levels; "thermostat," which indicates that the device can regulate and adjust indoor temperatures; and "battery," which indicates that the device can manage battery life and health.
	CapabilitiesSupported []UnmanagedDeviceCapabilitiesSupportedItem `json:"capabilities_supported,omitempty" url:"capabilities_supported,omitempty"`
	// Unique identifier for the Seam workspace associated with the device.
	WorkspaceId string `json:"workspace_id" url:"workspace_id"`
	// Array of errors associated with the device. Each error object within the array contains two fields: "error_code" and "message." "error_code" is a string that uniquely identifies the type of error, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the error, offering insights into the issue and potentially how to rectify it.
	Errors []*UnmanagedDeviceErrorsItem `json:"errors,omitempty" url:"errors,omitempty"`
	// Array of warnings associated with the device. Each warning object within the array contains two fields: "warning_code" and "message." "warning_code" is a string that uniquely identifies the type of warning, enabling quick recognition and categorization of the issue. "message" provides a more detailed description of the warning, offering insights into the issue and potentially how to rectify it.
	Warnings []*UnmanagedDeviceWarningsItem `json:"warnings,omitempty" url:"warnings,omitempty"`
	// Date and time at which the device object was created.
	CreatedAt                    time.Time                      `json:"created_at" url:"created_at"`
	IsManaged                    bool                           `json:"is_managed" url:"is_managed"`
	Properties                   *UnmanagedDeviceProperties     `json:"properties,omitempty" url:"properties,omitempty"`
	CanRemotelyUnlock            *bool                          `json:"can_remotely_unlock,omitempty" url:"can_remotely_unlock,omitempty"`
	CanRemotelyLock              *bool                          `json:"can_remotely_lock,omitempty" url:"can_remotely_lock,omitempty"`
	CanProgramOfflineAccessCodes *bool                          `json:"can_program_offline_access_codes,omitempty" url:"can_program_offline_access_codes,omitempty"`
	CanProgramOnlineAccessCodes  *bool                          `json:"can_program_online_access_codes,omitempty" url:"can_program_online_access_codes,omitempty"`
	CanSimulateRemoval           *bool                          `json:"can_simulate_removal,omitempty" url:"can_simulate_removal,omitempty"`
	CanSimulateConnection        *bool                          `json:"can_simulate_connection,omitempty" url:"can_simulate_connection,omitempty"`
	CanSimulateDisconnection     *bool                          `json:"can_simulate_disconnection,omitempty" url:"can_simulate_disconnection,omitempty"`
	DeviceProvider               *UnmanagedDeviceDeviceProvider `json:"device_provider,omitempty" url:"device_provider,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevice) UnmarshalJSON(data []byte) error {
	type embed UnmanagedDevice
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UnmanagedDevice(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevice) MarshalJSON() ([]byte, error) {
	type embed UnmanagedDevice
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*u),
		CreatedAt: core.NewDateTime(u.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UnmanagedDevice) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceCapabilitiesSupportedItem string

const (
	UnmanagedDeviceCapabilitiesSupportedItemAccessCode     UnmanagedDeviceCapabilitiesSupportedItem = "access_code"
	UnmanagedDeviceCapabilitiesSupportedItemLock           UnmanagedDeviceCapabilitiesSupportedItem = "lock"
	UnmanagedDeviceCapabilitiesSupportedItemNoiseDetection UnmanagedDeviceCapabilitiesSupportedItem = "noise_detection"
	UnmanagedDeviceCapabilitiesSupportedItemThermostat     UnmanagedDeviceCapabilitiesSupportedItem = "thermostat"
	UnmanagedDeviceCapabilitiesSupportedItemBattery        UnmanagedDeviceCapabilitiesSupportedItem = "battery"
	UnmanagedDeviceCapabilitiesSupportedItemPhone          UnmanagedDeviceCapabilitiesSupportedItem = "phone"
)

func NewUnmanagedDeviceCapabilitiesSupportedItemFromString(s string) (UnmanagedDeviceCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return UnmanagedDeviceCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return UnmanagedDeviceCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return UnmanagedDeviceCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return UnmanagedDeviceCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return UnmanagedDeviceCapabilitiesSupportedItemBattery, nil
	case "phone":
		return UnmanagedDeviceCapabilitiesSupportedItemPhone, nil
	}
	var t UnmanagedDeviceCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedDeviceCapabilitiesSupportedItem) Ptr() *UnmanagedDeviceCapabilitiesSupportedItem {
	return &u
}

type UnmanagedDeviceDeviceProvider struct {
	ProviderCategories interface{} `json:"provider_categories,omitempty" url:"provider_categories,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceDeviceProvider) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceDeviceProvider
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceDeviceProvider(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceDeviceProvider) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceErrorsItem struct {
	ErrorCode string `json:"error_code" url:"error_code"`
	Message   string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceErrorsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceErrorsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceErrorsItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceErrorsItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceProperties struct {
	// Represents the accessory keypad state.
	AccessoryKeypad *UnmanagedDevicePropertiesAccessoryKeypad `json:"accessory_keypad,omitempty" url:"accessory_keypad,omitempty"`
	// ---
	// deprecated: use device.display_name instead
	// ---
	// Name of the device.
	Name string `json:"name" url:"name"`
	// Indicates whether the device is online.
	Online bool `json:"online" url:"online"`
	// Manufacturer of the device.
	Manufacturer *string `json:"manufacturer,omitempty" url:"manufacturer,omitempty"`
	// Image URL for the device.
	ImageUrl *string `json:"image_url,omitempty" url:"image_url,omitempty"`
	// Alt text for the device image.
	ImageAltText *string `json:"image_alt_text,omitempty" url:"image_alt_text,omitempty"`
	// Indicates the battery level of the device as a decimal value between 0 and 1, inclusive.
	BatteryLevel *float64 `json:"battery_level,omitempty" url:"battery_level,omitempty"`
	// Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.
	Battery *UnmanagedDevicePropertiesBattery `json:"battery,omitempty" url:"battery,omitempty"`
	// Indicates whether it is currently possible to use online access codes for the device.
	OnlineAccessCodesEnabled *bool `json:"online_access_codes_enabled,omitempty" url:"online_access_codes_enabled,omitempty"`
	// Indicates whether it is currently possible to use offline access codes for the device.
	OfflineAccessCodesEnabled *bool                           `json:"offline_access_codes_enabled,omitempty" url:"offline_access_codes_enabled,omitempty"`
	Model                     *UnmanagedDevicePropertiesModel `json:"model,omitempty" url:"model,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceProperties(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceProperties) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Represents the accessory keypad state.
type UnmanagedDevicePropertiesAccessoryKeypad struct {
	// Indicates if the accessory_keypad is connected to the device.
	IsConnected bool `json:"is_connected" url:"is_connected"`
	// Indicates if the keypad battery properties.
	Battery *UnmanagedDevicePropertiesAccessoryKeypadBattery `json:"battery,omitempty" url:"battery,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevicePropertiesAccessoryKeypad) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevicePropertiesAccessoryKeypad
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevicePropertiesAccessoryKeypad(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevicePropertiesAccessoryKeypad) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Indicates if the keypad battery properties.
type UnmanagedDevicePropertiesAccessoryKeypadBattery struct {
	Level float64 `json:"level" url:"level"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevicePropertiesAccessoryKeypadBattery) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevicePropertiesAccessoryKeypadBattery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevicePropertiesAccessoryKeypadBattery(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevicePropertiesAccessoryKeypadBattery) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Represents the current status of the battery charge level. Values are "critical," which indicates an extremely low level, suggesting imminent shutdown or an urgent need for charging; "low," which signifies that the battery is under the preferred threshold and should be charged soon; "good," which denotes a satisfactory charge level, adequate for normal use without the immediate need for recharging; and "full," which represents a battery that is fully charged, providing the maximum duration of usage.
type UnmanagedDevicePropertiesBattery struct {
	Level  float64                                `json:"level" url:"level"`
	Status UnmanagedDevicePropertiesBatteryStatus `json:"status,omitempty" url:"status,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevicePropertiesBattery) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevicePropertiesBattery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevicePropertiesBattery(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevicePropertiesBattery) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDevicePropertiesBatteryStatus string

const (
	UnmanagedDevicePropertiesBatteryStatusCritical UnmanagedDevicePropertiesBatteryStatus = "critical"
	UnmanagedDevicePropertiesBatteryStatusLow      UnmanagedDevicePropertiesBatteryStatus = "low"
	UnmanagedDevicePropertiesBatteryStatusGood     UnmanagedDevicePropertiesBatteryStatus = "good"
	UnmanagedDevicePropertiesBatteryStatusFull     UnmanagedDevicePropertiesBatteryStatus = "full"
)

func NewUnmanagedDevicePropertiesBatteryStatusFromString(s string) (UnmanagedDevicePropertiesBatteryStatus, error) {
	switch s {
	case "critical":
		return UnmanagedDevicePropertiesBatteryStatusCritical, nil
	case "low":
		return UnmanagedDevicePropertiesBatteryStatusLow, nil
	case "good":
		return UnmanagedDevicePropertiesBatteryStatusGood, nil
	case "full":
		return UnmanagedDevicePropertiesBatteryStatusFull, nil
	}
	var t UnmanagedDevicePropertiesBatteryStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedDevicePropertiesBatteryStatus) Ptr() *UnmanagedDevicePropertiesBatteryStatus {
	return &u
}

type UnmanagedDevicePropertiesModel struct {
	// Indicates whether the device can connect a accessory keypad.
	CanConnectAccessoryKeypad *bool `json:"can_connect_accessory_keypad,omitempty" url:"can_connect_accessory_keypad,omitempty"`
	// Display name of the device model.
	DisplayName string `json:"display_name" url:"display_name"`
	// Display name that corresponds to the manufacturer-specific terminology for the device.
	ManufacturerDisplayName string `json:"manufacturer_display_name" url:"manufacturer_display_name"`
	// Indicates whether the device has a built in accessory keypad.
	HasBuiltInKeypad *bool `json:"has_built_in_keypad,omitempty" url:"has_built_in_keypad,omitempty"`
	// Indicates whether the device supports offline access codes.
	OfflineAccessCodesSupported *bool `json:"offline_access_codes_supported,omitempty" url:"offline_access_codes_supported,omitempty"`
	// Indicates whether the device supports online access codes.
	OnlineAccessCodesSupported *bool `json:"online_access_codes_supported,omitempty" url:"online_access_codes_supported,omitempty"`
	// ---
	// deprecated: use device.properties.model.can_connect_accessory_keypad
	// ---
	AccessoryKeypadSupported *bool `json:"accessory_keypad_supported,omitempty" url:"accessory_keypad_supported,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDevicePropertiesModel) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDevicePropertiesModel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDevicePropertiesModel(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDevicePropertiesModel) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UnmanagedDeviceWarningsItem struct {
	WarningCode string `json:"warning_code" url:"warning_code"`
	Message     string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (u *UnmanagedDeviceWarningsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedDeviceWarningsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedDeviceWarningsItem(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UnmanagedDeviceWarningsItem) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserIdentity struct {
	UserIdentityId  string    `json:"user_identity_id" url:"user_identity_id"`
	UserIdentityKey *string   `json:"user_identity_key,omitempty" url:"user_identity_key,omitempty"`
	EmailAddress    *string   `json:"email_address,omitempty" url:"email_address,omitempty"`
	PhoneNumber     *string   `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	DisplayName     string    `json:"display_name" url:"display_name"`
	FullName        *string   `json:"full_name,omitempty" url:"full_name,omitempty"`
	CreatedAt       time.Time `json:"created_at" url:"created_at"`
	WorkspaceId     string    `json:"workspace_id" url:"workspace_id"`

	_rawJSON json.RawMessage
}

func (u *UserIdentity) UnmarshalJSON(data []byte) error {
	type embed UserIdentity
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserIdentity(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentity) MarshalJSON() ([]byte, error) {
	type embed UserIdentity
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed:     embed(*u),
		CreatedAt: core.NewDateTime(u.CreatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UserIdentity) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type Webhook struct {
	WebhookId  string   `json:"webhook_id" url:"webhook_id"`
	Url        string   `json:"url" url:"url"`
	EventTypes []string `json:"event_types,omitempty" url:"event_types,omitempty"`
	Secret     *string  `json:"secret,omitempty" url:"secret,omitempty"`

	_rawJSON json.RawMessage
}

func (w *Webhook) UnmarshalJSON(data []byte) error {
	type unmarshaler Webhook
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Webhook(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *Webhook) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type Workspace struct {
	WorkspaceId string `json:"workspace_id" url:"workspace_id"`
	Name        string `json:"name" url:"name"`
	CompanyName string `json:"company_name" url:"company_name"`
	IsSandbox   bool   `json:"is_sandbox" url:"is_sandbox"`
	// ---
	// deprecated: use company_name
	// ---
	ConnectPartnerName *string `json:"connect_partner_name,omitempty" url:"connect_partner_name,omitempty"`

	_rawJSON json.RawMessage
}

func (w *Workspace) UnmarshalJSON(data []byte) error {
	type unmarshaler Workspace
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Workspace(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *Workspace) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type ConnectedAccountsGetRequestConnectedAccountId struct {
	ConnectedAccountId string `json:"connected_account_id" url:"connected_account_id"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsGetRequestConnectedAccountId) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsGetRequestConnectedAccountId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsGetRequestConnectedAccountId(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsGetRequestConnectedAccountId) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConnectedAccountsGetRequestEmail struct {
	Email string `json:"email" url:"email"`

	_rawJSON json.RawMessage
}

func (c *ConnectedAccountsGetRequestEmail) UnmarshalJSON(data []byte) error {
	type unmarshaler ConnectedAccountsGetRequestEmail
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConnectedAccountsGetRequestEmail(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConnectedAccountsGetRequestEmail) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting string

const (
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingOff      ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "off"
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeat     ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "heat"
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingCool     ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "cool"
	ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeatCool ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting = "heat_cool"
)

func NewThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingFromString(s string) (ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting, error) {
	switch s {
	case "off":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingOff, nil
	case "heat":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeat, nil
	case "cool":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingCool, nil
	case "heat_cool":
		return ThermostatsUpdateRequestDefaultClimateSettingHvacModeSettingHeatCool, nil
	}
	var t ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting) Ptr() *ThermostatsUpdateRequestDefaultClimateSettingHvacModeSetting {
	return &t
}

type UserIdentitiesGetRequestUserIdentityId struct {
	UserIdentityId string `json:"user_identity_id" url:"user_identity_id"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesGetRequestUserIdentityId) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesGetRequestUserIdentityId
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesGetRequestUserIdentityId(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesGetRequestUserIdentityId) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserIdentitiesGetRequestUserIdentityKey struct {
	UserIdentityKey string `json:"user_identity_key" url:"user_identity_key"`

	_rawJSON json.RawMessage
}

func (u *UserIdentitiesGetRequestUserIdentityKey) UnmarshalJSON(data []byte) error {
	type unmarshaler UserIdentitiesGetRequestUserIdentityKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserIdentitiesGetRequestUserIdentityKey(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserIdentitiesGetRequestUserIdentityKey) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
)

type AccessCodesCreateRequest struct {
	DeviceId                      string           `json:"device_id" url:"device_id"`
	Name                          *string          `json:"name,omitempty" url:"name,omitempty"`
	StartsAt                      *string          `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                        *string          `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Code                          *string          `json:"code,omitempty" url:"code,omitempty"`
	Sync                          *bool            `json:"sync,omitempty" url:"sync,omitempty"`
	AttemptForOfflineDevice       *bool            `json:"attempt_for_offline_device,omitempty" url:"attempt_for_offline_device,omitempty"`
	CommonCodeKey                 *string          `json:"common_code_key,omitempty" url:"common_code_key,omitempty"`
	PreferNativeScheduling        *bool            `json:"prefer_native_scheduling,omitempty" url:"prefer_native_scheduling,omitempty"`
	UseBackupAccessCodePool       *bool            `json:"use_backup_access_code_pool,omitempty" url:"use_backup_access_code_pool,omitempty"`
	AllowExternalModification     *bool            `json:"allow_external_modification,omitempty" url:"allow_external_modification,omitempty"`
	IsExternalModificationAllowed *bool            `json:"is_external_modification_allowed,omitempty" url:"is_external_modification_allowed,omitempty"`
	UseOfflineAccessCode          *bool            `json:"use_offline_access_code,omitempty" url:"use_offline_access_code,omitempty"`
	IsOfflineAccessCode           *bool            `json:"is_offline_access_code,omitempty" url:"is_offline_access_code,omitempty"`
	IsOneTimeUse                  *bool            `json:"is_one_time_use,omitempty" url:"is_one_time_use,omitempty"`
	MaxTimeRounding               *MaxTimeRounding `json:"max_time_rounding,omitempty" url:"max_time_rounding,omitempty"`
}

type AccessCodesCreateMultipleRequest struct {
	DeviceIds                      []string                                                        `json:"device_ids,omitempty" url:"device_ids,omitempty"`
	BehaviorWhenCodeCannotBeShared *AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared `json:"behavior_when_code_cannot_be_shared,omitempty" url:"behavior_when_code_cannot_be_shared,omitempty"`
	PreferredCodeLength            *float64                                                        `json:"preferred_code_length,omitempty" url:"preferred_code_length,omitempty"`
	Name                           *string                                                         `json:"name,omitempty" url:"name,omitempty"`
	StartsAt                       *string                                                         `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                         *string                                                         `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Code                           *string                                                         `json:"code,omitempty" url:"code,omitempty"`
	AttemptForOfflineDevice        *bool                                                           `json:"attempt_for_offline_device,omitempty" url:"attempt_for_offline_device,omitempty"`
	PreferNativeScheduling         *bool                                                           `json:"prefer_native_scheduling,omitempty" url:"prefer_native_scheduling,omitempty"`
	UseBackupAccessCodePool        *bool                                                           `json:"use_backup_access_code_pool,omitempty" url:"use_backup_access_code_pool,omitempty"`
	AllowExternalModification      *bool                                                           `json:"allow_external_modification,omitempty" url:"allow_external_modification,omitempty"`
	IsExternalModificationAllowed  *bool                                                           `json:"is_external_modification_allowed,omitempty" url:"is_external_modification_allowed,omitempty"`
	UseOfflineAccessCode           *bool                                                           `json:"use_offline_access_code,omitempty" url:"use_offline_access_code,omitempty"`
	IsOfflineAccessCode            *bool                                                           `json:"is_offline_access_code,omitempty" url:"is_offline_access_code,omitempty"`
	IsOneTimeUse                   *bool                                                           `json:"is_one_time_use,omitempty" url:"is_one_time_use,omitempty"`
	MaxTimeRounding                *MaxTimeRounding                                                `json:"max_time_rounding,omitempty" url:"max_time_rounding,omitempty"`
}

type AccessCodesDeleteRequest struct {
	DeviceId     *string `json:"device_id,omitempty" url:"device_id,omitempty"`
	AccessCodeId string  `json:"access_code_id" url:"access_code_id"`
	Sync         *bool   `json:"sync,omitempty" url:"sync,omitempty"`
}

type AccessCodesGenerateCodeRequest struct {
	DeviceId string `json:"device_id" url:"device_id"`
}

type AccessCodesGetRequest struct {
	DeviceId     *string `json:"device_id,omitempty" url:"device_id,omitempty"`
	AccessCodeId *string `json:"access_code_id,omitempty" url:"access_code_id,omitempty"`
	Code         *string `json:"code,omitempty" url:"code,omitempty"`
}

type AccessCodesListRequest struct {
	DeviceId          string   `json:"device_id" url:"device_id"`
	AccessCodeIds     []string `json:"access_code_ids,omitempty" url:"access_code_ids,omitempty"`
	UserIdentifierKey *string  `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
}

type AccessCodesPullBackupAccessCodeRequest struct {
	AccessCodeId string `json:"access_code_id" url:"access_code_id"`
}

type AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared string

const (
	AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeSharedThrow            AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared = "throw"
	AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeSharedCreateRandomCode AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared = "create_random_code"
)

func NewAccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeSharedFromString(s string) (AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared, error) {
	switch s {
	case "throw":
		return AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeSharedThrow, nil
	case "create_random_code":
		return AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeSharedCreateRandomCode, nil
	}
	var t AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared) Ptr() *AccessCodesCreateMultipleRequestBehaviorWhenCodeCannotBeShared {
	return &a
}

type AccessCodesCreateMultipleResponse struct {
	AccessCodes []*AccessCode `json:"access_codes,omitempty" url:"access_codes,omitempty"`
	Ok          bool          `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesCreateMultipleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesCreateMultipleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesCreateMultipleResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesCreateMultipleResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesCreateResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	AccessCode    *AccessCode    `json:"access_code,omitempty" url:"access_code,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesCreateResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesCreateResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesDeleteResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesDeleteResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesDeleteResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesGenerateCodeResponse struct {
	GeneratedCode *AccessCode `json:"generated_code,omitempty" url:"generated_code,omitempty"`
	Ok            bool        `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesGenerateCodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesGenerateCodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesGenerateCodeResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesGenerateCodeResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesGetResponse struct {
	AccessCode *AccessCode `json:"access_code,omitempty" url:"access_code,omitempty"`
	Ok         bool        `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesGetResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesGetResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesListResponse struct {
	AccessCodes []*AccessCode `json:"access_codes,omitempty" url:"access_codes,omitempty"`
	Ok          bool          `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesListResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesListResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesPullBackupAccessCodeResponse struct {
	BackupAccessCode *AccessCode `json:"backup_access_code,omitempty" url:"backup_access_code,omitempty"`
	Ok               bool        `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesPullBackupAccessCodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesPullBackupAccessCodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesPullBackupAccessCodeResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesPullBackupAccessCodeResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesUpdateRequestType string

const (
	AccessCodesUpdateRequestTypeOngoing   AccessCodesUpdateRequestType = "ongoing"
	AccessCodesUpdateRequestTypeTimeBound AccessCodesUpdateRequestType = "time_bound"
)

func NewAccessCodesUpdateRequestTypeFromString(s string) (AccessCodesUpdateRequestType, error) {
	switch s {
	case "ongoing":
		return AccessCodesUpdateRequestTypeOngoing, nil
	case "time_bound":
		return AccessCodesUpdateRequestTypeTimeBound, nil
	}
	var t AccessCodesUpdateRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodesUpdateRequestType) Ptr() *AccessCodesUpdateRequestType {
	return &a
}

type AccessCodesUpdateResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty" url:"action_attempt,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (a *AccessCodesUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AccessCodesUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AccessCodesUpdateResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AccessCodesUpdateResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AccessCodesUpdateRequest struct {
	Name                          *string                       `json:"name,omitempty" url:"name,omitempty"`
	StartsAt                      *string                       `json:"starts_at,omitempty" url:"starts_at,omitempty"`
	EndsAt                        *string                       `json:"ends_at,omitempty" url:"ends_at,omitempty"`
	Code                          *string                       `json:"code,omitempty" url:"code,omitempty"`
	Sync                          *bool                         `json:"sync,omitempty" url:"sync,omitempty"`
	AttemptForOfflineDevice       *bool                         `json:"attempt_for_offline_device,omitempty" url:"attempt_for_offline_device,omitempty"`
	PreferNativeScheduling        *bool                         `json:"prefer_native_scheduling,omitempty" url:"prefer_native_scheduling,omitempty"`
	UseBackupAccessCodePool       *bool                         `json:"use_backup_access_code_pool,omitempty" url:"use_backup_access_code_pool,omitempty"`
	AllowExternalModification     *bool                         `json:"allow_external_modification,omitempty" url:"allow_external_modification,omitempty"`
	IsExternalModificationAllowed *bool                         `json:"is_external_modification_allowed,omitempty" url:"is_external_modification_allowed,omitempty"`
	UseOfflineAccessCode          *bool                         `json:"use_offline_access_code,omitempty" url:"use_offline_access_code,omitempty"`
	IsOfflineAccessCode           *bool                         `json:"is_offline_access_code,omitempty" url:"is_offline_access_code,omitempty"`
	IsOneTimeUse                  *bool                         `json:"is_one_time_use,omitempty" url:"is_one_time_use,omitempty"`
	MaxTimeRounding               *MaxTimeRounding              `json:"max_time_rounding,omitempty" url:"max_time_rounding,omitempty"`
	AccessCodeId                  string                        `json:"access_code_id" url:"access_code_id"`
	DeviceId                      *string                       `json:"device_id,omitempty" url:"device_id,omitempty"`
	Type                          *AccessCodesUpdateRequestType `json:"type,omitempty" url:"type,omitempty"`
	IsManaged                     *bool                         `json:"is_managed,omitempty" url:"is_managed,omitempty"`
}

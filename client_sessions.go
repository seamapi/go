// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type ClientSessionsCreateRequest struct {
	UserIdentifierKey   *string    `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
	ConnectWebviewIds   []string   `json:"connect_webview_ids,omitempty" url:"connect_webview_ids,omitempty"`
	ConnectedAccountIds []string   `json:"connected_account_ids,omitempty" url:"connected_account_ids,omitempty"`
	UserIdentityIds     []string   `json:"user_identity_ids,omitempty" url:"user_identity_ids,omitempty"`
	ExpiresAt           *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`
}

func (c *ClientSessionsCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsCreateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = ClientSessionsCreateRequest(body)
	return nil
}

func (c *ClientSessionsCreateRequest) MarshalJSON() ([]byte, error) {
	type embed ClientSessionsCreateRequest
	var marshaler = struct {
		embed
		ExpiresAt *core.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: core.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

type ClientSessionsDeleteRequest struct {
	ClientSessionId string `json:"client_session_id" url:"client_session_id"`
}

type ClientSessionsGetRequest struct {
	ClientSessionId   *string `json:"client_session_id,omitempty" url:"client_session_id,omitempty"`
	UserIdentifierKey *string `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
}

type ClientSessionsGetOrCreateRequest struct {
	UserIdentifierKey   *string    `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
	ConnectWebviewIds   []string   `json:"connect_webview_ids,omitempty" url:"connect_webview_ids,omitempty"`
	ConnectedAccountIds []string   `json:"connected_account_ids,omitempty" url:"connected_account_ids,omitempty"`
	UserIdentityIds     []string   `json:"user_identity_ids,omitempty" url:"user_identity_ids,omitempty"`
	ExpiresAt           *time.Time `json:"expires_at,omitempty" url:"expires_at,omitempty"`
}

func (c *ClientSessionsGetOrCreateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsGetOrCreateRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = ClientSessionsGetOrCreateRequest(body)
	return nil
}

func (c *ClientSessionsGetOrCreateRequest) MarshalJSON() ([]byte, error) {
	type embed ClientSessionsGetOrCreateRequest
	var marshaler = struct {
		embed
		ExpiresAt *core.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: core.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

type ClientSessionsGrantAccessRequest struct {
	ClientSessionId     *string  `json:"client_session_id,omitempty" url:"client_session_id,omitempty"`
	UserIdentifierKey   *string  `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
	ConnectedAccountIds []string `json:"connected_account_ids,omitempty" url:"connected_account_ids,omitempty"`
	ConnectWebviewIds   []string `json:"connect_webview_ids,omitempty" url:"connect_webview_ids,omitempty"`
	UserIdentityIds     []string `json:"user_identity_ids,omitempty" url:"user_identity_ids,omitempty"`
}

type ClientSessionsListRequest struct {
	ClientSessionId          *string `json:"client_session_id,omitempty" url:"client_session_id,omitempty"`
	UserIdentifierKey        *string `json:"user_identifier_key,omitempty" url:"user_identifier_key,omitempty"`
	ConnectWebviewId         *string `json:"connect_webview_id,omitempty" url:"connect_webview_id,omitempty"`
	WithoutUserIdentifierKey *bool   `json:"without_user_identifier_key,omitempty" url:"without_user_identifier_key,omitempty"`
	UserIdentityId           *string `json:"user_identity_id,omitempty" url:"user_identity_id,omitempty"`
}

type ClientSessionsRevokeRequest struct {
	ClientSessionId string `json:"client_session_id" url:"client_session_id"`
}

type ClientSessionsCreateResponse struct {
	ClientSession *ClientSession `json:"client_session,omitempty" url:"client_session,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsCreateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsCreateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientSessionsDeleteResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsDeleteResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsDeleteResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientSessionsGetOrCreateResponse struct {
	ClientSession *ClientSession `json:"client_session,omitempty" url:"client_session,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsGetOrCreateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsGetOrCreateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsGetOrCreateResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsGetOrCreateResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientSessionsGetResponse struct {
	ClientSession *ClientSession `json:"client_session,omitempty" url:"client_session,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsGetResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsGetResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientSessionsGrantAccessResponse struct {
	ClientSession *ClientSession `json:"client_session,omitempty" url:"client_session,omitempty"`
	Ok            bool           `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsGrantAccessResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsGrantAccessResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsGrantAccessResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsGrantAccessResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientSessionsListResponse struct {
	ClientSessions []*ClientSession `json:"client_sessions,omitempty" url:"client_sessions,omitempty"`
	Ok             bool             `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsListResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsListResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ClientSessionsRevokeResponse struct {
	Ok bool `json:"ok" url:"ok"`

	_rawJSON json.RawMessage
}

func (c *ClientSessionsRevokeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClientSessionsRevokeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClientSessionsRevokeResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClientSessionsRevokeResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
